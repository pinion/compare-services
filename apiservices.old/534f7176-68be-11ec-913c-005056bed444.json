[
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "534f7176-68be-11ec-913c-005056bed444.1",
        "title": "B2Bi - 2021/12/29 - r 1",
        "metadata": {
            "id": "8a2e8ff97dca5e85017e06de0b6e4923",
            "audit": {
                "createTimestamp": "2021-12-29T15:45:22.286+0000",
                "createUserId": "service-account-f161c415-37e3-4bd4-b146-15f9256921d7",
                "modifyTimestamp": "2023-07-21T03:47:00.172+0000",
                "modifyUserId": "service-account-f161c415-37e3-4bd4-b146-15f9256921d7"
            },
            "scope": {
                "id": "8a2e8ff97dca5e85017e06d566714811",
                "kind": "Environment",
                "name": "gtw-v7",
                "title": "gtw-v7",
                "selfLink": "/management/v1alpha1/environments/gtw-v7"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "2",
            "references": [
                {
                    "id": "8a2e8a6f7dca5fce017e06de04ea63ec",
                    "kind": "APIService",
                    "name": "534f7176-68be-11ec-913c-005056bed444",
                    "scopeKind": "Environment",
                    "scopeName": "gtw-v7",
                    "selfLink": "/management/v1alpha1/environments/gtw-v7/apiservices/534f7176-68be-11ec-913c-005056bed444",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/gtw-v7/apiservicerevisions/534f7176-68be-11ec-913c-005056bed444.1"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayDiscoveryAgent",
            "externalAPIID": "88fb1882-f145-4afe-939e-b27737398da8",
            "externalAPIName": "B2Bi",
            "GatewayType": "Edge",
            "majorHash": "152560307953350410",
            "minorHash": "14956723911806396182",
            "externalAPIPrimaryKey": "vhost:-path:/api/v1-routingKey:"
        },
        "finalizers": [],
        "tags": [
            "APIID_66f05952-b383-4c9f-9243-251d1d230561",
            "Type_Axway"
        ],
        "spec": {
            "apiService": "534f7176-68be-11ec-913c-005056bed444",
            "definition": {
                "type": "oas2",
                "value": "{
  "swagger" : "2.0",
  "info" : {
    "description" : "This B2Bi API enables configuration of communities, partners and exchanges. This enables partner on-boarding and community management.\n",
    "version" : "1.1.0",
    "title" : "B2Bi",
    "contact" : {
      "email" : "support@axway.com"
    },
    "license" : {
      "name" : "Copyright Axway 2017. All rights reserved."
    },
    "x-summary" : "This B2Bi API enables    configuration of communities, partners and exchanges. This enables partner on-boarding and community management."
  },
  "host" : "api-env.demo.axway.com:8065",
  "basePath" : "/api/v1",
  "tags" : [ {
    "name" : "AgreementResource",
    "description" : "Manage agreements and related objects"
  }, {
    "name" : "ApplicationExchangePointResource",
    "description" : "Manage application pickups and deliveries"
  }, {
    "name" : "AuthenticationResource",
    "description" : "Resources used for login and logout operations"
  }, {
    "name" : "CommunityExchangePointResource",
    "description" : "Resources for managing community trading pickups"
  }, {
    "name" : "CommunityResource",
    "description" : "Resources for managing communities"
  }, {
    "name" : "CommunitySecurityResource",
    "description" : "Resources for configuring security on communities"
  }, {
    "name" : "ComponentResource",
    "description" : "Resources for managing components"
  }, {
    "name" : "CrlPurgeResource",
    "description" : "Delete expired CRLs"
  }, {
    "name" : "CsosResource",
    "description" : "Manage CSOS documents"
  }, {
    "name" : "DocumentServiceResource",
    "description" : "Resources for managing services"
  }, {
    "name" : "EmbeddedServerResource",
    "description" : "Manage existing embedded servers"
  }, {
    "name" : "GlobalExternalSmtpServerResource",
    "description" : "Manage global external SMTP server"
  }, {
    "name" : "MessagesResource",
    "description" : "Manage messages attributes"
  }, {
    "name" : "MetadataProfileResource",
    "description" : "Manage metadata profiles"
  }, {
    "name" : "PickupGroupResource",
    "description" : "Manage pickup groups and assignments"
  }, {
    "name" : "TradingPartnerExchangePointResource",
    "description" : "Resources for managing trading partner deliveries"
  }, {
    "name" : "TradingPartnerResource",
    "description" : "Resources for managing trading partners"
  }, {
    "name" : "TradingPartnersSecurityResource",
    "description" : "Manage security on trading partners"
  }, {
    "name" : "UserSecurityResource",
    "description" : "Manage security on trading partners"
  }, {
    "name" : "WebTraderResource",
    "description" : "Manage webtraders"
  } ],
  "schemes" : [ "https" ],
  "security" : [ {
    "API Key" : [ ]
  } ],
  "paths" : {
    "/agreements/{id}/documentAgreements" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns a collection of document agreement objects that are available for a specific agreement.",
        "operationId" : "resource_AgreementResource_getDocumentAgreements_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available values: name, type, version. Example: name='X12Document'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name, type, version. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Adds a document agreement to an agreement specified by the unique identifier. A document agreement is a B2Bi\r\nobject that is used to specify how a document type (within a messaging standard and standard version) is to be\r\nhandled in an inbound agreement between exchange partners. A service can be added to define how the document will\r\nbe processed. For a service to be associated to a document agreement some criteria must be met. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12DocumentAgreement\",\r\n \"enabled\": true,\r\n \"documentFormat\": \"X12\",\r\n \"documentName\": \"002000 810\",\r\n \"type\": \"810\",\r\n \"version\": \"002000\",\r\n \"documentServiceId\": \"12311\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addDocumentAgreement_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the document agreement in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_DocumentAgreementBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/pgp/{id}" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Retrieve personal PGP certificate (public part) with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPrivatePGPCertificate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Certificate ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PGPCertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/inlineProcessors/{id}" : {
      "delete" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "DELETE custom processor with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_removeInlineProcessor_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom processor ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/routingIds" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve all the routing IDs of given party",
        "operationId" : "resource_TradingPartnerResource_getRoutingIds_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available fields: type, id. Example: id='X12AXWAY'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: type, id. Default: id.",
          "required" : false,
          "type" : "string",
          "default" : "id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Add a routing ID to a party.\r\nExample:\r\n<pre>\r\n {\r\n \"routingId\": \"ZZAXWAY\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_addRoutingId_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The RoutingIdBean to be added . <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_RoutingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/sftpSubDirectory" : {
      "put" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Update SFTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"PartnerSFTP\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_modifySftpSubDirectory_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/ftpSubDirectory/{id}" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET FTP subdirectory information that has given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getFtpSubDirectory_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Subdirectory ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "DELETE subdirectory with given {id} from FTP protocol",
        "operationId" : "resource_ApplicationExchangePointResource_removeFtpSubDirectory_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP subdirectory ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/pickup" : {
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Update a pickup protocol. Example:\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"FTPServer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS3\",\r\n \"friendlyName\": \"FTP Trading Pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"metadataFixedItems\": {\r\n \"BusinessProtocol\": \"AS3\"\r\n },\r\n \"restrictConsumableFileSize\": false,\r\n \"maxConsumableFileSize\": 0,\r\n \"metatadaTemplate\": {\r\n \"defaultMetadataTemplate\": \"\",\r\n \"enabledByProtocol\": false,\r\n \"metadataTemplatePolicy\": \"NEVER\",\r\n \"priorityOverFixedAttributes\": false\r\n },\r\n \"useCommunityMessageDelivery\": false,\r\n \"useContentProcessing\": false,\r\n \"ediSplitterEnabled\": true,\r\n \"pickupGroupStatus\": null,\r\n \"pickupGroup\": null,\r\n \"remoteUrl\": \"ftp://Community@somehost.com:4022/path\",\r\n localPort\": 4022,\r\n \"defaultUser\": {\r\n \"userName\": \"axway\",\r\n \"password\": \"12345\",\r\n \"ftpSubDirectories\": [\"/pathaxway\"]\r\n },\r\n sequenced\": false,\r\n \"sequenceTimeoutSeconds\": 60,\r\n \"modifyFtpServerDirectory\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updatePickupExchangePoint_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Pickup protocol update information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConsumerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/inlinePostProcessors/{id}" : {
      "delete" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "DELETE custom post processor with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_removeInlinePostProcessor_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom post processor ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/sftpSubDirectory/{id}" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET SFTP subdirectory information that has given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSftpSubDirectory_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Subdirectory ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "DELETE subdirectory with given {id} from SFTP protocol",
        "operationId" : "resource_ApplicationExchangePointResource_removeSftpSubDirectory_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP subdirectory ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/components/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Retrieve an additional Processing Step specified by a given ID.  <b>Required</b>.",
        "operationId" : "resource_DocumentServiceResource_getOutputComponent_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Processing Step associated to a Service output",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentServiceOutputComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Remove an additional Processing Step with given ID from a specific Service output.",
        "operationId" : "resource_DocumentServiceResource_removeOutputComponent_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Processing Step to be deleted.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreements/{id}/outputs" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the list of outputs specific to a document agreement. An output contains configuration parameters that\r\nspecify how the document will be delivered or enveloped.",
        "operationId" : "resource_AgreementResource_getDocumentAgreementOutputs_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/component/configurations/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfiguration_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/{id}/outputs" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Return the list of outputs for a Service with given ID.",
        "operationId" : "resource_DocumentServiceResource_getDocumentServiceOutputs_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Service. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/ftpSubDirectory/{id}" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET FTP subdirectory information that has given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getFtpSubDirectory_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Subdirectory ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "DELETE subdirectory with given {id} from FTP protocol",
        "operationId" : "resource_CommunityExchangePointResource_removeFtpSubDirectory_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP subdirectory ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/inlinePostProcessors" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET list with custom logic as an integral part of the post processing pipeline for the exchange point with {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getInlinePostProcessors_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Add new custom processor as an integral part of the post processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addInlinePostProcessor_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/sshUser/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve a SFTP User account owned by a party",
        "operationId" : "resource_TradingPartnerResource_getSshUser_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the SFTP User account.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Remove a SFTP User account owned by a party",
        "operationId" : "resource_TradingPartnerResource_removeSshUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the SFTP User account.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/{id}/inlineProcessors" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET list with custom logic as an integral part of the processing pipeline for the exchange point with {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getInlineProcessors_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Add new custom processor as an integral part of the processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addInlineProcessor_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/subscriptions" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve all trading partners subscribed under a community",
        "operationId" : "resource_CommunityResource_getSubscribedPartners_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the community.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/ftpSubDirectory" : {
      "put" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Update FTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Partner\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_modifyFtpSubDirectory_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/pgp/private/{id}/export" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Export private PGP certificate with specified {certificateId}.\r\nCertificate will be exported in .asc or .gpg format.",
        "operationId" : "resource_CommunitySecurityResource_exportPrivatePGPCertificate_GET",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Private certificate ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "isArmored",
          "in" : "query",
          "description" : "Tells us whether you want this certificate to be armoured or not. Optional. Default: false.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "Password for the store and certificate. Optional. Default: empty string.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile/{id}" : {
      "get" : {
        "tags" : [ "MetadataProfileResource" ],
        "description" : "Returns a Metadata Profile with the specified ID.",
        "operationId" : "resource_MetadataProfileResource_getMetadataProfile_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the desired metadataprofile profile. <b>Required</b>",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MetadataProfileBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "MetadataProfileResource" ],
        "description" : "Deletes the Metadata Profile of given ID.",
        "operationId" : "resource_MetadataProfileResource_removeMetadataProfile_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID o the Metadata profile to be deleted. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/emailUsers/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Returns the email user account with given ID.",
        "operationId" : "resource_TradingPartnerResource_getEmailUserBean_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_EmailUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Deletes an email user account that is no longer in use.",
        "operationId" : "resource_TradingPartnerResource_removeEmailUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/messagingId/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve a single messaging ID given by {id}",
        "operationId" : "resource_TradingPartnerResource_getMessagingId_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the messaging ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Remove a party messaging ID having the ID {id}",
        "operationId" : "resource_TradingPartnerResource_removeMessagingId_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the messaging ID to be removed.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/schedules" : {
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Update a given scheduler. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updateSchedule_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/postDetectionComponent/configurations/arguments" : {
      "put" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_updateArgument_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{partyId}/trading/pickup/status" : {
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Enable or disable all pickups for receiving partner messages. When disabling all pickups, the default pickup will\r\nnot be disabled.",
        "operationId" : "resource_CommunityExchangePointResource_changeStatusOnPickupExchanges_PUT",
        "parameters" : [ {
          "name" : "partyId",
          "in" : "path",
          "description" : "The ID of the community. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "enable",
          "in" : "query",
          "description" : "True to enable all trading pickups or false to disable all trading pickups. Optional, available values:\r\ntrue, false. Default false.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreement/attributes/templates/{id}" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns a specific attribute that has been added to the document agreement attributes template.",
        "operationId" : "resource_AgreementResource_getDocumentAttributeField_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AttributeTemplateBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Removes from the document agreement attributes template the attribute specified by the unique identifier.",
        "operationId" : "resource_AgreementResource_deleteDocumentAttributeTemplate_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/component/{id}/configurations" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/{id}/trust" : {
      "put" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Make a public certificate trusted by the community",
        "operationId" : "resource_TradingPartnersSecurityResource_trustCertificate_PUT",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The certificate ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "communityId",
          "in" : "query",
          "description" : "The community ID. <b>Required</b>.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "usage",
          "in" : "query",
          "description" : "Optional, available values: transport, trading. Default: transport.",
          "required" : false,
          "type" : "string",
          "default" : "transport"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/functionalGroups/{id}/sequenceNumbers" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the list of sequence numbers specific to a functional group agreement. Each of the sequence numbers\r\ncontains the counter for a specific generator. This applies only to EDIFACT and X12 outbound functional group\r\nagreements.",
        "operationId" : "resource_AgreementResource_getFunctionalGroupSequenceNumbers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the functional group agreement. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Updates the counter for a generator on the specified functional group agreement . This applies only to EDIFACT and\r\nX12 outbound functional group agreements. Example:\r\n<pre>\r\n {\r\n \"value\": 999999,\r\n \"identifier\": \"GS06\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyFunctionalGroupSequenceNumber_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the functional group agreement. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the counter in the specific format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SequenceNumberBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve all parties",
        "operationId" : "resource_TradingPartnerResource_getParties_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used to filter the results. Available fields: _id, partyName, countryCode. Example: partyName='AXWAY'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "",
          "required" : false,
          "type" : "string",
          "default" : "partyName"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Add a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primaryContact\":\r\n \t\t{\r\n \t\t\"primary\": true,\r\n \t\t\"name\": \"Interchange\",\r\n \t\t\"email\": \"Interchange@axway.com\",\r\n \t\t\"phone\": \"\",\r\n \t\t\"notes\": null,\r\n \t\t\"title\": null\r\n \t\t},\r\n \"enabled\": true,\r\n \"defaultRoutingId\":\r\n \t\t{\r\n \t\t\"type\": \"\",\r\n \t\t\"routingId\": \"Interchange\"\r\n \t\t},\r\n \"partyName\": \"Interchange\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_addParty_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A CommunityBean or a TradingPartnerBean.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_TradingPartnerBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Update the information for a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primaryContact\":\r\n \t\t{\r\n \t\t\"primary\": true,\r\n \t\t\"name\": \"Interchange\",\r\n \t\t\"email\": \"Interchange@axway.com\",\r\n \t\t\"phone\": \"\",\r\n \t\t\"notes\": null,\r\n \t\t\"title\": null\r\n \t\t},\r\n \"enabled\": true,\r\n \"defaultRoutingId\":\r\n \t\t{\r\n \t\t\"type\": \"\",\r\n \t\t\"routingId\": \"Interchange\"\r\n \t\t},\r\n \"partyName\": \"Interchange\",\r\n \"@id\": \"12345\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateParty_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_TradingPartnerBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/pickup/{id}/addressing" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET sender/receiver rules for consumed files by application pickup with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getAddressingRules_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Application pickup ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AddressingRulesBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update sender/receiver rules for files consumed by application pickup with given {id}. Example:\r\n<pre>\r\n {\r\n \"fromAddress\": {\r\n \"addressingAction\": \"USE_FIXED_PARTY\",\r\n \"parseEdi\": false,\r\n \"edifactUseInternal\": false,\r\n \"parseXml\": false,\r\n \"xpaths\": [],\r\n \"fixedPartyId\": \"123456\"\r\n },\r\n \"toAddress\": {\r\n \"addressingAction\": \"USE_METADATA_OR_PROTOCOL_ADDRESS\",\r\n \"parseEdi\": false,\r\n \"edifactUseInternal\": false,\r\n \"parseXml\": false,\r\n \"xpaths\": [],\r\n \"fixedPartyId\": null\r\n }\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updateAddressingRules_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Application pickup ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Information about sender/receiver rules. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AddressingRulesBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/sftpSubDirectory" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET subdirectories information for SFTP protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getSftpSubDirectories_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Add new subdirectory to SFTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"CommunitySFTP\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addSftpSubDirectory_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/pgp/public" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Retrieve all personal PGP certificates used by community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPublicPGPCertificates_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/sshkeys/{id}" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Retrieve SSH key (public information) with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getSshPublicKeyForPrivate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SSH key ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PublicKeyCredentialsBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Delete from the system SSH key with given {id}",
        "operationId" : "resource_CommunitySecurityResource_deleteSshPrivateKey_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SSH key ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/component/{id}/configurations" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_AgreementResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/public/{id}/export" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Export trusted certificate with specified {id} from the system",
        "operationId" : "resource_CommunitySecurityResource_exportPublicCertificate_GET",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Trusted certificate ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Certificate format. Optional, available values:\r\n<ul>\r\n<li><i>.cer</i> DER encoded binary X.509</li>\r\n<li><i>.p7b,.p7c</i> Cryptographic Message Syntax Standard PKCS #7</li>\r\n</ul>Default: p7b.",
          "required" : false,
          "type" : "string",
          "default" : "p7b"
        }, {
          "name" : "includeChain",
          "in" : "query",
          "description" : "In case of <i>.p7b, .p7c</i> choose to include the other certificates in the chain. Optional, available values:\r\ntrue, false. Default: true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/inlineProcessors" : {
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update a given custom processor. Example:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updateInlineProcessor_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/ftpUser/{id}" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve a FTP User account owned by a party",
        "operationId" : "resource_CommunityResource_getFtpUserBean_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the FTP User account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Remove a FTP User account owned by a party",
        "operationId" : "resource_CommunityResource_removeFtpUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the FTP User account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/messagingId/{id}" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve a single messaging ID given by {id}",
        "operationId" : "resource_CommunityResource_getMessagingId_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the messaging ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Remove a party messaging ID having the ID {id}",
        "operationId" : "resource_CommunityResource_removeMessagingId_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the messaging ID to be removed.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/component/configurations/arguments" : {
      "put" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_updateArgument_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/routingIds" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve all the routing IDs of given party",
        "operationId" : "resource_CommunityResource_getRoutingIds_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available fields: type, id. Example: id='X12AXWAY'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: type, id. Default: id.",
          "required" : false,
          "type" : "string",
          "default" : "id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Add a routing ID to a party.\r\nExample:\r\n<pre>\r\n {\r\n \"routingId\": \"ZZAXWAY\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addRoutingId_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The RoutingIdBean to be added . <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_RoutingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/{id}/export" : {
      "get" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Export a certificate",
        "operationId" : "resource_TradingPartnersSecurityResource_exportPublicCertificate_GET",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the certificate to export. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "The format in which the certificate will be exported. Optional, available values: p7b, cer. Default: p7b.",
          "required" : false,
          "type" : "string",
          "default" : "p7b"
        }, {
          "name" : "includeChain",
          "in" : "query",
          "description" : "This option includes all certificates in the chain of trust for the certificate. Optional, available values: true, false. Default: true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/{id}" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET application delivery with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getDeliveryExchangePoint_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Application delivery ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ProducerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "DELETE application delivery with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeDeliveryExchangePoint_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Application delivery ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile/outputs" : {
      "put" : {
        "tags" : [ "MetadataProfileResource" ],
        "description" : "Updates the configuration for a specific output. Depending on the service type the metadata profile can have\r\none or multiple outputs. Example:\r\n<pre>\r\n {\r\n \"@class\": \"MPDeliverToSender\",\r\n \"useOutboundAgreement\": \"true\",\r\n \"outboundAgreements\": [\r\n  {\r\n   \"id\": null,\r\n   \"senderId\": \"11111\",\r\n   \"receiverId\": \"22222\",\r\n   \"agreementId\": \"12345\",\r\n   \"overrideTransportReceiver\": false,\r\n   \"transportReceiverId\": null,\r\n   \"transportReceiverRoutingId\": null,\r\n   \"deliveryExchangeId\": \"1234567\"\r\n  }\r\n ],\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_MetadataProfileResource_modifyMetadataProfileOutput_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the output in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MetadataProfileOutputBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/trading/sponsor" : {
      "get" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getSponsor_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyTradingInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/communities/messagingId" : {
      "put" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Update a messaging ID.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"X12MessagingId\",\r\n \"primary\": true,\r\n \"enabled\": true,\r\n \"name\": \"X12 MID\",\r\n \"routingId\": \"ZZ:AXWAY:COM\",\r\n \"interchangeIdQualifier\": \"ZZ\",\r\n \"interchangeId\": \"AXWAY\",\r\n \"applicationId\": \"COM\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_modifyMessagingId_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MessagingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreement/{id}/attributes" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the list of attributes and their values for a document agreement specified by the unique identifier.",
        "operationId" : "resource_AgreementResource_getDocumentAgreementAttributes_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Updates the values of an attribute that is associated to a specific document agreement. To set a value the\r\nattribute must be defined in the document agreement attributes template. Each attribute can have one or more\r\nvalue defined.  If an attribute is required, a value must be provided. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"clearedAtRuntime\": false,\r\n \"values\": [\r\n \"value\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyDocumentAgreementAttribute_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the attribute in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AttributeValueBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/registered" : {
      "get" : {
        "tags" : [ "ComponentResource" ],
        "description" : "Returns the collection of resources that reside on the integration engine. A resource is used in a component to\r\nassociate a piece of message-processing code with a set of specific parameters and message formats.",
        "operationId" : "resource_ComponentResource_getRegisteredComponents_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/inlinePostProcessors/{id}" : {
      "delete" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "DELETE custom post processor with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeInlinePostProcessor_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom post processor ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/routingIds/{id}/default" : {
      "put" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Set the default Routing ID on a party.\r\nExample:\r\n<pre>\r\n {\r\n \"type\": \"XXT\",\r\n \"routingId\": \"ZZAXWAY\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_setDefaultRoutingId_PUT",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID Routing ID to be set as default on a party. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/contacts/{id}" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve a contact information",
        "operationId" : "resource_CommunityResource_getContact_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the contact.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ContactBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Remove a contact of the party",
        "operationId" : "resource_CommunityResource_deleteContact_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the contact to be removed.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/pgp/public/{id}/export" : {
      "get" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Export public PGPCertificate with specified {certificateId}.\r\nCertificate will be exported in .asc or .gpg format.",
        "operationId" : "resource_TradingPartnersSecurityResource_exportPublicPGPCertificate_GET",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Public certificate ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "isArmored",
          "in" : "query",
          "description" : "Tells us whether you want this certificate to be armoured or not. Optional. Default: false.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/{id}/schedules" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET list with schedulers for the exchange point with {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getSchedules_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Add a new scheduler for the exchange point with {id}. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addSchedule_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/services/postDetectionComponent/configurations/{id}/arguments" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getArguments_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve all parties",
        "operationId" : "resource_CommunityResource_getParties_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used to filter the results. Available fields: _id, partyName, countryCode. Example: partyName='AXWAY'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "",
          "required" : false,
          "type" : "string",
          "default" : "partyName"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Add a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primaryContact\":\r\n \t\t{\r\n \t\t\"primary\": true,\r\n \t\t\"name\": \"Interchange\",\r\n \t\t\"email\": \"Interchange@axway.com\",\r\n \t\t\"phone\": \"\",\r\n \t\t\"notes\": null,\r\n \t\t\"title\": null\r\n \t\t},\r\n \"enabled\": true,\r\n \"defaultRoutingId\":\r\n \t\t{\r\n \t\t\"type\": \"\",\r\n \t\t\"routingId\": \"Interchange\"\r\n \t\t},\r\n \"partyName\": \"Interchange\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addParty_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A CommunityBean or a TradingPartnerBean.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_CommunityBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Update the information for a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primaryContact\":\r\n \t\t{\r\n \t\t\"primary\": true,\r\n \t\t\"name\": \"Interchange\",\r\n \t\t\"email\": \"Interchange@axway.com\",\r\n \t\t\"phone\": \"\",\r\n \t\t\"notes\": null,\r\n \t\t\"title\": null\r\n \t\t},\r\n \"enabled\": true,\r\n \"defaultRoutingId\":\r\n \t\t{\r\n \t\t\"type\": \"\",\r\n \t\t\"routingId\": \"Interchange\"\r\n \t\t},\r\n \"partyName\": \"Interchange\",\r\n \"@id\": \"12345\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateParty_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_CommunityBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/contacts/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve a contact information",
        "operationId" : "resource_TradingPartnerResource_getContact_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the contact.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ContactBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Remove a contact of the party",
        "operationId" : "resource_TradingPartnerResource_deleteContact_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the contact to be removed.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/inlineProcessors/{id}" : {
      "delete" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "DELETE custom processor with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeInlineProcessor_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom processor ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/inlineProcessors" : {
      "put" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Update a given custom processor. Example:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_updateInlineProcessor_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/ftpUser" : {
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update information for a specific FTP user. Example:\r\n<pre>\r\n {\r\n \"userName\": \"Community\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [\r\n \"/path\"\r\n ],\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_modifyFtpUser_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/{id}/functionalGroups" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Updates the configuration of a specific functional group.",
        "operationId" : "resource_AgreementResource_getFunctionalGroups_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='X12FunctionalGroup'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Adds a functional group to an agreement specified by a unique identifier. When one or more transactions sets are\r\nreceived from a trading partner in an interchange, the transaction sets will be grouped in functional groups\r\nwithin the envelope. Transactions set that are grouped together are identified by the same functional group ID.\r\nThe agreements that support functional grouping are X12 and EDIFACT. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12InboundFunctionalGroup\",\r\n \"name\": \"Default\",\r\n \"functionalGroupId\": \"\",\r\n \"senderMessagingId\": \"12311\",\r\n \"receiverMessagingId\": \"12322\",\r\n \"responsibleAgencyCode\": null,\r\n \"identifierCode\": \"\",\r\n \"useFunctionalGroupId\": false,\r\n \"useSenderMessagingId\": true,\r\n \"useReceiverMessagingId\": true,\r\n \"useResponsibleAgencyCode\": false,\r\n \"useIdentifierCode\": false\"@id\": \"83001\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addFunctionalGroup_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the functional group in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FunctionalGroupBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FunctionalGroupBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/{certificateId}" : {
      "delete" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Remove a public certificate with the ID {id} from a trading partner.",
        "operationId" : "resource_TradingPartnersSecurityResource_deletePublicCertificate_DELETE",
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "The ID of the public certificate that will be removed from the trading partner. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The partner ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/ftpUser" : {
      "put" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Update a FTP User account owned by a party.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"axway\",\r\n \"password\": \"1234\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [],\r\n \"@id\": \"12345\"\r\n }\r\n\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateFtpUser_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/emailUsers" : {
      "put" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Updates an email user account.\r\nExample:\r\n<pre>\r\n {\r\n \"emailAddress\" : \"*@newhost.com\",\r\n \"enabled\" : true,\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateEmailUser_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_EmailUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/inlineProcessors" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET list with custom logic as an integral part of the processing pipeline for the exchange point with {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getInlineProcessors_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Add new custom processor as an integral part of the processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addInlineProcessor_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{id}/inlinePostProcessors" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET list with custom logic as an integral part of the post processing pipeline for the exchange point with {id}",
        "operationId" : "resource_CommunityExchangePointResource_getInlinePostProcessors_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Add new custom processor as an integral part of the post processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addInlinePostProcessor_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/messages/{id}/attributes" : {
      "get" : {
        "tags" : [ "MessagesResource" ],
        "description" : "Returns a collection of Attributes that are available for a specific Message.",
        "operationId" : "resource_MessagesResource_getMessageAttributes_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Id of the Message. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available values: _id, name, value. Example: value='true'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: _id, name, value. Default: _id.",
          "required" : false,
          "type" : "string",
          "default" : "_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "MessagesResource" ],
        "description" : "Add additional Attribute to the Message having the given Id.\r\nExample:\r\n<pre>\r\n {\r\n \"name\": \"MessageForwardedToIntegration\",\r\n \"value\": \"true\"\r\n }\r\n </pre>",
        "operationId" : "resource_MessagesResource_addMessageAttribute_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Id of the Message. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the additional Attributes to be added. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MessageAttributeBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/private" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Retrieve all personal certificates (public part) used by community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPrivateCertificates_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/deliverySettings" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve all application delivery settings of a community",
        "operationId" : "resource_CommunityResource_getIntegrationDeliveries_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the community.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Add an application delivery settings to a community.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"IntegrationDeliverySettings\",\r\n \"enabled\": true,\r\n \"applicationDeliveryId\": \"999999\",\r\n \"deliveryCriteria\":\r\n  {\r\n \"@class\": \"ConjunctorBean\",\r\n \"conjunctor\": \"AND\",\r\n \"children\":\r\n [\r\n {\r\n \"@class\": \"MetadataCondition\",\r\n \"metadataName\": \"DocumentType\",\r\n \"compareOperator\": \"EQUALS\",\r\n \"metadataValue\": \"ORDERS\"\r\n },\r\n {\r\n \"@class\": \"MetadataCondition\",\r\n \"metadataName\": \"UnpackagedBusinessProtocol\",\r\n \"compareOperator\": \"EQUALS\",\r\n \"metadataValue\": \"AS1\"\r\n }\r\n ]\r\n }\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addIntegrationDelivery_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the community.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The IntegrationDeliverySettingsBean bean to be added.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_IntegrationDeliverySettingsBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/agreements/documentAgreements/outputs/{id}" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the configuration for an output specified by a unique identifier.",
        "operationId" : "resource_AgreementResource_getDocumentAgreementOutput_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the output.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentAgreementOutputBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/pickup/{id}/addressing" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET information about sender/receiver rules for pickup with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getAddressingRules_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pickup protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AddressingRulesBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Update sender/receiver rules information for a pickup with given {id}. Example:\r\n<pre>\r\n {\r\n \"fromAddress\": {\r\n \"addressingAction\": \"USE_FIXED_PARTY\",\r\n \"parseEdi\": false,\r\n \"edifactUseInternal\": false,\r\n \"parseXml\": false,\r\n \"xpaths\": [],\r\n \"fixedPartyId\": \"123456\"\r\n },\r\n \"toAddress\": {\r\n \"addressingAction\": \"USE_METADATA_OR_PROTOCOL_ADDRESS\",\r\n \"parseEdi\": false,\r\n \"edifactUseInternal\": false,\r\n \"parseXml\": false,\r\n \"xpaths\": [],\r\n \"fixedPartyId\": null\r\n }\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updateAddressingRules_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pickup protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Addressing information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AddressingRulesBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/wsUsers" : {
      "put" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Updates an user account that can be used either with an AS4 or an WebServices exchange point.\r\nExample:\r\n<pre>\r\n {\r\n \"user\": \"axway\",\r\n \"password\": \"123\",\r\n \"enabled\": true,\r\n \"policy\": \"Default policy\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateWsUser_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_WSUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/sshUser" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET users information for SFTP protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getSshUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Add new user on SFTP protocol with given {id}. This operation decouples the old user from current protocol.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"CommunitySFTP\",\r\n \"password\": \"Axway123\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addSshUser_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/sshUser" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve SFTP User accounts owned by a party",
        "operationId" : "resource_TradingPartnerResource_getSshUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/delivery/{id}" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET Details of a delivery protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getDeliveryExchangePoint_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pickup delivery protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ProducerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/logout" : {
      "post" : {
        "tags" : [ "AuthenticationResource" ],
        "description" : "Logs out and invalidates the established session cookie from a successful login request.",
        "operationId" : "resource_AuthenticationResource_logout_POST",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Logout successful.",
            "schema" : {
              "$ref" : "#/definitions/json_Response"
            }
          },
          "401" : {
            "description" : "Error logging out."
          },
          "404" : {
            "description" : "Session information missing."
          }
        }
      }
    },
    "/communities/exchange/inlinePostProcessors" : {
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Update a given custom post processor. Example:\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updatePostInlineProcessor_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Custom post processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/contacts" : {
      "put" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Update a contact of a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primary\": true,\r\n \"name\": \"Contact\",\r\n \"email\": \"contact@axway.com\",\r\n \"phone\": \"123456789\",\r\n \"notes\": \"Notes\",\r\n \"title\": \"Title\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateContact_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/wsUsers/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Returns the user account with given ID.",
        "operationId" : "resource_TradingPartnerResource_getWsUserBean_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the user account.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_WSUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Deletes a user account that is no longer in use.",
        "operationId" : "resource_TradingPartnerResource_removeWsUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the user account.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/component/configurations/{id}" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_AgreementResource_ConfigurationResource_getConfiguration_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/private/{id}/export" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Export private certificate with specified {certificateId}.\r\nCertificate will be exported in Personal Information Exchange PKCS #12 (.p12,.pfx) format",
        "operationId" : "resource_CommunitySecurityResource_exportPrivateCertificate_GET",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Private certificate ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "Password for the store and certificate. Optional. Default: empty string.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/routingIds/{id}" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve a routing ID of the party",
        "operationId" : "resource_CommunityResource_getRoutingId_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the routing ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_RoutingIdBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Remove a routing ID from a party",
        "operationId" : "resource_CommunityResource_removeRoutingId_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the routing ID to be removed. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET operation for retrieving all application deliveries",
        "operationId" : "resource_ApplicationExchangePointResource_getDeliveryExchangePoints_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPDelivery'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Add a new application delivery. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FileSystemProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"Raw\",\r\n \"friendlyName\": \"FS delivery\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n \"holdMessagesForPickup\": false,\r\n \"directory\": \"C:/B2BiShare/common/data/in\",\r\n \"preserveFilenameMode\": \"SEQUENCE\",\r\n \"preserveFilename\": true,\r\n \"metadataHierarchy\": [],\r\n \"userDefinedDeliveryFilename\": \"\",\r\n \"userDefinedDuplicateFilename\": \"\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addDeliveryExchangePoint_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Application delivery information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update an application delivery. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FileSystemProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"Raw\",\r\n \"friendlyName\": \"FS delivery\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n \"holdMessagesForPickup\": false,\r\n \"directory\": \"C:/B2BiShare/common/data/in\",\r\n \"preserveFilenameMode\": \"SEQUENCE\",\r\n \"preserveFilename\": true,\r\n \"metadataHierarchy\": [],\r\n \"userDefinedDeliveryFilename\": \"\",\r\n \"userDefinedDuplicateFilename\": \"\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updateDeliveryExchangePoint_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Application delivery information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/sshUser" : {
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update information for a specific SSH user. Example:\r\n<pre>\r\n {\r\n \"userName\": \"CommunitySFTP\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ],\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_modifySshUser_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/inlinePostProcessors" : {
      "put" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Update a given custom post processor. Example:\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_updatePostInlineProcessor_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Custom post processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/ftpSubDirectory" : {
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Update FTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Community\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_modifyFtpSubDirectory_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{partyId}/trading/delivery" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET operation for retrieving all pickup delivery protocols from community with given {partyId}",
        "operationId" : "resource_CommunityExchangePointResource_getDeliveryExchangePoints_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "partyId",
          "in" : "path",
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPPickup'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/user" : {
      "get" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getWebtraderUserDetails_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.\r\nUpdates the logged in WT user's settings.",
        "operationId" : "resource_WebTraderResource_setWebTraderInfo_PUT",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_WebtraderUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/messages/{id}" : {
      "get" : {
        "tags" : [ "MessagesResource" ],
        "description" : "Returns a Message having the given Id.",
        "operationId" : "resource_MessagesResource_getMessage_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Id of the Message. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessageBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/delivery/{deliveryId}/default" : {
      "put" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Make a trading delivery with given {exchangePointId} the default delivery used for trading with a partner",
        "operationId" : "resource_TradingPartnerExchangePointResource_setDefaultExchangePoint_PUT",
        "parameters" : [ {
          "name" : "deliveryId",
          "in" : "path",
          "description" : "The ID of the trading delivery exchange point to be set as default.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Object has been modified successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/login" : {
      "post" : {
        "tags" : [ "AuthenticationResource" ],
        "description" : "Validates and sets the session cookie for a valid user's credentials.  The authentication\r\nheader is a Basic authentication value.\r\n<p>",
        "operationId" : "resource_AuthenticationResource_login_POST",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "The basic authentication header containing the user's credentials. <b>Required</b>.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Login successful.",
            "schema" : {
              "$ref" : "#/definitions/json_Response"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          }
        }
      }
    },
    "/messages/attributes" : {
      "put" : {
        "tags" : [ "MessagesResource" ],
        "description" : "Update the specified Attribute.\r\nExample:\r\n<pre>\r\n {\r\n \"name\": \"MessageForwardedToIntegration\",\r\n \"value\": \"true\",\r\n \"@id\": \"23456\"\r\n }\r\n </pre>",
        "operationId" : "resource_MessagesResource_modifyMessageAttribute_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the Attributes configuration. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MessageAttributeBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/emailUsers" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Returns all the email user accounts belonging to the party with given ID.",
        "operationId" : "resource_TradingPartnerResource_getEmailUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the part. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/ftpUser/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve a FTP User account owned by a party",
        "operationId" : "resource_TradingPartnerResource_getFtpUserBean_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the FTP User account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Remove a FTP User account owned by a party",
        "operationId" : "resource_TradingPartnerResource_removeFtpUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the FTP User account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/{id}" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns an agreement of given ID.",
        "operationId" : "resource_AgreementResource_getAgreement_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AgreementBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Deletes the agreement specified by the unique identifier. An agreement that is in use cannot be deleted.",
        "operationId" : "resource_AgreementResource_removeAgreement_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/schedules" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET list with schedulers for the exchange point with {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSchedules_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Add a new scheduler for the exchange point with {id}. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addSchedule_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/services/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns a Service of given ID.",
        "operationId" : "resource_DocumentServiceResource_getDocumentService_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the desired Service. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentServiceBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Delete a Service of given ID. To delete an existing service, you must first disassociate it from all agreements\r\nand other usages.",
        "operationId" : "resource_DocumentServiceResource_deleteDocumentService_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the  Service to be deleted. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/{id}/sequenceNumbers" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the list of sequence numbers specific to an agreement. Each of the sequence numbers contains the counter for a\r\nspecific generator.",
        "operationId" : "resource_AgreementResource_getAgreementSequenceNumbers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Updates the counter for a generator on the specified agreement. Depending on the configuration the agreement can\r\nhave zero or multiple sequence numbers that can be set. Example:\r\n<pre>\r\n {\r\n \"value\": 999999,\r\n \"identifier\": \"GS06\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyAgreementSequenceNumber_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the counter in the specific format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SequenceNumberBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/pgp/private/{certificateId}/defaults" : {
      "put" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Set given PGP certificate as default on community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_setPGPCertificateDefaults_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/as4Users" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Returns the user accounts associated with an AS4 exchange point with given id.",
        "operationId" : "resource_CommunityExchangePointResource_getAs4Users_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Creates a new user account that is attached to the exchange point with given id. You can add either an\r\naccount owned by the community or an account owned by a specific partner, that can be used to automatically\r\nidentify the partner as the sender. Example:\r\n<pre>\r\n {\r\n \"user\": \"userAS4\",\r\n \"password\": \"Axway123\",\r\n \"enabled\": true,\r\n \"policy\": \"Default policy\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addAs4User_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "partyId",
          "in" : "query",
          "description" : "The ID of the party owning the user. If empty, user will belong to the community. Optional. Default: empty.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_WSUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/{id}/inlinePostProcessors" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET list with custom logic as an integral part of the post processing pipeline for the exchange point with {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getInlinePostProcessors_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Add new custom processor as an integral part of the post processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addInlinePostProcessor_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/application/exchange/inlinePostProcessors/{id}" : {
      "delete" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "DELETE custom post processor with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeInlinePostProcessor_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom post processor ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/user/contact/primary" : {
      "put" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_setPrimaryContact_PUT",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "to update the primary contact details for the logged in webtrader user",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Set the contact information for the logged in webtrader user.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/communities/exchange/trading/pickup/{deliveryId}/default" : {
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Make the trading pickup with given {exchangePointId} the default pickup used for trading by the community with ID {partyId}",
        "operationId" : "resource_CommunityExchangePointResource_setDefaultExchangePoint_PUT",
        "parameters" : [ {
          "name" : "deliveryId",
          "in" : "path",
          "description" : "The ID of the trading pickup exchange point to be set as default. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/configurations/{id}/arguments" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_getArguments_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/user/password/requirements" : {
      "get" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getWebtraderUserPasswordRequirements_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "type" : "string",
              "description" : ""
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/application/exchange/sftpSubDirectory" : {
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update SFTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"CommunitySFTP\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_modifySftpSubDirectory_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/ftpUser/{id}" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET information about FTP user with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getFtpUser_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP user ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "DELETE FTP user with given {id} from integration",
        "operationId" : "resource_ApplicationExchangePointResource_removeFtpUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP user ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/{id}/sshUser" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET user information for SFTP protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getSshUser_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol Id.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Add new user on SFTP protocol with given {id}. This operation decouples the old user from current\r\nprotocol.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"CommunitySFTP\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addSshUser_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/{id}" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Retrieve personal certificate (public part) with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPrivateCertificate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Certificate ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_X509CertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/contacts" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve all contacts of a party",
        "operationId" : "resource_CommunityResource_getContacts_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used to filter results. Available fields: name, email, phone, title. Example: name='Axway Contact'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Add a contact to a party.\r\nExample:\r\n\r\n<pre>\r\n {\r\n \"primary\": true,\r\n \"name\": \"Contact\",\r\n \"email\": \"contact@axway.com\",\r\n \"phone\": \"123456789\",\r\n \"notes\": \"Notes\",\r\n \"title\": \"Title\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addContact_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ContactBean to be added.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/delivery/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET the delivery exchange protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getDeliveryExchangePoint_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ProducerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "DELETE operation for a delivery exchange protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeDeliveryExchangePoint_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Delivery exchange protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/attributes/templates/{id}" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns a specific attribute that has been added to the agreement attributes template.",
        "operationId" : "resource_AgreementResource_getAttributeField_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AttributeTemplateBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Removes from the agreement attributes template the attribute specified by the unique identifier.",
        "operationId" : "resource_AgreementResource_deleteAttributeTemplate_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/deliverySettings/{id}" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve an application delivery setting of a community",
        "operationId" : "resource_CommunityResource_getIntegrationDelivery_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the integration delivery setting.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_IntegrationDeliverySettingsBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Remove an application delivery setting having the ID {id}",
        "operationId" : "resource_CommunityResource_removeIntegrationDelivery_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the integration delivery setting to be removed. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/messagingId" : {
      "put" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Update a messaging ID.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"X12MessagingId\",\r\n \"primary\": true,\r\n \"enabled\": true,\r\n \"name\": \"X12 MID\",\r\n \"routingId\": \"ZZ:AXWAY:COM\",\r\n \"interchangeIdQualifier\": \"ZZ\",\r\n \"interchangeId\": \"AXWAY\",\r\n \"applicationId\": \"COM\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_modifyMessagingId_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MessagingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/pickup/{pickupId}" : {
      "delete" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Removes a trading or application exchange from a pickup group.",
        "operationId" : "resource_PickupGroupResource_removeExchangeFromPickupGroup_DELETE",
        "parameters" : [ {
          "name" : "pickupId",
          "in" : "path",
          "description" : "The ID of the exchange to be removed from the group. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/configurations/{id}/arguments" : {
      "get" : {
        "tags" : [ "ComponentResource" ],
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_ComponentResource_getArguments_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreements/outputs" : {
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Updates the configuration for a specific output. Depending on the service type the document agreement can have\r\none or multiple outputs. Example:\r\n<pre>\r\n {\r\n \"@class\": \"DeliverToPartnerOutput\",\r\n \"outputType\": \"USE_OUTBOUND_AGREEMENT\",\r\n \"useEnvelopingProfile\": false,\r\n \"outboundAgreements\": [],\r\n \"id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyDocumentAgreementOutput_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the output in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_DocumentAgreementOutputBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/contacts" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve all contacts of a party",
        "operationId" : "resource_TradingPartnerResource_getContacts_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used to filter results. Available fields: name, email, phone, title. Example: name='Axway Contact'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Add a contact to a party.\r\nExample:\r\n\r\n<pre>\r\n {\r\n \"primary\": true,\r\n \"name\": \"Contact\",\r\n \"email\": \"contact@axway.com\",\r\n \"phone\": \"123456789\",\r\n \"notes\": \"Notes\",\r\n \"title\": \"Title\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_addContact_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The ContactBean to be added.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/{partyId}/trading/delivery" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET operation for retrieving all delivery exchange protocols from partner with given {partyId}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getDeliveryExchangePoints_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "partyId",
          "in" : "path",
          "description" : "Partner ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPDelivery'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Create new delivery exchange protocol for partner with {partyId}. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FTPProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS3\",\r\n \"friendlyName\": \"FTP Partner Delivery\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n  \"holdMessagesForPickup\": false,\r\n  \"host\": \"somehost.com\",\r\n  \"port\": 21,\r\n \"pickupDirectory\": \"pickup\",\r\n  \"connectTimeoutSeconds\": 30,\r\n \"readTimeoutSeconds\": 30,\r\n \"passive\": true,\r\n \"transferType\": \"BINARY\",\r\n  \"commandSetConfigPath\": \"ftpcommandset.xml\",\r\n  \"attemptRestarts\": false,\r\n \"restartableMinKiloBytes\": 100,\r\n \"tempFileHoursToLive\": 4,\r\n \"deliveryFilenameMode\": \"PRESERVE_ORIGINAL\",\r\n  \"userDefinedDeliveryFilename\": \"\",\r\n \"duplicateFileNameMode\": \"AUTO_GENERATE\",\r\n  \"userDefinedDuplicateFilename\": \"\",\r\n  \"userCommands\": [],\r\n  \"fixOutputFilenames\": false,\r\n \"fileCollisionMode\": \"USE_TEMP_FILES_WITH_INBOX\",\r\n  \"inboxPath\": \"inbox\",\r\n  \"tempFileExtension\": \".tmp\",\r\n  \"metadataHierarchy\": [],\r\n  \"activePorts\": \"\",\r\n  \"usernamePasswordCredentials\": {\r\n  \"username\": \"axway\",\r\n  \"password\": \"axway\"\r\n  },\r\n  \"deleteAfterDownload\": true,\r\n  \"enableFiltering\": false,\r\n  \"filterPattern\": null,\r\n  \"applyNegativeFiltering\": false,\r\n  \"ssl\": false\r\n  }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addDeliveryExchangePoint_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "partyId",
          "in" : "path",
          "description" : "Partner ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Delivery exchange protocol information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/unassignedPickups" : {
      "get" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Returns all pickup exchanges (application and trading) that are not assigned to a pickup group.",
        "operationId" : "resource_PickupGroupResource_getAllUnassignedPickupExchanges_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "business",
          "in" : "query",
          "description" : "The business protocol of the pickup exchange. Optional, available values: AS1, AS2, AS3, AS4, CXML, Email, OFTP_1_3,\r\nOFTP_2_0, PeSIT, PGP, Raw, SecureFile. Default: all.",
          "required" : false,
          "type" : "string",
          "default" : "all"
        }, {
          "name" : "complete",
          "in" : "query",
          "description" : "Whether the pickup exchanges should be complete or not. Optional, available values: true, false, all. Default: all.",
          "required" : false,
          "type" : "string",
          "default" : "all"
        }, {
          "name" : "enabled",
          "in" : "query",
          "description" : "Whether the pickup exchanges should be enabled or not. Optional, available values: true, false, all. Default: all.",
          "required" : false,
          "type" : "string",
          "default" : "all"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "transport",
          "in" : "query",
          "description" : "The transport protocol of the pickup exchange. Optional, available values: File system, FTP, FTPS, HTTP, HTTPS,\r\nIntegration, JMS, MLLP, MLLP TLS, MQSeries, MQSeries SSL, OFTP, OFTP TLS, PeSIT, PeSIT TLS, Pluggable, Pluggable server, POP, POP3S, SFTP,\r\nSMTP, SMTPS, WebDAV, X.420, X.435. Default: all.",
          "required" : false,
          "type" : "string",
          "default" : "all"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/services/outputs/component/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getComponent_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/{id}/ftpSubDirectory" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET subdirectory information for FTP protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getFtpSubDirectoryByExchangePointId_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Add new subdirectory to FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Partner\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addFtpSubDirectory_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/wsUsers" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Returns all the Web Services user accounts belonging to the party with given id.",
        "operationId" : "resource_CommunityResource_getWsUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/ftpUser" : {
      "put" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Update a FTP User account owned by a party.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"axway\",\r\n \"password\": \"1234\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [],\r\n \"@id\": \"12345\"\r\n }\r\n\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateFtpUser_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/sshUser" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve SFTP User accounts owned by a party",
        "operationId" : "resource_CommunityResource_getSshUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/public/{certificateId}/untrust" : {
      "put" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Modify list of trusted certificates on community",
        "operationId" : "resource_CommunitySecurityResource_trustCertificate_PUT",
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "usage",
          "in" : "query",
          "description" : "Usages of this certificate. Optional, available values: transport, trading. Default: transport.",
          "required" : false,
          "type" : "string",
          "default" : "transport"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/as4Users/attach/{userId}" : {
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Add an existing user account to an AS4 exchange point with a given id.",
        "operationId" : "resource_CommunityExchangePointResource_modifyAs4User_POST",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully."
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/agreements/component/configurations/{id}/arguments" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_AgreementResource_ConfigurationResource_getArguments_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/component/configurations/{id}/arguments" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getArguments_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/deliverySettings" : {
      "put" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Update an application delivery setting.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"IntegrationDeliverySettings\",\r\n \"enabled\": true,\r\n \"applicationDeliveryId\": \"999999\",\r\n \"deliveryCriteria\":\r\n {\r\n \"@class\": \"ConjunctorBean\",\r\n \"conjunctor\": \"AND\",\r\n \"children\":\r\n [\r\n {\r\n \"@class\": \"MetadataCondition\",\r\n \"metadataName\": \"DocumentType\",\r\n \"compareOperator\": \"EQUALS\",\r\n \"metadataValue\": \"ORDERS\"\r\n },\r\n {\r\n \"@class\": \"MetadataCondition\",\r\n \"metadataName\": \"UnpackagedBusinessProtocol\",\r\n \"compareOperator\": \"EQUALS\",\r\n \"metadataValue\": \"AS1\"\r\n }\r\n ]\r\n },\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateIntegrationDelivery_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the updates.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_IntegrationDeliverySettingsBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/{id}/configurations" : {
      "get" : {
        "tags" : [ "ComponentResource" ],
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_ComponentResource_getConfigurationsForOwner_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/sshUser" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET user information for SFTP protocol with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSshUserByExchangePoint_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Add new user on SFTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"userName\": \"CommunitySFTP\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addSshUser_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/certificate/public/export" : {
      "get" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "Export trusted certificate from embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_exportPublicServerCertificate_GET",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Embedded server ID.<b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Certificate format. Optional, available values:\r\n<ul>\r\n<li><i>.cer</i> DER encoded binary X.509</li>\r\n<li><i>.p7b,.p7c</i> Cryptographic Message Syntax Standard PKCS #7</li>\r\n</ul> Default: p7b.",
          "required" : false,
          "type" : "string",
          "default" : "p7b"
        }, {
          "name" : "includeChain",
          "in" : "query",
          "description" : "In case of <i>.p7b, .p7c</i> choose to include the other certificates in the chain. Optional,\r\navailable values: true, false. Default: true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server" : {
      "get" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "List containing embedded server settings",
        "operationId" : "resource_EmbeddedServerResource_getServerSettings_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "Update a given embedded server. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FTPServerSettings\",\r\n \"name\": \"Trading FTP Server\",\r\n \"readTimeoutSeconds\": 30,\r\n \"bindAddresses\": [],\r\n \"forwardingEnabled\": false,\r\n \"forwardingPorts\": [],\r\n \"securityTerminationEnabled\": false,\r\n \"ipAddressCheckEnabled\": false,\r\n \"ipAddressPartnerMatchEnabled\": false,\r\n \"localPort\": 4022,\r\n \"remoteHost\": \"somehost.com\",\r\n \"remotePort\": 4022,\r\n \"maxConnections\": 500,\r\n \"passivePorts\": \"0\",\r\n \"implicitSsl\": false,\r\n \"onlyPassiveMode\": false,\r\n \"overrideCipherSuites\": false,\r\n \"cipherSuites\": [],\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_EmbeddedServerResource_updateServerSettings_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Embedded server settings.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ServerSettingsBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ServerSettingsBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/subscriptions" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve all the communities where this partner is subscribed",
        "operationId" : "resource_TradingPartnerResource_getSubscribedCommunities_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the partner.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Subscribe the partner to a community",
        "operationId" : "resource_TradingPartnerResource_subscribe_POST",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the partner to be subscribed. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "communityId",
          "in" : "query",
          "description" : "The ID of the community to which the partner will be subscribed. <b>Required</b>.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully."
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Unsubscribe a partner from a community",
        "operationId" : "resource_TradingPartnerResource_unsubscribe_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the partner to be unsubscribed. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "communityId",
          "in" : "query",
          "description" : "The ID of the community from which will be unsubscribed. <b>Required</b>.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Retrieve a public certificate from a trading partner",
        "operationId" : "resource_TradingPartnersSecurityResource_getPublicCertificate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the public certificate. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_X509CertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate" : {
      "get" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Retrieve all public certificates of the trading partner",
        "operationId" : "resource_TradingPartnersSecurityResource_getPublicCertificates_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the partner.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/sshUser" : {
      "put" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Update a SFTP User account owned by a party.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"axway\",\r\n \"password\": \"123\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ],\r\n \"@id\": \"12345\"\r\n }\r\n\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateSshUser_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/configurations/arguments" : {
      "put" : {
        "tags" : [ "ComponentResource" ],
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ComponentResource_updateArgument_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/ftpUser" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET user information for FTP protocol with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getFtpUsersByExchangePointId_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Add new user on FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"userName\": \"Community\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addFtpUser_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/pickup" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET operation for retrieving all application pickups",
        "operationId" : "resource_ApplicationExchangePointResource_gePickupExchangePoints_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPPickup'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Add a new application pickup. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FileSystemConsumer\",\r\n \"enabled\": true,\r\n \"friendlyName\": \"FS pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 10,\r\n \"metadataFixedItems\": {},\r\n \"restrictConsumableFileSize\": false,\r\n \"maxConsumableFileSize\": 0,\r\n \"metatadaTemplate\": {\r\n \"defaultMetadataTemplate\": \"\",\r\n \"enabledByProtocol\": false,\r\n \"metadataTemplatePolicy\": \"NEVER\",\r\n \"priorityOverFixedAttributes\": false\r\n },\r\n \"useCommunityMessageDelivery\": false,\r\n \"useContentProcessing\": false,\r\n \"ediSplitterEnabled\": false,\r\n \"usePreferredNodes\": false,\r\n \"preferredNodes\": [],\r\n \"pollingIntervalSeconds\": 60,\r\n \"maxMessagesPerPollingInterval\": 100,\r\n \"directory\": \"C:/InterchangeShare/common/data/out\",\r\n \"filterOption\": false,\r\n \"negativeFilterOption\": false,\r\n \"filterConditions\": null,\r\n \"metadataHierarchy\": []\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addPickupExchangePoint_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Application pickup information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConsumerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update an application pickup. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FileSystemConsumer\",\r\n \"enabled\": true,\r\n \"friendlyName\": \"FS pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 10,\r\n \"metadataFixedItems\": {},\r\n \"restrictConsumableFileSize\": false,\r\n \"maxConsumableFileSize\": 0,\r\n \"metatadaTemplate\": {\r\n \"defaultMetadataTemplate\": \"\",\r\n \"enabledByProtocol\": false,\r\n \"metadataTemplatePolicy\": \"NEVER\",\r\n \"priorityOverFixedAttributes\": false\r\n },\r\n \"useCommunityMessageDelivery\": false,\r\n \"useContentProcessing\": false,\r\n \"ediSplitterEnabled\": false,\r\n \"usePreferredNodes\": false,\r\n \"preferredNodes\": [],\r\n \"pollingIntervalSeconds\": 60,\r\n \"maxMessagesPerPollingInterval\": 100,\r\n \"directory\": \"C:/InterchangeShare/common/data/out\",\r\n \"filterOption\": false,\r\n \"negativeFilterOption\": false,\r\n \"filterConditions\": null,\r\n \"metadataHierarchy\": []\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updatePickupExchangePoint_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Application pickup information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConsumerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}" : {
      "get" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "GET embedded server settings with given {id}",
        "operationId" : "resource_EmbeddedServerResource_getServerSetting_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Server settings ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ServerSettingsBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/wsUsers" : {
      "put" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Updates an user account that can be used either with an AS4 or an WebServices exchange point.\r\nExample:\r\n<pre>\r\n {\r\n \"user\": \"axway\",\r\n \"password\": \"123\",\r\n \"enabled\": true,\r\n \"policy\": \"Default policy\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateWsUser_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_WSUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/ftpUser" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve FTP User accounts owned by a party",
        "operationId" : "resource_CommunityResource_getFtpUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/ftpSubDirectory" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET subdirectories information for FTP protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getFtpSubDirectories_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Add new subdirectory to FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Community\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addFtpSubDirectory_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/messages/attributes/{id}" : {
      "get" : {
        "tags" : [ "MessagesResource" ],
        "description" : "Returns an Attribute specified by a unique identifier.",
        "operationId" : "resource_MessagesResource_getMessageAttribute_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Id of the Attribute. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessageAttributeBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve a party having the ID {id}",
        "operationId" : "resource_TradingPartnerResource_getParty_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_TradingPartnerBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Remove a party having the ID {id}",
        "operationId" : "resource_TradingPartnerResource_deleteParty_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/schedules/{id}" : {
      "delete" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "DELETE scheduler with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_removeSchedule_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Scheduler ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/certificate/private/export" : {
      "get" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "Export private certificate from embedded server with given {id}.\r\nCertificate will be exported in Personal Information Exchange PKCS #12 (.p12,.pfx) format",
        "operationId" : "resource_EmbeddedServerResource_exportPrivateServerCertificate_GET",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Embedded server ID.<b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "Password for the store and certificate. Optional. Default: empty string.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/pgp/public" : {
      "get" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Retrieve all public PGP certificates used by partner with given {id}",
        "operationId" : "resource_TradingPartnersSecurityResource_getPublicPGPCertificates_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Partner ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/key/dsa" : {
      "get" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "GET DSA key from embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_getPublicDSAKey_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Embedded server ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "type" : "string",
              "description" : ""
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/schedules" : {
      "put" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Update a given scheduler. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_updateSchedule_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/functionalGroups" : {
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Updates the configuration of a specific functional group. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12InboundFunctionalGroup\",\r\n \"name\": \"Default\",\r\n \"functionalGroupId\": \"\",\r\n \"senderMessagingId\": \"12311\",\r\n \"receiverMessagingId\": \"12322\",\r\n \"responsibleAgencyCode\": null,\r\n \"identifierCode\": \"\",\r\n \"useFunctionalGroupId\": false,\r\n \"useSenderMessagingId\": true,\r\n \"useReceiverMessagingId\": true,\r\n \"useResponsibleAgencyCode\": false,\r\n \"useIdentifierCode\": false\"@id\": \"83001\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyFunctionalGroup_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the functional group in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FunctionalGroupBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FunctionalGroupBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/pgp/private/generate" : {
      "post" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Generate a personal PGP certificate for community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_generatePrivatePGPCertificate_POST",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "friendlyName",
          "in" : "query",
          "description" : "Certificate name/alias inside the system. Optional. Default: community name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyLength",
          "in" : "query",
          "description" : "Strength of the key. Optional, available values: 512, 1024, 2048, 3072, 4096. Default: 2048",
          "required" : false,
          "type" : "integer",
          "default" : 2048
        }, {
          "name" : "keyType",
          "in" : "query",
          "description" : "Algorithm used for signing and encrypting. Optional, available values: RSA, DSA. Default: RSA",
          "required" : false,
          "type" : "string",
          "default" : "RSA"
        }, {
          "name" : "validPeriod",
          "in" : "query",
          "description" : "Unit of time. Optional, available values: Years, Months, Days. Default: Years.",
          "required" : false,
          "type" : "string",
          "default" : "Years"
        }, {
          "name" : "validTime",
          "in" : "query",
          "description" : "Number of units given in <i>validPeriod</i> field. Optional, min = 1. Default: 2.",
          "required" : false,
          "type" : "integer",
          "default" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/pgp/public/{id}/export" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Export public PGP certificate with specified {pgpCertificateId}.\r\nCertificate will be exported in .asc or .gpg format.",
        "operationId" : "resource_CommunitySecurityResource_exportPublicPGPCertificate_GET",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Private certificate ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "isArmored",
          "in" : "query",
          "description" : "Tells us whether you want this certificate to be armoured or not. Optional. Default: false.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns a collection of Service objects that exist in the system. A Service is used to specify the processing\r\nsequence for handling the message exchanged between endpoints. There are two types of services: Partner Services\r\nwhich are used in the context of Agreements, and Metadata Services which are used in the context of Metadata\r\nProfiles.",
        "operationId" : "resource_DocumentServiceResource_getDocumentServices_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "documentFormat",
          "in" : "query",
          "description" : "Filter by document format. Optional, available values: EDIFACT, HL7v2, IDOC, INHOUSE, NACHA,\r\nTRADACOMS, VDA, X12, XML. Parameter has no default value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "documentType",
          "in" : "query",
          "description" : "Filter by document type. Optional, available values: existing document types based on version. Parameter has no default value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "documentVersion",
          "in" : "query",
          "description" : "Filter by document version. Optional, available values: existing document version based on format. Parameter has no default value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Optional, available fields: name. Example: name='Service'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Add a new Service in the system. Example:\r\n<pre>\r\n {\r\n \"@class\": \"PartnerDocumentService\",\r\n \"name\": \"X12 Partner Service\",\r\n \"deliveryMethod\": \"DELIVER_TO_PARTNER\",\r\n \"enabled\": true,\r\n \"componentId\": \"123456\",\r\n \"documentFormat\": \"X12\",\r\n \"documentVersion\": \"002000\",\r\n \"documentType\": \"810\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_addDocumentService_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the definition of the Service. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_DocumentServiceBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Update the specified Service object. Example:\r\n<pre>\r\n {\r\n \"@class\": \"PartnerDocumentService\",\r\n \"name\": \"X12 Partner Service\",\r\n \"enabled\": true,\r\n \"componentId\": \"12311\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_updateDocumentService_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the definition of the Service. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_DocumentServiceBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreements" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns a collection of document agreement objects that are available.",
        "operationId" : "resource_AgreementResource_getDocumentAgreements_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available values: name, type, version. Example: name='X12Document'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name, type, version. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Updates the configuration of a specific document agreement. Any updates on document type, version and name will be\r\nignored, since they cannot be modified once the document agreement has been created. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12DocumentAgreement\",\r\n \"enabled\": true,\r\n \"documentFormat\": \"X12\",\r\n \"documentName\": \"002000 810\",\r\n \"type\": \"810\",\r\n \"version\": \"002000\",\r\n \"documentServiceId\": \"12311\".\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyDocumentAgreement_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the document agreement in the requested format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_DocumentAgreementBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/emailUsers/{userId}" : {
      "delete" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Removes an user account form an SMTP exchange point with given id.",
        "operationId" : "resource_CommunityExchangePointResource_detachEmailUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/user/contact/alternate" : {
      "put" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_setAlternateContact_PUT",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "to update the alternate contact details for the logged in webtrader user",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Set the alternate contact information for the logged in webtrader user.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/communities/exchange/trading/sftpSubDirectory/{id}" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET subdirectory information that has given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getSftpSubDirectory_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Subdirectory ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "DELETE subdirectory with given {id} from SFTP protocol",
        "operationId" : "resource_CommunityExchangePointResource_removeSftpSubDirectory_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP subdirectory ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/public" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Retrieve all trusted certificates used by community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPublicCertificates_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "usage",
          "in" : "query",
          "description" : "Optional, available values:\r\n<ul>\r\n<li><i>transport</i> retrieves trusted certificates used at the transport level</li>\r\n<li><i>trading</i> retrieves trusted certificates used at the trading level</li>\r\n</ul> Default: transport.",
          "required" : false,
          "type" : "string",
          "default" : "transport"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{id}/schedules" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET list with schedulers for the exchange point with {id}",
        "operationId" : "resource_CommunityExchangePointResource_getSchedules_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Add a new scheduler for the exchange point with {id}. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addSchedule_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/{id}/sftpSubDirectory" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET subdirectory information for SFTP protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getSftpSubDirectoryByExchangePoint_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Add new subdirectory to SFTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"PartnerSFTP\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addSftpSubDirectory_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/trading" : {
      "get" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getOwnerInfo_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyTradingInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/pgp/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Retrieve public PGP certificate with given {id}",
        "operationId" : "resource_TradingPartnersSecurityResource_getPublicPGPCertificate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Certificate ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PGPCertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/{id}/configurations" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/delivery" : {
      "put" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Update a delivery exchange protocol.  Example:\r\n<pre>\r\n {\r\n \"@class\": \"FTPProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS3\",\r\n \"friendlyName\": \"FTP Partner Delivery\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n  \"holdMessagesForPickup\": false,\r\n  \"host\": \"somehost.com\",\r\n  \"port\": 21,\r\n \"pickupDirectory\": \"pickup\",\r\n  \"connectTimeoutSeconds\": 30,\r\n \"readTimeoutSeconds\": 30,\r\n \"passive\": true,\r\n \"transferType\": \"BINARY\",\r\n  \"commandSetConfigPath\": \"ftpcommandset.xml\",\r\n  \"attemptRestarts\": false,\r\n \"restartableMinKiloBytes\": 100,\r\n \"tempFileHoursToLive\": 4,\r\n \"deliveryFilenameMode\": \"PRESERVE_ORIGINAL\",\r\n  \"userDefinedDeliveryFilename\": \"\",\r\n \"duplicateFileNameMode\": \"AUTO_GENERATE\",\r\n  \"userDefinedDuplicateFilename\": \"\",\r\n  \"userCommands\": [],\r\n  \"fixOutputFilenames\": false,\r\n \"fileCollisionMode\": \"USE_TEMP_FILES_WITH_INBOX\",\r\n  \"inboxPath\": \"inbox\",\r\n  \"tempFileExtension\": \".tmp\",\r\n  \"metadataHierarchy\": [],\r\n  \"activePorts\": \"\",\r\n  \"usernamePasswordCredentials\": {\r\n  \"username\": \"axway\",\r\n  \"password\": \"axway\"\r\n  },\r\n  \"deleteAfterDownload\": true,\r\n  \"enableFiltering\": false,\r\n  \"filterPattern\": null,\r\n  \"applyNegativeFiltering\": false,\r\n  \"ssl\": false,\r\n  \"@id\": \"123456\"\r\n  }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_updateDeliveryExchangePoint_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Delivery exchange protocol update information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/messagingId" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve all the messaging IDs of the party.",
        "operationId" : "resource_TradingPartnerResource_getMessagingIds_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A filter used to filter the results. Optional, available fields: enabled, name. Example: name='X12MID'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "",
          "required" : false,
          "type" : "string",
          "default" : "name"
        }, {
          "name" : "standard",
          "in" : "query",
          "description" : "Filter by standard. Optional, available values: EDIFACT, HL7v2, IDOC, INHOUSE, NACHA,\r\nTRADACOMS, VDA, X12, XML. Default value is empty string.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Add a new messaging id to a party.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"X12MessagingId\",\r\n \"primary\": true,\r\n \"enabled\": true,\r\n \"name\": \"X12 MID\",\r\n \"routingId\": \"ZZ:AXWAY:COM\",\r\n \"interchangeIdQualifier\": \"ZZ\",\r\n \"interchangeId\": \"AXWAY\",\r\n \"applicationId\": \"COM\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_addMessagingId_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The MessagingIdBean bean to be added.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MessagingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/assignedGroup/{pickupId}" : {
      "get" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Returns the pickup group  that contains the pickup exchange with the given ID.",
        "operationId" : "resource_PickupGroupResource_getAssignedPickupGroup_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pickupId",
          "in" : "path",
          "description" : "The ID of the pickup exchange. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PickupGroupBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/global/external/smtp/server" : {
      "get" : {
        "tags" : [ "GlobalExternalSmtpServerResource" ],
        "description" : "Retrieve the global external SMTP/SMTPS server settings.",
        "operationId" : "resource_GlobalExternalSmtpServerResource_getServerDefinition_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ssl",
          "in" : "query",
          "description" : "",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SmtpServerDefinitionBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "GlobalExternalSmtpServerResource" ],
        "description" : "Configure the global external SMTP server settings. Example:\r\n<pre>\r\n {\r\n \"host\": \"somehost.com\",\r\n \"port\": \"5025\",\r\n \"friendlyName\": \"Global External SMTP\",\r\n \"usernamePasswordCredentials\": {\r\n \"username\": \"username\",\r\n \"password\": \"axway\"\r\n }\r\n }\r\n </pre>",
        "operationId" : "resource_GlobalExternalSmtpServerResource_addServerDefinition_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The global external SMTP server settings in the requested format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SmtpServerDefinitionBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "GlobalExternalSmtpServerResource" ],
        "description" : "Update the global external SMTP server settings. Example:\r\n<pre>\r\n {\r\n \"host\": \"somehost.com\",\r\n \"port\": \"5025\",\r\n \"friendlyName\": \"Global External SMTP\",\r\n \"usernamePasswordCredentials\": {\r\n \"username\": \"username\",\r\n \"password\": \"axway\"\r\n },\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_GlobalExternalSmtpServerResource_updateServerDefinition_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The global external SMTP server settings in the requested format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SmtpServerDefinitionBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/component/configurations/{id}/arguments" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getArguments_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/inlinePostProcessors" : {
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update a given custom post processor. Example:\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updatePostInlineProcessor_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Custom post processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/{id}/pickups" : {
      "get" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Returns the pickup exchanges assigned to the given group.",
        "operationId" : "resource_PickupGroupResource_getAssignedExchangesForPickupGroup_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the desired pickup group. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "business",
          "in" : "query",
          "description" : "The business protocol of the pickup exchange. Optional, available values: AS1, AS2, AS3, AS4, CXML, Email,\r\nOFTP_1_3, OFTP_2_0, PeSIT, PGP, Raw, SecureFile. Default: all.",
          "required" : false,
          "type" : "string",
          "default" : "all"
        }, {
          "name" : "complete",
          "in" : "query",
          "description" : "Whether the pickup exchanges should be complete or not. Optional, available values: true, false, all. Default: all.",
          "required" : false,
          "type" : "string",
          "default" : "all"
        }, {
          "name" : "enabled",
          "in" : "query",
          "description" : "Whether the pickup exchanges should be enabled or not. Optional, available values: true, false, all. Default: all.",
          "required" : false,
          "type" : "string",
          "default" : "all"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "transport",
          "in" : "query",
          "description" : "The transport protocol of the pickup exchange. Optional, available values: File system, FTP, FTPS, HTTP, HTTPS,\r\nIntegration, JMS, MLLP, MLLP TLS, MQSeries, MQSeries SSL, OFTP, OFTP TLS, PeSIT, PeSIT TLS, Pluggable,\r\nPluggable server, POP, POP3S, SFTP, SMTP, SMTPS, WebDAV, X.420, X.435. Default: all.",
          "required" : false,
          "type" : "string",
          "default" : "all"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/ftpSubDirectory" : {
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update FTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Community\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_modifyFtpSubDirectory_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/sshUser/{id}" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve a SFTP User account owned by a party",
        "operationId" : "resource_CommunityResource_getSshUser_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the SFTP User account.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Remove a SFTP User account owned by a party",
        "operationId" : "resource_CommunityResource_removeSshUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the SFTP User account.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile/{id}/outputs" : {
      "get" : {
        "tags" : [ "MetadataProfileResource" ],
        "description" : "Returns the list of outputs specific to a metadata profile. An output contains configuration parameters that\r\nspecify how the metadata profile and the corresponding metadata service will be used or enveloped.",
        "operationId" : "resource_MetadataProfileResource_getMetadataProfileOutputs_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the metadataProfile for which the outputs are retrieved.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/emailUsers" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Returns the user accounts associated with an email exchange point with given id.",
        "operationId" : "resource_CommunityExchangePointResource_getEmailUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.\r\n* @return Returns the user in the expected format.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Creates a new email user account that is attached to the exchange point with given id. You can add an account\r\nowned by a specific partner, that can be used to automatically identify the partner as the sender. Example:\r\n<pre>\r\n {\r\n \"emailAddress\": \"*@host.com\",\r\n \"enabled\": true\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addEmailUser_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "partyId",
          "in" : "query",
          "description" : "The ID of the partner for which this user account is created. <b>Required.</b>",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_EmailUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/postDetectionComponent/configurations/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfiguration_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/attributes/templates" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns the list of attributes assigned to the Service Attributes Template. An attribute can be used to provide\r\nadditional runtime processing context.",
        "operationId" : "resource_DocumentServiceResource_getAttributesTemplate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Add a new attribute field to the Service Attributes Template. For a single-selection or a multi-selection\r\ntemplate field, you can define a list of possible values. Make the attribute required if it is to be included\r\non all exchanges. You must then provide a value for processing for every Service record. If the Service attribute\r\ndoes not contain a particular mandatory value, the Service becomes incomplete. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"required\": false\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_addAttributeTemplate_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The attribute field to be added to the template.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Update a template field defined in the Service Attribute Template. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"required\": false,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_updateAttributeTemplate_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the attribute updates.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/webtrader/trading/partners/{routingId}" : {
      "get" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getTraderInfo_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "routingId",
          "in" : "path",
          "description" : "for which to get trading information details. The routing id value has to be in base64 format",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyTradingInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/schedules/{id}" : {
      "delete" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "DELETE scheduler with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeSchedule_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Scheduler ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/messages" : {
      "get" : {
        "tags" : [ "MessagesResource" ],
        "description" : "Returns a collection of the available Messages.",
        "operationId" : "resource_MessagesResource_getMessages_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available values: _id, coreId. Example: coreId='ci1476869359858.940@host_te'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: _id, coreId. Default: coreId.",
          "required" : false,
          "type" : "string",
          "default" : "coreId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "400" : {
            "description" : "The request could not be understood by the server due to malformed syntax. Validation errors; see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "MessagesResource" ],
        "description" : "Update the specified Message.\r\nExample:\r\n<pre>\r\n {\r\n \"senderPartyID\": \"45678\",\r\n \"receiverPartyID\": \"56789\",\r\n \"senderRoutingID\": \"23456\",\r\n \"receiverRoutingID\": \"34567\",\r\n \"documentClass\": \"XML\",\r\n \"contentMimeType\": \"application/xml\",\r\n \"ediControlID\": null,\r\n \"consumptionFilename\": \"edi3xml.xml\",\r\n \"productionFilename\": \"edi3xml-prod.xml\",\r\n \"direction\": \"Outbound\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_MessagesResource_updateMessage_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the definition of the Message. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MessageBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/attributes/templates/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns a specific attribute assigned to the Service Attributes Template.",
        "operationId" : "resource_DocumentServiceResource_getAttributeField_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the attribute assigned to the template.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AttributeTemplateBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Remove an attribute from the Service Attributes Template.",
        "operationId" : "resource_DocumentServiceResource_deleteAttributeTemplate_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/certificate" : {
      "get" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "Retrieve personal certificate (public part) for embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_getPrivateServerCertificate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Embedded server ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_X509CertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "DELETE certificate from embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_deletePrivateServerCertificate_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Embedded server ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/{id}/attributes" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the list with attributes and their values for an agreement with given ID. Attributes are metadata used\r\nby the integration engine and are structured in pairs. An attribute comprises a name and either an associated\r\nvalue or a list of values.",
        "operationId" : "resource_AgreementResource_getAgreementAttributes_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Updates the values of an attribute that is associated to a specific agreement. To set a value, the attribute must\r\nbe defined in the agreement attributes template. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"clearedAtRuntime\": true,\r\n \"values\": []\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyAgreementAttribute_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the attribute in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AttributeValueBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/users/security/certificate/private" : {
      "get" : {
        "tags" : [ "UserSecurityResource" ],
        "description" : "Retrieve a collection of personal certificates (public parts) from the currently authenticated user's certificate store",
        "operationId" : "resource_UserSecurityResource_getAllCertificates_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of rows to return, starting from the offset.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first n rows.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          }
        }
      }
    },
    "/services/postDetectionComponent/{id}/configurations" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/ftpUser" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve FTP User accounts owned by a party",
        "operationId" : "resource_TradingPartnerResource_getFtpUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/{certificateId}/defaults" : {
      "put" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Make a certificate default for encryption",
        "operationId" : "resource_TradingPartnersSecurityResource_setCertificateDefaults_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "The certificate ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The partner ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "defaultEncryption",
          "in" : "query",
          "description" : "If this should be default encryption certificate. Optional, available values: true, false, null. Default: null.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/pgp/{certificateId}" : {
      "delete" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Remove the PGP certificate with {certificateId} from partner with {id}",
        "operationId" : "resource_TradingPartnersSecurityResource_deletePGPPublicCertificate_DELETE",
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Partner ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/component/configurations/arguments" : {
      "put" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_updateArgument_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/sftpSubDirectory" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET subdirectory information for SFTP protocol with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSftpSubDirectoryByExchangePoint_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Add new subdirectory to SFTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"CommunitySFTP\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addSftpSubDirectory_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/sshUser/{id}" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET SSH user information with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSshUser_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SSH user ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "DELETE SSH user with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeSshUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SSH user ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/pgp/public/{certificateId}/defaults" : {
      "put" : {
        "tags" : [ "TradingPartnersSecurityResource" ],
        "description" : "Set given PGP certificate as default on partner with given {id}",
        "operationId" : "resource_TradingPartnersSecurityResource_setPGPCertificateDefault_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Partner ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/routingIds/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Retrieve a routing ID of the party",
        "operationId" : "resource_TradingPartnerResource_getRoutingId_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the routing ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_RoutingIdBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Remove a routing ID from a party",
        "operationId" : "resource_TradingPartnerResource_removeRoutingId_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the routing ID to be removed. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/schedules" : {
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Update a given scheduler. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updateSchedule_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/trading/partners" : {
      "get" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getTradingPartner_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "max partner trading info to return in the response",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "from which to return the results from",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "partyName",
          "in" : "query",
          "description" : "to filter the results by. It supports wildcard searches",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/components/{id}" : {
      "get" : {
        "tags" : [ "ComponentResource" ],
        "description" : "Retrieves the details of a component with given id.",
        "operationId" : "resource_ComponentResource_getComponent_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the component. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "ComponentResource" ],
        "description" : "Deletes a component with given ID.  A component that is in use cannot be deleted. For this operation to be\r\nsuccessful you need to remove all usages.",
        "operationId" : "resource_ComponentResource_delete_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the component. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve a party having the ID {id}",
        "operationId" : "resource_CommunityResource_getParty_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CommunityBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Remove a party having the ID {id}",
        "operationId" : "resource_CommunityResource_deleteParty_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/routingIds/{id}/default" : {
      "put" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Set the default Routing ID on a party.\r\nExample:\r\n<pre>\r\n {\r\n \"type\": \"XXT\",\r\n \"routingId\": \"ZZAXWAY\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_setDefaultRoutingId_PUT",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID Routing ID to be set as default on a party. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns a Service output of given ID. A Service can have multiple outputs and each output has its own configuration.",
        "operationId" : "resource_DocumentServiceResource_getDocumentServiceOutput_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Service output.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentServiceOutputBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/sshkeys" : {
      "get" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Retrieve a list of all SSH keys (public information) used by community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getSshPublicKeys_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/private/generate" : {
      "post" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Generate a personal certificate for community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_generatePrivateCertificate_POST",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "defaultEncryption",
          "in" : "query",
          "description" : "Use the certificate as default for encryption by the community with given {id}. Optional, available values: true, false. Default: true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "defaultSigning",
          "in" : "query",
          "description" : "Use the certificate as default for signing by the community with given {id}. Optional, available values: true, false. Default: true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "defaultSsl",
          "in" : "query",
          "description" : "Use the certificate as default for ssl authentication by the community with given {id}. Optional, available values: true, false. Default: false.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "digitalSignature",
          "in" : "query",
          "description" : "Generated certificate can be used for digitalSignature. Optional, available values: true, false. Default: true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "dualKey",
          "in" : "query",
          "description" : "If true, generate two certificates one for signature and one for encryption. Optional, available values: true, false. Default: false.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "friendlyName",
          "in" : "query",
          "description" : "Certificate name/alias inside the system. Optional. Default: community name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyEncryption",
          "in" : "query",
          "description" : "Generated certificate can be used for keyEncryption. Optional, available values: true, false. Default: true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "keyLength",
          "in" : "query",
          "description" : "Strength of the key. Optional, available values: 512, 1024, 2048, 3072, 4096. Default: 2048",
          "required" : false,
          "type" : "integer",
          "default" : 2048
        }, {
          "name" : "nonRepudiation",
          "in" : "query",
          "description" : "Generated certificate can be used for nonRepudiation. Optional, available values: true, false. Default: true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "sendToPartners",
          "in" : "query",
          "description" : "True to use this certificate also by partners. Optional, available values: true, false. Default: true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "validPeriod",
          "in" : "query",
          "description" : "Unit of time. Optional, available values: Years, Months, Days. Default: Years.",
          "required" : false,
          "type" : "string",
          "default" : "Years"
        }, {
          "name" : "validTime",
          "in" : "query",
          "description" : "Number of units given in <i>validPeriod</i> field. Optional, min = 1. Default: 2.",
          "required" : false,
          "type" : "integer",
          "default" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/as4Users/{userId}" : {
      "delete" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Removes an user account form an AS4 exchange point with given id.",
        "operationId" : "resource_CommunityExchangePointResource_removeAS4User_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/pickup/{id}" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET application pickup with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getPickupExchangePoint_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Application pickup ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "DELETE application pickup with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removePickupExchangePoint_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Application pickup ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/pickup/{id}" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET The pickup protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getPickupExchangePoint_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Protocol ID.<b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "DELETE Pickup protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_removePickupExchangePoint_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Pickup protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/inlineProcessors" : {
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Update a given custom processor. Example:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updateInlineProcessor_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/delivery" : {
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Update a delivery protocol. Example:\r\n<pre>\r\n {\r\n \"@class\": \"SMTPProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS1\",\r\n \"friendlyName\": \"POP-SMTP Trading Pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n \"holdMessagesForPickup\": false,\r\n \"port\": 25,\r\n \"emailAddress\": \"axwyay@axway.com\",\r\n \"connectTimeoutSeconds\": 30,\r\n \"readTimeoutSeconds\": 30,\r\n \"useGlobalSmtp\": false,\r\n  \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updateTradingDeliveryExchangePoint_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Delivery update information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ProducerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/sshkeys/{id}/defaults" : {
      "put" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Set SSH key as default on the owning community",
        "operationId" : "resource_CommunitySecurityResource_setSshKeyDefault_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SSH key ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "defaultKey",
          "in" : "query",
          "description" : "Set/unset SSH key as default. Optional, available values: true, false. Default: false.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/system/crls/expired" : {
      "delete" : {
        "tags" : [ "CrlPurgeResource" ],
        "description" : "Starts CRL purge (removal) process.",
        "operationId" : "resource_CrlPurgeResource_purge_DELETE",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Success",
            "schema" : {
              "type" : "string",
              "description" : ""
            }
          }
        }
      }
    },
    "/communities/exchange/{partyId}/trading/pickup" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET operation for retrieving all pickup protocols from community with given {partyId}",
        "operationId" : "resource_CommunityExchangePointResource_getPickupExchangePoints_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "partyId",
          "in" : "path",
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPPickup'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Create new pickup protocol for community with {partyId}. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FTPServer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS3\",\r\n \"friendlyName\": \"FTP Trading Pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"metadataFixedItems\": {\r\n \"BusinessProtocol\": \"AS3\"\r\n },\r\n \"restrictConsumableFileSize\": false,\r\n \"maxConsumableFileSize\": 0,\r\n \"metatadaTemplate\": {\r\n \"defaultMetadataTemplate\": \"\",\r\n \"enabledByProtocol\": false,\r\n \"metadataTemplatePolicy\": \"NEVER\",\r\n \"priorityOverFixedAttributes\": false\r\n },\r\n \"useCommunityMessageDelivery\": false,\r\n \"useContentProcessing\": false,\r\n \"ediSplitterEnabled\": true,\r\n \"pickupGroupStatus\": null,\r\n \"pickupGroup\": null,\r\n \"remoteUrl\": \"ftp://Community@somehost.com:4022/path\",\r\n localPort\": 4022,\r\n \"defaultUser\": {\r\n \"userName\": \"Axway123\",\r\n \"password\": \"12345\",\r\n \"ftpSubDirectories\": [\"/pathaxway\"]\r\n },\r\n sequenced\": false,\r\n \"sequenceTimeoutSeconds\": 60,\r\n \"modifyFtpServerDirectory\": true\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addPickupExchangePoint_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "partyId",
          "in" : "path",
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Pickup protocol information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConsumerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/{id}" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_getComponent_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/{id}/components" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns a collection of additional Processing Steps associated to a Service output with given ID.",
        "operationId" : "resource_DocumentServiceResource_getOutputComponents_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Service output.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Add an additional Processing Step to a Service output with given ID. The additional Processing Step type may\r\ndiffer based on the Service type. Example:\r\n<pre>\r\n {\r\n \"type\": \"Document\",\r\n \"stepId\": \"12311\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_addOutputProcessingStep_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Service output  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the additional Processing Step to be added.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_DocumentServiceOutputComponentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/attributes/templates" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the attributes that have been added to the agreement attributes template. This template is applied to\r\nall agreements available in the system.",
        "operationId" : "resource_AgreementResource_getAttributesTemplate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Adds a new attribute to the agreement attributes template. For a single-selection or a multi-selection attribute,\r\nyou can define a list of possible values. Make the attribute required if it is to be included on all exchanges.\r\nExample:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"required\": false,\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addAttributeTemplate_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the attribute to be added to the agreement attributes template.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Configures an attribute that has been added to the agreement attributes template. An attribute marked as required\r\nmakes the agreement incomplete if no value is provided. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"required\": false,\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_updateAttributeTemplate_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the attributes in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreement/attributes/templates" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the attributes that have been added to the document agreement attributes template. This template is\r\nassociated with all document agreements available in the system.",
        "operationId" : "resource_AgreementResource_getDocumentAttributesTemplate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Adds a new attribute to the document agreement attributes template. For a single-selection or a multi-selection\r\nattribute, you can define a list of possible values. Make the attribute required if it is to be included on all\r\nexchanges. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"required\": false,\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addDocumentAttributeTemplate_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the attribute to be added to the document agreement attributes template.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Configures an attribute that has been added to the document agreement attributes template. An attribute marked\r\nas required makes the document agreement incomplete if no value is provided. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"required\": false,\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_updateDocumentAttributeTemplate_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the attributes in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/pgp/{certificateId}" : {
      "delete" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Remove the PGP certificate with {pgpCertificateId} from community with {id}",
        "operationId" : "resource_CommunitySecurityResource_deletePGPPublicCertificate_DELETE",
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/configurations/{id}" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_getConfiguration_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/{id}/pickup/{pickupId}" : {
      "post" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Assigns a trading or application exchange pickup to a pickup group.",
        "operationId" : "resource_PickupGroupResource_addExchangeToPickupGroup_POST",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the pickup group. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pickupId",
          "in" : "path",
          "description" : "The ID of pickup exchange to be added to the group. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully."
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/component/configurations/arguments" : {
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_ConfigurationResource_updateArgument_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/component/{id}" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_AgreementResource_ConfigurationResource_getComponent_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/{certificateId}" : {
      "delete" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Remove the certificate with {certificateId} from community with {id}",
        "operationId" : "resource_CommunitySecurityResource_deletePublicCertificate_DELETE",
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "Certificate id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/key/rsa" : {
      "get" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "GET RSA key from embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_getPublicRSAKey_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Embedded server Id.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "type" : "string",
              "description" : ""
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups" : {
      "get" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Returns a collection of pickup group objects that exist in the system.",
        "operationId" : "resource_PickupGroupResource_getPickupGroups_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Available fields: friendlyName. Example: friendlyName='PickupGroup'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of the pickup group. Optional, available values: Allow, Block, all. Default: all.",
          "required" : false,
          "type" : "string",
          "default" : "all"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Creates a new pickup group. Example:\r\n<pre>\r\n {\r\n \"friendlyName\": \"Pickup Group\",\r\n \"status\": \"Allow\"\r\n }\r\n </pre>",
        "operationId" : "resource_PickupGroupResource_addPickupGroup_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Provide a pickup group object. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_PickupGroupBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Updates the information of an existing pickup group. Example:\r\n<pre>\r\n {\r\n \"friendlyName\": \"Pickup Group\",\r\n \"status\": \"Allow\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_PickupGroupResource_updatePickupGroup_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Pass the bean containing the pickup group. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_PickupGroupBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/{id}" : {
      "get" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Returns the pickup group with the given ID.",
        "operationId" : "resource_PickupGroupResource_getPickupGroup_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the desired pickup group. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PickupGroupBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "PickupGroupResource" ],
        "description" : "Removes a pickup group from the system.",
        "operationId" : "resource_PickupGroupResource_removePickupGroup_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the pickup group to be deleted. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/private/{certificateId}/defaults" : {
      "put" : {
        "tags" : [ "CommunitySecurityResource" ],
        "description" : "Set given certificate as default on community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_setCertificateDefaults_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "certificateId",
          "in" : "path",
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "defaultEncryption",
          "in" : "query",
          "description" : "Use the certificate as default for encryption by the community with given {id}. Optional, available values: true, false, null. Default: null.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "defaultSigning",
          "in" : "query",
          "description" : "Use the certificate as default for signing by the community with given {id}. Optional, available values: true, false, null. Default: null.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "defaultSsl",
          "in" : "query",
          "description" : "Use the certificate as default for ssl authentication by the community with given {id}. Optional, available values: true, false, null. Default: null.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/messagingId" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Retrieve all the messaging IDs of the party.",
        "operationId" : "resource_CommunityResource_getMessagingIds_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A filter used to filter the results. Optional, available fields: enabled, name. Example: name='X12MID'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "",
          "required" : false,
          "type" : "string",
          "default" : "name"
        }, {
          "name" : "standard",
          "in" : "query",
          "description" : "Filter by standard. Optional, available values: EDIFACT, HL7v2, IDOC, INHOUSE, NACHA,\r\nTRADACOMS, VDA, X12, XML. Default value is empty string.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Add a new messaging id to a party.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"X12MessagingId\",\r\n \"primary\": true,\r\n \"enabled\": true,\r\n \"name\": \"X12 MID\",\r\n \"routingId\": \"ZZ:AXWAY:COM\",\r\n \"interchangeIdQualifier\": \"ZZ\",\r\n \"interchangeId\": \"AXWAY\",\r\n \"applicationId\": \"COM\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addMessagingId_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The MessagingIdBean bean to be added.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MessagingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/schedules/{id}" : {
      "delete" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "DELETE scheduler with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeSchedule_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Scheduler ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile/outputs/{id}" : {
      "get" : {
        "tags" : [ "MetadataProfileResource" ],
        "description" : "Returns a Metadata Profile Output with the specified ID.",
        "operationId" : "resource_MetadataProfileResource_getMetadataProfileOutput_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the desired metadata profile. <b>Required</b>",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MetadataProfileOutputBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/certificate/generate" : {
      "post" : {
        "tags" : [ "EmbeddedServerResource" ],
        "description" : "Generate a personal certificate for embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_generateServerCertificate_POST",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Embedded server settings ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "friendlyName",
          "in" : "query",
          "description" : "Certificate name/alias inside the system. Optional. Default is long machine name as configured.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyLength",
          "in" : "query",
          "description" : "Strength of the key. Optional, available values: 512, 1024, 2048, 3072, 4096. Default: 2048.",
          "required" : false,
          "type" : "integer",
          "default" : 2048
        }, {
          "name" : "validPeriod",
          "in" : "query",
          "description" : "Unit of time. Optional, available values: Years, Months, Days. Default: Years.",
          "required" : false,
          "type" : "string",
          "default" : "Years"
        }, {
          "name" : "validTime",
          "in" : "query",
          "description" : "Number of units given in <i>validPeriod</i> field. Optional, min = 0. Default: 2.",
          "required" : false,
          "type" : "integer",
          "default" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/emailUsers/attach/{userId}" : {
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Add an existing user account to an SMTP exchange point with a given id.",
        "operationId" : "resource_CommunityExchangePointResource_attachEmailUser_POST",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been attached successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error attaching object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/configurations/{id}" : {
      "get" : {
        "tags" : [ "ComponentResource" ],
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_ComponentResource_getConfiguration_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/component/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getComponent_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs" : {
      "put" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Configure a specific Service output. A Service can have multiple outputs and each output has its own configuration. Example:\r\n<pre>\r\n {\r\n \"name\": \"Output\",\r\n \"deliveryMethod\": \"DELIVER_TO_APPLICATION\",\r\n \"exchangePointId\": \"12311\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_updateDocumentServiceOutput_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the Service output configuration.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_DocumentServiceOutputBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/ftpSubDirectory/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET FTP subdirectory information that has given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getFtpSubDirectory_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Subdirectory ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "DELETE subdirectory with given {id} from FTP protocol",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeFtpSubDirectory_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP subdirectory ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/inlineProcessors/{id}" : {
      "delete" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "DELETE custom processor with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeInlineProcessor_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom processor ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/component/configurations/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfiguration_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/users/security/certificate/{id}" : {
      "get" : {
        "tags" : [ "UserSecurityResource" ],
        "description" : "<p>\r\nRetrieve personal certificate (public part) with given {id} from the currently authenticated user's certificate store\r\n</p>\r\n<p>\r\nError codes related to this resource:\r\n<ul>\r\n<li><b>1000</b> - A required field is missing or blank.</li>\r\n<li><b>1100</b> - Certificate with the provided ID not found.</li>\r\n</ul>\r\n</p>",
        "operationId" : "resource_UserSecurityResource_getCertificate_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the certificate.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/json_X509CertificateInfoBean"
            }
          }
        }
      }
    },
    "/webtrader/user/password" : {
      "put" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_setPassword_PUT",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "to update for the current logged in webtrader user.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_UserPasswordChangeBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Set logged in webtrader user password."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "406" : {
            "description" : "Password change was not successfully executed."
          }
        }
      }
    },
    "/communities/exchange/trading/sftpSubDirectory" : {
      "put" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Update SFTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"CommunitySFTP\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_modifySftpSubDirectory_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components" : {
      "get" : {
        "tags" : [ "ComponentResource" ],
        "description" : "Returns a collection of component objects that exists in the system.  Components are used in B2Bi to provide\r\nspecific types of processing to a message handling flow. A component associates a resource (piece of\r\nmessage-processing code) residing on the integration engine with a set of specific parameters and message\r\nformats. The processing can then be used in one or more service objects to specify how a particular message type\r\nis handled between two or more exchange points.",
        "operationId" : "resource_ComponentResource_getComponents_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Optional, available fields: name. Example: name='CopyMessage'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "ComponentResource" ],
        "description" : "Creates a new component object. To create a component, you need to specify a resource that resides on the\r\nintegration engine. The resource name and type can be identified by accessing a different API resource.\r\nExample:\r\n<pre>\r\n {\r\n \"resourceName\": \"B2BX Application/B2Bi Copy Message\",\r\n \"resourceAbsFilePath\": \"%CORE_SOLUTIONS%\\\\b2bx\\\\component\\\\procmbc_be_copymessage.x4\",\r\n \"resourceType\": \"1\",\r\n \"processingStepEnabled\": true,\r\n \"processingStepName\": \"B2BX Application/B2Bi Copy Message\",\r\n \"processingStepType\": \"Map\",\r\n \"processingStepAddOutput\": false\r\n }\r\n </pre>",
        "operationId" : "resource_ComponentResource_addComponent_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the component definition in the requested format. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ComponentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "ComponentResource" ],
        "description" : "Updates the component definition by setting a different name or a different resource type. Some parameters, like\r\nthe component type, cannot be changed. Depending on the component type, the configuration might contain\r\nparameters that are used to specify the characteristics of the component. Those parameters can be configured by\r\naccessing a different resource.\r\n* Example:\r\n<pre>\r\n {\r\n \"resourceName\": \"B2BX Application/B2Bi Copy Message\",\r\n \"resourceAbsFilePath\": \"%CORE_SOLUTIONS%\\\\b2bx\\\\component\\\\procmbc_be_copymessage.x4\",\r\n \"resourceType\": \"1\",\r\n \"processingStepEnabled\": true,\r\n \"processingStepName\": \"B2BX Application/B2Bi Copy Message\",\r\n \"processingStepType\": \"Map\",\r\n \"processingStepAddOutput\": false,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ComponentResource_updateComponent_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the component definition. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ComponentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/passwordChange" : {
      "post" : {
        "tags" : [ "AuthenticationResource" ],
        "description" : "Validates and sets the session cookie for a valid user's credentials.  The authentication\r\nheader is a Basic authentication value.\r\n<p>",
        "operationId" : "resource_AuthenticationResource_changePassword_POST",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "The basic authentication header containing the user's credentials. <b>Required</b>.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The new password in case we want to trigger a login with also changing the password. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_PasswordChangeBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Password changed and logged in successful.",
            "schema" : {
              "$ref" : "#/definitions/json_Response"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "406" : {
            "description" : "Password change was not successfully executed."
          }
        }
      }
    },
    "/webtrader/user/preferences" : {
      "put" : {
        "tags" : [ "WebTraderResource" ],
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_setPreferences_PUT",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "ui preferences to update for the logged in webtrader user",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Set logged in webtrader user preferences.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/communities/contacts" : {
      "put" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Update a contact of a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primary\": true,\r\n \"name\": \"Contact\",\r\n \"email\": \"contact@axway.com\",\r\n \"phone\": \"123456789\",\r\n \"notes\": \"Notes\",\r\n \"title\": \"Title\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateContact_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/functionalGroups/{id}" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns a functional group specified by an identifier.",
        "operationId" : "resource_AgreementResource_getFunctionalGroup_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the functional group.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FunctionalGroupBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Removes a functional group with given ID. The default functional group of an X12 outbound agreement cannot be\r\ndeleted.",
        "operationId" : "resource_AgreementResource_removeFunctionalGroup_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the functional group.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{id}/inlineProcessors" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET list with custom logic as an integral part of the processing pipeline for the exchange point with {id}",
        "operationId" : "resource_CommunityExchangePointResource_getInlineProcessors_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Add new custom processor as an integral part of the processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addInlineProcessor_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/ftpUser" : {
      "get" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "GET users information for FTP protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getFtpUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "CommunityExchangePointResource" ],
        "description" : "Add new user on FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"userName\": \"Community\",\r\n \"password\": \"Axway123\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addFtpUser_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile" : {
      "get" : {
        "tags" : [ "MetadataProfileResource" ],
        "description" : "Returns a collection of Metadata Profile objects that exist in the system. A metadataprofile profile is a B2Bi object\r\nthat you use to trigger processing that is based on the attributes (metatdata) of messages",
        "operationId" : "resource_MetadataProfileResource_getMetadataProfiles_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Optional, available fields: name. Example: name='ProfileName'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "MetadataProfileResource" ],
        "description" : "Add a new Metadata Profile in the system. Example:\r\n<pre>\r\n {\r\n \"name\": \"Test Metadata Service\",\r\n \"enabled\": true,\r\n \"serviceId\": \"12311\",\r\n \"metadataRules\": [\r\n   {\r\n    \"metadata\": \"Trading Engine: ReceiverPartyName\",\r\n    \"condition\": \"EQUALS\",\r\n    \"value\": \"test\"\r\n   }\r\n  ]\r\n }\r\n </pre>",
        "operationId" : "resource_MetadataProfileResource_addMetadataProfile_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the definition of the Metadata Profile. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MetadataProfileBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "MetadataProfileResource" ],
        "description" : "Update the specified Metadata Profile object. Example:\r\n<pre>\r\n {\r\n \"name\": \"Test Metadata Service\",\r\n \"enabled\": true,\r\n \"serviceId\": \"12311\",\r\n \"@id\": \"152001\"\r\n\t}\r\n </pre>",
        "operationId" : "resource_MetadataProfileResource_modifyMetadataProfile_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the definition of the Metadata Profile. <b>Required</b>",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_MetadataProfileBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/postDetectionComponent/{id}" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getComponent_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/component/{id}/configurations" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns a collection of agreements that are available in the system. An agreement is a B2Bi object used to\r\nspecify how B2Bi processes the information that is exchanged between two or more partners. Each agreement is\r\nbased on a standards-based type of processing for X12, EDIFACT, etc. B2Bi uses agreements at runtime to match\r\nthe messages it handles to partners and processing.",
        "operationId" : "resource_AgreementResource_getAgreements_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agreementFormat",
          "in" : "query",
          "description" : "Filter by agreement format. Optional, available values: EDIFACT, HL7v2, IDOC, INHOUSE, NACHA, TRADACOMS,\r\nVDA, X12, XML. Parameter has no default value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "agreementType",
          "in" : "query",
          "description" : "Filter by agreement type. Optional, available values: Inbound, Outbound. Parameter has no default value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A defined filter used for filtering the results. Optional, available fields: _id, name.Example: name='X12InboundAgreement'",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional. Default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional. Default: 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Criterion for ordering the results. Optional, available fields: _id, name. Default: name.",
          "required" : false,
          "type" : "string",
          "default" : "name"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Creates a new agreement. The integration engine must be running in order to create a new agreement object.\r\nDepending on the standard type and the trading exchange type, an agreement may be configured differently. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12InboundAgreement\",\r\n \"name\": \"AlinaTest1 AlinaTest Inbound X12\",\r\n \"enabled\": true,\r\n \"senderId\": \"123411\",\r\n \"senderMessagingId\": \"123422\",\r\n \"receiverId\": \"123433\",\r\n \"receiverMessagingId\": \"123444\",\r\n \"communityId\": \"123455\",\r\n \"communityRoutingId\": \"123466\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\",\r\n \"x12TestIndicator\": \"P\",\r\n \"useX12TestIndicator\": false,\r\n \"useInterchangeSenderIdQualifier\": true,\r\n \"useInterchangeReceiverIdQualifier\": true,\r\n \"useInterchangeSenderId\": true,\r\n \"useInterchangeReceiverId\": true,\r\n \"bypassEdiProcessing\": false,\r\n \"generateAckRule\": \"YES_NON_DETAILED\",\r\n \"serviceId\": null,\r\n \"ackEnvelopingType\": \"DEFAULT\",\r\n \"outboundAgreementForAckEnvelopeId\": null,\r\n \"overrideAckTransportReceiver\": false,\r\n \"ackTransportReceiverId\": null,\r\n \"ackTransportReceiverRoutingId\": null,\r\n \"ackDeliveryExchangeId\": \"52007\",\r\n \"ackInterchangeCntrlNumberGenerator\": \"$icid:9$\",\r\n \"ackGroupCntrlNumberGenerator\": \"$GSId:9$\",\r\n \"ackTransSetCntrlNumberGenerator\": \"%FR:4%_%DC:4%\",\r\n \"ackGroupTimeFormat\": \"HHMM\",\r\n \"rejectionRule\": \"ENTIRE_INTERCHANGE\",\r\n \"customRejectionRule\": null,\r\n \"checkControlNumbs\": true,\r\n \"checkGroupControlNumbs\": true,\r\n \"outOfSeqAction\": \"WARN_AND_PROCESS\",\r\n \"dupCheckControlNumbs\": true,\r\n \"dupCheckGroupControlNumbs\": true,\r\n \"dupAction\": \"WARN_AND_PROCESS\",\r\n \"compositeElementSeperator\": \":\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addAgreement_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the agreement in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AgreementBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AgreementBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Updates the configuration of a specific agreement.  Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12InboundAgreement\",\r\n \"name\": \"AlinaTest1 AlinaTest Inbound X12\",\r\n \"enabled\": true,\r\n \"senderId\": \"123411\",\r\n \"senderMessagingId\": \"123422\",\r\n \"receiverId\": \"123433\",\r\n \"receiverMessagingId\": \"123444\",\r\n \"communityId\": \"123455\",\r\n \"communityRoutingId\": \"123466\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\",\r\n \"x12TestIndicator\": \"P\",\r\n \"useX12TestIndicator\": false,\r\n \"useInterchangeSenderIdQualifier\": true,\r\n \"useInterchangeReceiverIdQualifier\": true,\r\n \"useInterchangeSenderId\": true,\r\n \"useInterchangeReceiverId\": true,\r\n \"bypassEdiProcessing\": false,\r\n \"generateAckRule\": \"YES_NON_DETAILED\",\r\n \"serviceId\": null,\r\n \"ackEnvelopingType\": \"DEFAULT\",\r\n \"outboundAgreementForAckEnvelopeId\": null,\r\n \"overrideAckTransportReceiver\": false,\r\n \"ackTransportReceiverId\": null,\r\n \"ackTransportReceiverRoutingId\": null,\r\n \"ackDeliveryExchangeId\": \"52007\",\r\n \"ackInterchangeCntrlNumberGenerator\": \"$icid:9$\",\r\n \"ackGroupCntrlNumberGenerator\": \"$GSId:9$\",\r\n \"ackTransSetCntrlNumberGenerator\": \"%FR:4%_%DC:4%\",\r\n \"ackGroupTimeFormat\": \"HHMM\",\r\n \"rejectionRule\": \"ENTIRE_INTERCHANGE\",\r\n \"customRejectionRule\": null,\r\n \"checkControlNumbs\": true,\r\n \"checkGroupControlNumbs\": true,\r\n \"outOfSeqAction\": \"WARN_AND_PROCESS\",\r\n \"dupCheckControlNumbs\": true,\r\n \"dupCheckGroupControlNumbs\": true,\r\n \"dupAction\": \"WARN_AND_PROCESS\",\r\n \"compositeElementSeperator\": \":\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyAgreement_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the agreement in the requested format.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AgreementBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AgreementBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/ftpSubDirectory" : {
      "get" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "GET subdirectory information for FTP protocol with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getFtpSubDirectoryByExchangePointId_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Add new subdirectory to FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Community\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addFtpSubDirectory_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/sshUser" : {
      "put" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Update a SFTP User account owned by a party.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"axway\",\r\n \"password\": \"123\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ],\r\n \"@id\": \"12345\"\r\n }\r\n\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateSshUser_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing updates. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/{id}/attributes" : {
      "get" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Return the list of available attributes for a Service with given ID. Attributes are metadata used by the\r\nintegration engine and are structured in pairs. An attribute comprises a name and either an associated value or\r\na list of values.",
        "operationId" : "resource_DocumentServiceResource_getAttributes_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Service.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "tags" : [ "DocumentServiceResource" ],
        "description" : "Update the value of an attribute that belongs to a Service of given ID. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"clearedAtRuntime\": false,\r\n \"values\": [\r\n \"value\"\r\n ]\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_modifyAttribute_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Service. <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The bean containing the attribute and its values.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_AttributeValueBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/wsUsers" : {
      "get" : {
        "tags" : [ "TradingPartnerResource" ],
        "description" : "Returns all the Web Services user accounts belonging to the party with given id.",
        "operationId" : "resource_TradingPartnerResource_getWsUsers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "required" : false,
          "type" : "integer",
          "default" : 10
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "required" : false,
          "type" : "integer",
          "default" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/{id}/ftpUser" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET user information for FTP protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getFtpUsersByExchangePointId_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol Id.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "Add new user on FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"userName\": \"Partner\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addFtpUser_POST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User information.  <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/wsUsers/{id}" : {
      "get" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Returns the user account with given ID.",
        "operationId" : "resource_CommunityResource_getWsUserBean_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the user account.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_WSUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "CommunityResource" ],
        "description" : "Deletes a user account that is no longer in use.",
        "operationId" : "resource_CommunityResource_removeWsUser_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the user account.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/configurations/arguments" : {
      "put" : {
        "tags" : [ "ApplicationExchangePointResource" ],
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_updateArgument_PUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreements/{id}" : {
      "get" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Returns a document agreement specified by a unique identifier.",
        "operationId" : "resource_AgreementResource_getDocumentAgreement_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentAgreementBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "AgreementResource" ],
        "description" : "Removes a document agreement specified by a unique identifier.",
        "operationId" : "resource_AgreementResource_removeDocumentAgreement_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/sftpSubDirectory/{id}" : {
      "get" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "GET SFTP subdirectory information that has given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getSftpSubDirectory_GET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Subdirectory ID.  <b>Required</b>.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "description" : "DELETE subdirectory with given {id} from SFTP protocol",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeSftpSubDirectory_DELETE",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SFTP subdirectory ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "API Key" : {
      "description" : "API Key",
      "type" : "apiKey",
      "name" : "KeyId",
      "in" : "header"
    }
  },
  "definitions" : {
    "xml_ns0_partyBean" : {
      "title" : "partyBean",
      "allOf" : [ {
        "properties" : {
          "countryCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The country code for the specified party which indicates its location.\r\nThe format is [ISO code]-[Country name]. For a list of codes see the Website for ISO (International Organization\r\nfor Standardization): <a href=\"http://www.iso.org/iso/home.html\">http://www.iso.org/iso/home.html</a>."
          },
          "defaultDeliveryId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "ID of the delivery exchange used by default to send messages to a specified party when\r\nmultiple delivery exchanges are defined."
          },
          "defaultRoutingId" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The default Routing Id for the specified party.\r\nA Routing Id is a unique identifier that the trading engine uses as the \"to\" and \"from\" address for e-commerce\r\nmessages exchanged over the Internet. Routing Ids are used for party identification at transport level.\r\nA Routing Id can be in any format or length (up to 255 characters), including standard EDI or\r\ncustom formats that include special characters or spaces.\r\n<p/>\r\nAlthough a community or partner can have many Routing Ids, the user interface designates one per community or\r\npartner as the default. Default Routing Ids are used by default for message protocol headers when packaging\r\nmessages.\r\nFor example, when packaging an AS2 message the default Routing Ids are used for <code>as2-to</code> and\r\n<code>as2-from</code> attributes in headers, regardless of the Routing Ids parsed from the payload.",
            "$ref" : "#/definitions/xml_ns0_routingIdBean"
          },
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the party is enabled."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique ID <code>String</code> for the specified party."
          },
          "partyName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The friendly name for the specified party."
          },
          "primaryContact" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The principal contact person for the party and the corresponding email address. You can provide\r\nadditional information, including a phone number, email and notes about the contact.",
            "$ref" : "#/definitions/xml_ns0_contactBean"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_FileSystemB2biProducerExchangePointBean" : {
      "title" : "FileSystemB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_oftpV2ServerExchangePointBean" : {
      "title" : "oftpV2ServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_oftpServerExchangePointBean"
      }, {
        "properties" : {
          "requiresSecureAuthentication" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "For OFTP V2 only, this is an extra layer of security to enable senders and receivers to validate each other as\r\ngenuine. There are two requirements to enable secure OFTP authentication\r\n<ul></><li>Both the sender and receiver must enable secure OFTP authentication. If one party turns it on and the\r\nother party does not, a protocol error is generated and the session between the parties is disconnected.</li>\r\n<li>Both the sender and receiver must be using certificates. These are the normal certificates used by a\r\ncommunity and its partners to securely exchange messages. These are not TLS certificates, which are\r\nadditional certificates needed if TLS is configured for a delivery exchange.</li><ul>\r\n<p/>\r\nThis is how the authentication works:\r\n<ol><li>The initiator of the connection uses the partner's public\r\nkey to encrypt and send a short, random message to the partner.</li>\r\n<li>The partner decrypts the message with its private key and sends the message back.</li>\r\n<li>The initiator compares the response to the original message. If the messages match, the initiator has\r\nauthenticated the partner.</li>\r\n<li>The partner repeats the process to validate the initiator.</li></ol>"
          }
        }
      } ],
      "description" : ""
    },
    "json_ServerExchangePointBean" : {
      "title" : "ServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ConsumerExchangePointBean"
      }, {
        "properties" : {
          "remoteUrl" : {
            "type" : "string",
            "description" : "URL that should be exported and placed in the community's partner profile. This is the URL that is\r\nexposed on the public side of a reverse proxy or firewall. This method is really only useful for\r\nembedded server exchanges on the trading side like HTTP and FTP.\r\n<p/>\r\nIn the case of HTTP an actual value is stored in the db because the load balancer could have a\r\ndifferent external vs. internal path for every exchange point. In the case of FTP there is no need to\r\nstore a per-exchange point external URL, so it overrides this method and dynamically returns a URL\r\nbuilt from other sources.\r\n<p/>\r\nWorst case, this method will return url if remoteUrl is null."
          },
          "serverSettings" : {
            "type" : "string",
            "description" : "URI for the embedded server used by this exchange point."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_publicKeyCredentialsBean" : {
      "title" : "publicKeyCredentialsBean",
      "allOf" : [ {
        "properties" : {
          "alias" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the key."
          },
          "encodedClientPublicKey" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Secure Shell key for use when key authentication is enabled for SFTP delivery exchanges."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of this key."
          }
        }
      }, { } ],
      "description" : "SSH public key information"
    },
    "json_DocumentAgreementOutputApplicationBean" : {
      "title" : "DocumentAgreementOutputApplicationBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementOutputBean"
      }, { } ],
      "description" : ""
    },
    "json_MimeEmailB2biProducerExchangePointBean" : {
      "title" : "MimeEmailB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_TradacomsAgreementBean" : {
      "title" : "TradacomsAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, {
        "properties" : {
          "senderTransmissionCode" : {
            "type" : "string",
            "description" : "An EAN location number (GLN) identifying the transmission sender (FROM code).\r\nThe interchange parties can agree upon the code.\r\nThe value must be 14 or fewer alphanumeric characters."
          },
          "receiverTransmissionCode" : {
            "type" : "string",
            "description" : "An EAN location number (GLN) identifying the transmission receiver (UNTO code).\r\nThe interchange parties can agree upon the code.\r\nThe value must be 14 or fewer alphanumeric characters."
          },
          "senderTransmissionName" : {
            "type" : "string",
            "description" : "Identifies in plain language the transmission sender (FROM name).\r\nThe interchange parties can agree upon the name.\r\nThis value must be 35 or fewer alphanumeric characters."
          },
          "receiverTransmissionName" : {
            "type" : "string",
            "description" : "Identifies in plain language the transmission receiver (UNTO name).\r\nThe interchange parties can agree upon the name.\r\nThis value must be 35 or fewer alphanumeric characters."
          },
          "syntaxRuleId" : {
            "description" : "The syntax rule identifier (STDS). Value can be ANA or ANAA (if reconciliation facility is used).",
            "$ref" : "#/definitions/json_SyntaxRule"
          },
          "syntaxRuleVersion" : {
            "type" : "string",
            "description" : "The syntax rule version. Value is 1."
          },
          "applicationReference" : {
            "type" : "string",
            "description" : "Identifies whether the transmission contains data for an import application,\r\nan export application, an accounting application. The application reference also\r\ncan be used to indicate the status of a transmission (live or test)."
          },
          "priorityCode" : {
            "description" : "The transmission priority code. Values are A, B and C.\r\nThis can be used for internal handling purposes, but otherwise is used rarely.",
            "$ref" : "#/definitions/json_PriorityCode"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_generateAckRuleType" : {
      "type" : "string",
      "title" : "generateAckRuleType",
      "description" : "",
      "enum" : [ "NO", "YES_NON_DETAILED", "YES_DETAILED" ]
    },
    "xml_ns0_configurationBean" : {
      "title" : "configurationBean",
      "allOf" : [ {
        "properties" : {
          "description" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "type" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_StdEntryClassCode" : {
      "type" : "string",
      "title" : "StdEntryClassCode",
      "description" : "",
      "enum" : [ "EMPTY", "ACK", "ADV", "ARC", "ATX", "BOC", "CBR", "CCD", "CIE", "COR", "CTX", "DNE", "ENR", "IAT", "MTE", "PBR", "POP", "POS", "PPD", "RCK", "SHR", "TEL", "TRC", "TRX", "WEB", "XCK" ]
    },
    "json_FtpType" : {
      "type" : "string",
      "title" : "FtpType",
      "description" : "",
      "enum" : [ "ASCII_AUTO_LF", "ASCII_CR_LF", "ASCII_CR_ONLY", "BINARY" ]
    },
    "xml_ns0_sftpSubDirectoryBean" : {
      "title" : "sftpSubDirectoryBean",
      "allOf" : [ {
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the SFTP subdirectory."
          },
          "sftpUserName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The user name to connect to the server. The name is used not only for connection, but also represents\r\nthe home directory for the SFTP account."
          },
          "subDirectory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Subdirectory associated to the SFTP account where messages will be stored. A specific combination of user\r\nand directory can be associated with only one exchange."
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_EdifactInboundFunctionalGroupBean" : {
      "title" : "EdifactInboundFunctionalGroupBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_FunctionalGroupBean"
      }, {
        "properties" : {
          "functionalGroupId" : {
            "type" : "string",
            "description" : "(UNG 0038) Message group identification."
          },
          "senderApplicationId" : {
            "type" : "string",
            "description" : "(UNG 006 0040) Identifies the party sending the transmission. This code is agreed to by trading partners."
          },
          "senderCodeQualifier" : {
            "type" : "string",
            "description" : "(UNG 006 0007) Qualifier referring to the source of codes for the identifiers of interchanging partners."
          },
          "recipientApplicationId" : {
            "type" : "string",
            "description" : "(UNG 007 0044) Identifies the party receiving the transmission. This code is agreed by the trading partners."
          },
          "recipientCodeQualifier" : {
            "type" : "string",
            "description" : "(UNG 007 0007) Qualifier referring to the source of codes for the identifiers of interchanging partners."
          },
          "applicationPassword" : {
            "type" : "string",
            "description" : "(UNG 0058) Application password."
          },
          "useFunctionalGroupId" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>functionalGroupId</code> field is used for matching/selection at runtime."
          },
          "useSenderApplicationId" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>senderApplicationId</code> field is used for matching/selection at runtime."
          },
          "useSenderCodeQualifier" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>senderCodeQualifier</code> field is used for matching/selection at runtime."
          },
          "useRecipientApplicationId" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>recipientApplicationId</code> field is used for matching/selection at runtime."
          },
          "useRecipientCodeQualifier" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>recipientCodeQualifier</code> field is used for matching/selection at runtime."
          },
          "useApplicationPassword" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>applicationPassword</code> field is used for matching/selection at runtime."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_fileRejectionRule" : {
      "type" : "string",
      "title" : "fileRejectionRule",
      "description" : "",
      "enum" : [ "NONE", "ENTIRE", "WARNING" ]
    },
    "json_AddressingRuleBean" : {
      "type" : "object",
      "properties" : {
        "addressingAction" : {
          "description" : "Determine how a pickup will compute the sender/receiver's address</p>\r\n<b>Values for addressing rule action</b>\r\n<ul>\r\n<li><b>USE_METADATA_OR_PROTOCOL_ADDRESS</b> Address must be determined by either message attribute configuration or by protocol address only.</li>\r\n<li><b>USE_FIXED_PARTY</b> Specify the address. Always use a fixed address.</br>\r\nSpecifies that the trading engine should always use a fixed address for the sender or receiver. The \"from\" or \"to\" party must be set up as a community or partner.</br>\r\n<b>Note</b> When this value is chosen, <i>fixedPartyId</i> should also be set</li>\r\n<li><b>USE_PROTOCOL_ADDRESS</b> Use the protocol address but if protocol address is missing, parse the document for the address.</br>\r\nIf you select this option, you must configure the address parsing rule. See Address parsing rule options below.</li>\r\n<li><b>ALWAYS_PARSE</b> Always parse for the address. Regardless whether the message protocol provides the address, always parse the document for the address..</br>\r\nSelect this option to specify that the trading engine should always parse the message for the sender or receiver address.\r\nFor messages from partners, however, the trading engine still checks the protocol header for the sender and receiver.\r\nA message with an unknown sender or receiver in the header is rejected. The always parse option for inbound messages is\r\nfor finding the identity of true senders or true receivers.For messages picked up from applications,\r\nthe always parse option tells the trading engine to find the sender or receiver in the message body.\r\nMessages from integration do not have protocol headers.If you select this option, you must configure the address parsing rule.\r\nSee Address parsing rule options below.\r\n</ul>\r\n</p>\r\n<b>Address parsing rule options</b>\r\n<ul>\r\n<li><b>If the document is EDI, parse for the address</b> - If an EDI document is picked up, use the \"to\" and \"from\" addresses specified within it.\r\nProperly formatted EDI documents contain this information.</li>\r\n<li><b>If the document is XML, use XPaths to locate the address</b> - If an XML document is picked up, use the \"to\" and \"from\"\r\naddresses specified by the XPaths within it. XML Path Language or XPath is a language for addressing parts of an XML document.</li>\r\n</ul>",
          "$ref" : "#/definitions/json_AddressingRuleAction"
        },
        "parseEdi" : {
          "type" : "boolean",
          "description" : "<b>If the document is EDI, parse for the address</b> - If an EDI document is picked up, use the \"to\" and \"from\" addresses specified within it.\r\nProperly formatted EDI documents contain this information."
        },
        "edifactUseInternal" : {
          "type" : "boolean",
          "description" : "<b>Perform enhanced EDI parsing to match partner messaging IDs</b> - This setting applies to X12, EDIFACT, and TRADACOMS.\r\nIf your user license supports Axway B2Bi, this option is selected by default.If selected, the trading engine performs\r\nadditional parsing of the header information to create routing IDs with a colon separator between values.</br>\r\nFor example, information from an EDIFACT file would be parsed in the following format:</br>\r\n<i> ID:interchange ID:internal ID:sub-internal ID </i></br>\r\n<b>When this parsing option is elected,</b> communities and partners must have matching routing IDs in the same format.</br>\r\nFor example, if the \"from\" address in a parsed message is <i>ID:interchange ID:value3:value4</i>, the partner must have the same routing ID.</br>\r\n<b>When this option is not selected,</b> \"to\" and \"from\" addresses in messages are parsed only for the trading engineID and ID values.</br>\r\nFor example, <i>1:partner</i> is parsed as the sender and rendered as partner1 in the user interface.</br>\r\n<b>Note</b> that TRADACOMS only has two, optional values that can be parsed. They must match one of the following patterns:</br>\r\nA: </br>\r\n:B </br>\r\nA:B</br>"
        },
        "parseXml" : {
          "type" : "boolean",
          "description" : "<b>If the document is XML, use XPaths to locate the address</b> - If an XML document is picked up, use the \"to\" and \"from\"\r\naddresses specified by the XPaths within it. XML Path Language or XPath is a language for addressing parts of an XML document.</li>"
        },
        "xpaths" : {
          "type" : "array",
          "description" : "This field is for specifying the XPaths of the message sender or receiver.<br>\r\n<b>Note</b> Using the XPath requires knowledge of XML.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "fixedPartyId" : {
          "type" : "string",
          "description" : "Community or partner friendly name"
        }
      },
      "title" : "AddressingRuleBean",
      "description" : "Use this class to specify sender and receiver rules for consumed files"
    },
    "json_NachaDocumentAgreementBean" : {
      "title" : "NachaDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementBean"
      }, {
        "properties" : {
          "useAddendaType" : {
            "type" : "boolean",
            "description" : "Specify if the addenda type is used for matching/selection.\r\nIf this option is set to <code>true</code>, the field must match the defined (or empty) indicated value."
          },
          "addendaType" : {
            "type" : "string",
            "description" : "Indicates the addenda format type to be specified, if NACHA files that include addenda (embedded documents)\r\nwill be handled."
          },
          "useAddendaVersion" : {
            "type" : "boolean",
            "description" : "Specify if the addenda version is used for matching/selection.\r\nIf this option is set to <code>true</code>, the field must match the defined (or empty) indicated value."
          },
          "addendaVersion" : {
            "type" : "string",
            "description" : "The version of the addenda for the selected format."
          },
          "useAddendaDocument" : {
            "type" : "boolean",
            "description" : "Specify if the document type of the addenda is used for matching/selection.\r\nIf this option is set to <code>true</code>, the field must match the defined (or empty) indicated value."
          },
          "addendaDocument" : {
            "type" : "string",
            "description" : "The document type of the addenda for the selected format and version."
          }
        }
      } ],
      "description" : ""
    },
    "json_IntegrationDeliverySettingsBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Specifies whether or not this Delivery Setting is enabled. <p/>"
        },
        "applicationDeliveryId" : {
          "type" : "string",
          "description" : "The ID of the Application Delivery used by this Delivery Setting.  <p/>"
        },
        "deliveryCriteria" : {
          "description" : "Use this to define the conditions that cause payloads to be delivered to the appropriate application delivery.\r\nIf a payload does not satisfy the delivery criteria for any application delivery, then the first available\r\napplication delivery is used. An application delivery with no criteria is used only if it is the first one\r\navailable. <p/>",
          "$ref" : "#/definitions/json_CriteriaBean"
        }
      },
      "title" : "IntegrationDeliverySettingsBean",
      "description" : ""
    },
    "json_PasswordChangeFailure" : {
      "title" : "PasswordChangeFailure",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AbstractPasswordInfoException"
      }, { } ],
      "description" : "Use this class to show information about the password policies"
    },
    "json_AleB2biProducerExchangePointBean" : {
      "title" : "AleB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_GenerateAckRuleType_x12" : {
      "type" : "string",
      "title" : "GenerateAckRuleType",
      "description" : "",
      "enum" : [ "NO", "YES_NON_DETAILED", "YES_DETAILED" ]
    },
    "json_X12ProcessingMode" : {
      "type" : "string",
      "title" : "X12ProcessingMode",
      "description" : "User: cfistrate",
      "enum" : [ "GS_ONLY_MODE", "ISA_AND_GS_MODE" ]
    },
    "xml_ns0_oftpV1ProducerExchangePointBean" : {
      "title" : "oftpV1ProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_oftpProducerExchangePointBean"
      }, {
        "properties" : {
          "useRFC2204" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "For OFTP V1 only when protocol version is 1.3, this check box tells the trading engine the protocol release\r\nlevel (SSIDLEV) to use for the trading partner. Select the check box if the partner uses the RFC 2204 implementation.\r\nThis means the SSIDLEV field in the start session (SSID) command has a value of 1. Do not set this to true if\r\nthe partner uses the RFC 5024 implementation. This means the SSIDLEV field in the SSID command has a value of 2.\r\n(Note that in either case the exchange point is being defined for OFTP protocol revision level 1.3.)  <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "json_Family" : {
      "type" : "string",
      "title" : "Family",
      "description" : "",
      "enum" : [ "INFORMATIONAL", "SUCCESSFUL", "REDIRECTION", "CLIENT_ERROR", "SERVER_ERROR", "OTHER" ]
    },
    "json_PickupGroupBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name of the pickup group."
        },
        "status" : {
          "description" : "Returns the status of the pickup group: Allow or Block.",
          "$ref" : "#/definitions/json_PickupGroupStatus"
        },
        "assignedExchanges" : {
          "type" : "string",
          "description" : "Returns the list of exchange points that are assigned to this pickup group."
        }
      },
      "title" : "PickupGroupBean",
      "description" : ""
    },
    "json_FileSystemProducerExchangePointBean" : {
      "title" : "FileSystemProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "directory" : {
            "type" : "string",
            "description" : "The full path for a unique directory where the trading engine routes messages. If the directory does not exist, the trading\r\nengine creates it for you.\r\n<p/>\r\nYou must specify a unique directory name. You may want to give the directory a name that indicates whether the transport is being used for integration, or sending messages to\r\npartners."
          },
          "preserveFilenameMode" : {
            "description" : "File Name Preserve Mode Option: <ul> <li><b>Overwrite duplicate filenames</b><p/> An option when you choose to\r\npreserve original file names. If duplicate file names are detected, the trading engine overwrites the existing\r\nfile.</li>\r\n<p/>\r\n<li><b>Sequentially number duplicate filenames</b><p/> An option when you choose to preserve original file names. If\r\nduplicate file names are detected, the trading engine appends a number to the new file.\r\n<p/>\r\n<li><b>Generate unique filenames</b><p/> Select to have the system provide a unique file name instead of using the\r\noriginal name. This field applies to community integration delivery exchanges and partner delivery exchanges only.\r\nWhen selected, files are given arbitrary names. The names always have less than 30 characters and often have less\r\nthan 20 characters.\r\n<p/>\r\nAppended to the file name is a hex representation of a monotonically increasing file name counter that is maintained\r\nin the database and guaranteed to be unique across all nodes in a cluster. In addition, if the original file name\r\nhad an extension, the same extension is appended to the unique name the system generates.\r\n<p/>\r\nThe following are examples of unique file names generated by the system, one with the original file extension and\r\none without: <ul> <li>dabeed45_4cb.edi</li> <li>z47e4120_4ce</li> </li> </ul> </ul>",
            "$ref" : "#/definitions/json_FileNamePreserveMode"
          },
          "preserveFilename" : {
            "type" : "boolean",
            "description" : "Set this to true if you want original file names to be preserved when the trading engine delivers messages.\r\n<p/>\r\nFor binary messages, we recommend that you preserve original file names. Otherwise, the trading engine assigns a\r\nunique file name that does not readily identify the contents of the file. Preserving original file names also allows\r\nyour back-end application to process binary messages based on their file names."
          },
          "metadataHierarchy" : {
            "type" : "array",
            "description" : "You can use metadata hierarchy to avoid file name collisions by selecting message attributes that\r\ncorrespond to the names of subdirectories. <p/>\r\nEach item added represents another subdirectory level. For example, add \"From routing ID\" and \"To\r\nrouting ID\" to the selected attributes list in that order. Then, place a message in a subdirectory\r\nnamed \"ABC/DEF\". The message will be assigned a \"From routing ID\" attribute set to \"ABC\" and a\r\n\"To routing ID\" set to \"DEF\".",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "userDefinedDeliveryFilename" : {
            "type" : "string",
            "description" : "The pattern for the name of the message file sent to a partner. You can enter any combination of the following elements in the\r\nuserDefinedDeliveryFilename or userDefinedDuplicateFilename fields for Delivery exchange file naming action: <ul>\r\n<li> Literal strings </li>\r\n<p/>\r\n<li> %metadata name% <p/> You can use any metadata attribute associated with the FTP or File System\r\ndelivery. You cannot use Custom attributes.</li>\r\n<p/>\r\n<li> $filename$ </li>\r\n<p/>\r\n<li> $extension$ </li>\r\n<p/>\r\n<li> $timestamp$ <p/> Where timestamp is a shortcut for SimpleDateFormat string\r\n'yyyyMMddHHmmssSSS'. </li>\r\n<p/>\r\n<li> $sequence$ <p/> This is a monotonically increasing counter. A different counter is maintained for\r\neach delivery exchange. A Message Handler rule uses a single global counter.</li>\r\n<p/>\r\n<li> $any legal Java SimpleDateFormat string$ </li>\r\n</ul><p/>"
          },
          "userDefinedDuplicateFilename" : {
            "type" : "string",
            "description" : "You can set Duplicate file renaming by entering a renaming pattern in the Pattern field. The patterns that you can\r\nenter in this field are similar to the renaming patterns listed for userDefinedDeliveryFilename, with the following\r\ndifferences: <ul>\r\n<li>You must include $filename$.</li>\r\n<p/>\r\n<li>You must enter at least one of the following elements, in order to ensure that a unique name is\r\ngenerated for the duplicate: <ul>\r\n<li>$sequence$ <p/> This is the sequence number calculated from all delivery file names handled on all\r\ndeliveries</li>\r\n<p/>\r\n<li>$timestamp$</li>\r\n<p/>\r\n<li>$filesequence$ <p/> This variable is only allowed in the duplicate file naming case (not the file\r\nnaming case above). It is calculated from only the file names handled on the specific delivery\r\nwhere you set the pattern. It is recommended that you use $sequence$ instead of\r\n$filesequence$ because $filesequence$ consumes greater processing resources. </li>\r\n<p/>\r\n<li>$any legal Java SimpleDateFormat string$</li></ul></li><p/></ul>"
          }
        }
      } ],
      "description" : ""
    },
    "json_FtpB2biConsumerExchangePointBean" : {
      "title" : "FtpB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_tradacomsMessagingIdBean" : {
      "title" : "tradacomsMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_messagingIdBean"
      }, {
        "properties" : {
          "transmissionCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "An EAN location number (GLN) identifying the transmission sender\r\n(FROM code) or the transmission receiver (UNTO code). The interchange parties can agree\r\nupon the code. The value must be 14 or fewer alphanumeric characters."
          },
          "transmissionName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Identifies in plain language the transmission sender (FROM name) or the transmission receiver (UNTO name).\r\nThe interchange parties can agree upon the name. This value must be 35 or fewer alphanumeric characters."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_pesitIdentificationBean" : {
      "title" : "pesitIdentificationBean",
      "allOf" : [ {
        "properties" : {
          "overridePasswordSettings" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set to true to specify a password. <p/>"
          },
          "password" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Password to be used. This should be the password expected from the partner on a remote identification and\r\nthe password the partner expects for the local identification. </br>\r\n<b>Note:</b> This field is used only on trading part. <p/>"
          },
          "routingIdentifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The Routing Id belonging to a partner or a community. For Application Delivery, use PesitReceiverID instead.</br>\r\n<b>Note:</b> If missing, allow any valid routing Id to be used.  <p/>"
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_oftpV2ConsumerExchangePointBean" : {
      "title" : "oftpV2ConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_oftpConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_inHouseInboundAgreementBean" : {
      "title" : "inHouseInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_inHouseAgreementBean"
      }, {
        "properties" : {
          "testFlag" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this field to true if the agreement is for testing and not for production."
          },
          "useReceiverIdentification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver identification for detection/matching. </br> This is a read-only field."
          },
          "useSenderIdentification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender identification for detection/matching. </br> This is a read-only field."
          },
          "useTestFlag" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If true, testFlag will be used for detection / matching."
          }
        }
      } ],
      "description" : ""
    },
    "json_CertificateType" : {
      "type" : "string",
      "title" : "CertificateType",
      "description" : "",
      "enum" : [ "ROOT_CA", "INTERMEDIARY", "END_ENTITY", "SELF_SIGNED" ]
    },
    "json_X12InboundFunctionalGroupBean" : {
      "title" : "X12InboundFunctionalGroupBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_FunctionalGroupBean"
      }, {
        "properties" : {
          "functionalGroupId" : {
            "type" : "string",
            "description" : "(GS 479) Identifies a group of application related transaction sets."
          },
          "senderMessagingId" : {
            "type" : "string",
            "description" : "(GS 142) Identifies the party sending the transmission. This code is agreed to by trading partners."
          },
          "receiverMessagingId" : {
            "type" : "string",
            "description" : "(GS 124) Identifies the party receiving transmission. This code is agreed to by trading partners."
          },
          "responsibleAgencyCode" : {
            "description" : "(GS 455) Identifies the issuer of the standard. This code is used in conjunction with GS 480 below.",
            "$ref" : "#/definitions/json_X12IndustryIdentifier"
          },
          "identifierCode" : {
            "type" : "string",
            "description" : "(GS480) Code indicating the version, release, sub-release, and industry identifier of the EDI standard being used,\r\nincluding the GS and GE segments. If code in DE455 in GS segment is X, then in DE 480 positions 1-3 are the version number;\r\npositions 4-6 are the release and subrelease, level of the version; and positions 7-12 are the industry\r\nor trade association identifiers (optionally assigned by user); if code in DE455 in GS segment is T, then other formats are allowed."
          },
          "useFunctionalGroupId" : {
            "type" : "boolean",
            "description" : "Select this option if you want B2Bi to use a group of application related transaction sets at runtime."
          },
          "useSenderMessagingId" : {
            "type" : "boolean",
            "description" : "Select this option if you want that B2Bi to parse the interchange sender id value at runtime."
          },
          "useReceiverMessagingId" : {
            "type" : "boolean",
            "description" : "Select this option if you want that B2Bi to parse the interchange receiver id value at runtime."
          },
          "useResponsibleAgencyCode" : {
            "type" : "boolean",
            "description" : "Select this option if you want that B2Bi to parse the issuer of the standard at runtime."
          },
          "useIdentifierCode" : {
            "type" : "boolean",
            "description" : "Select this option if you want that B2Bi to parse the version, release, sub-release, and industry identifier at runtime."
          }
        }
      } ],
      "description" : "Author: srybak\r\nDate: 5/23/14"
    },
    "xml_ns0_x12MessagingIdBean" : {
      "title" : "x12MessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_messagingIdBean"
      }, {
        "properties" : {
          "applicationId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A code identifying the sender (GS02) or the receiver (GS03) of the message.\r\nThe trading partners agree upon the codes to use. This is a functional group parameter."
          },
          "interchangeId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The information code published by the sender for other parties to use as the receiver ID to route data to them (ISA06).\r\nOr, the information code published by the receiver of the data (ISA08).\r\nWhen you are sending, the sender uses this as its sending ID.\r\nOther parties sending to you use this as a receiving ID route data to them. These are Interchange envelope parameters."
          },
          "interchangeIdQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The qualifier for designating the system or method of information code structure used to designate the sender ID\r\nelement being qualified (ISA05). Or, the qualifier for designating the system or method of information code\r\nstructure to designate the receiver ID element being qualified (ISA07). These are Interchange envelope parameters."
          },
          "processingMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "<p> Exchange modes for trading messages:</p>\r\n<ul>\r\n<li>ISA_AND_GS -&nbsp;Used for interchange and group level processing - (Default) Select this option to enable the handling of complete X12 messages (including ISA headers).\r\nThen, specify the following:\r\n<ul>\r\n<li>Interchange ID qualifier</li>\r\n<li>Interchange ID</li>\r\n<li>Application ID</li>\r\n</ul>\r\n</li>\r\n<li>GS_ONLY - Used for group level processing - Select this option to enable the handling of X12 messages without ISA headers.\r\nThen, specify the following:\r\n<ul>\r\n<li>Application ID</li>\r\n</ul>\r\n</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_x12ProcessingMode"
          }
        }
      } ],
      "description" : "User: cfistrate"
    },
    "json_OftpV1ProducerExchangePointBean" : {
      "title" : "OftpV1ProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_OftpProducerExchangePointBean"
      }, {
        "properties" : {
          "useRFC2204" : {
            "type" : "boolean",
            "description" : "For OFTP V1 only when protocol version is 1.3, this check box tells the trading engine the protocol release\r\nlevel (SSIDLEV) to use for the trading partner. Select the check box if the partner uses the RFC 2204 implementation.\r\nThis means the SSIDLEV field in the start session (SSID) command has a value of 1. Do not set this to true if\r\nthe partner uses the RFC 5024 implementation. This means the SSIDLEV field in the SSID command has a value of 2.\r\n(Note that in either case the exchange point is being defined for OFTP protocol revision level 1.3.)  <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_jmsListeningExchangePointBean" : {
      "title" : "jmsListeningExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_consumerExchangePointBean"
      }, {
        "properties" : {
          "deliverTransportId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The id of the delivery exchange point. This field is for internal use only."
          },
          "jmsCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password for the JMS provider. The user name and password can be the same as your JNDI user name\r\nand password. This depends on your JMS provider and how it is configured.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          },
          "jmsQueue" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the queue. <p/>\r\nExample: <code>XMLQueue@router1</code>."
          },
          "jmsQueueConnFactory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The connection factory as defined within the JMS provider. This value can be either in the form\r\n<code>factoryname@routername</code> or the JNDI public symbol for the QueueConnectionFactory. This\r\ndepends on your JMS provider and how it is configured.\r\nExamples: <code>plainsocket@router1</code> or <code>QueueConnectionFactory22</code>."
          },
          "jndiCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password for the JNDI provider. The user name and password could be blank and are typically provided\r\nin the JNDI URL. This depends on the JNDI provider and how it is configured.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          },
          "jndiFactory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the JNDI service provider class. <p/>\r\nExample: <code>com.swiftmq.jndi.InitialContextFactoryImpl</code>."
          },
          "jndiUrl" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The network URL used to obtain access to the JNDI service provider for your JMS service.\r\nExample: <code>smqp://localhost:4001/timeout=10000</code>."
          },
          "preferredNodes" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Get the preferred nodes used to process messages. See <code>usePreferredNodes</code>."
          },
          "queueUtilClass" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the Java class for implementing the connection to the message queue.\r\nA Java class for Oracle AQ is available. The class name is:\r\n<code>com.cyclonecommerce.tradingengine.transport.jms.OracleAQQueueUtil</code>.\r\nIf you want a Java class for a provider other than Oracle AQ, you need the help of a\r\nprofessional services consultant."
          },
          "queueUtilParameters" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "There are four parameters required for the Java class for Oracle AQ. These parameters must be in the following order:\r\n<ol><li>Host - the name of the computer running Oracle AQ</li>\r\n<li>Database name - the name of the database that contains the message queue</li>\r\n<li>Port - the port Oracle AQ uses to listen for messages</li>\r\n<li>Driver type - the type of JDBC driver for connecting to the provider. For Oracle AQ, the valid values are\r\n<code>thin</code> and <code>oci8</code>.</li><ol/>"
          },
          "receiveTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If your JMS provider is slow to respond to the request received from the trading engine, increase the response interval.\r\nThe default value of 0 is acceptable in the case of most JMS providers. However, if unacceptable for your\r\nJMS provider, use trial-and-error to determine a workable interval between 1 and 32767 seconds."
          },
          "serverReconnectIntervalSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interval in seconds to wait between reconnect attempts."
          },
          "useJndi" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the JMS provider requires a Java Naming and Directory Interface (JNDI) implementation.\r\nFor example, Oracle Advanced Queuing facility (Oracle AQ) does not use a JNDI provider."
          },
          "usePreferredNodes" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If there are one or more nodes for the trading engine, you can select one or more as the preferred\r\nnodes for consuming messages. If the preferred nodes are running, these are used to process messages.\r\nIf the preferred nodes are stopped, work is distributed among the remaining running available nodes.\r\nSelecting preferred nodes lets you manage work distribution among nodes.\r\n<p>\r\nThis option is available for integration pickup and trading delivery exchanges that poll for messages.\r\n</p>\r\n<p>\r\nIn general, this setting should not be used. Usually it is best to let the trading engine automatically\r\ndetermine which node should be responsible for initiating the polling of which exchange point. This\r\nsetting is useful if you have a cluster that spans geographical locations and each location has its own\r\nlocal transport servers. In this situation, you would use this setting to ensure the exchange points\r\nassociated with the transport servers are assigned to nodes in the vicinity of the transport servers.\r\n</p>"
          }
        }
      } ],
      "description" : ""
    },
    "json_Locale" : {
      "type" : "object",
      "properties" : {
        "availableLocales" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_Locale"
            }
          }
        },
        "displayName" : {
          "type" : "string",
          "description" : ""
        },
        "ISO3Language" : {
          "type" : "string",
          "description" : ""
        },
        "displayVariant" : {
          "type" : "string",
          "description" : ""
        },
        "default" : {
          "description" : "",
          "$ref" : "#/definitions/json_Locale"
        },
        "variant" : {
          "type" : "string",
          "description" : ""
        },
        "script" : {
          "type" : "string",
          "description" : ""
        },
        "displayLanguage" : {
          "type" : "string",
          "description" : ""
        },
        "unicodeLocaleKeys" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "extensionKeys" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "displayCountry" : {
          "type" : "string",
          "description" : ""
        },
        "language" : {
          "type" : "string",
          "description" : ""
        },
        "ISOLanguages" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "unicodeLocaleAttributes" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "ISO3Country" : {
          "type" : "string",
          "description" : ""
        },
        "country" : {
          "type" : "string",
          "description" : ""
        },
        "displayScript" : {
          "type" : "string",
          "description" : ""
        },
        "ISOCountries" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "title" : "Locale",
      "description" : ""
    },
    "xml_ns0_usernamePasswordCredentialsBean" : {
      "title" : "usernamePasswordCredentialsBean",
      "allOf" : [ {
        "properties" : {
          "password" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "password for the user"
          },
          "username" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "user name used in basic authentication"
          }
        }
      }, { } ],
      "description" : "Bean used in basic authentication"
    },
    "json_JmsProducerExchangePointBean" : {
      "title" : "JmsProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "useJndi" : {
            "type" : "boolean",
            "description" : "Specify whether the JMS provider requires a Java Naming and Directory Interface (JNDI) implementation.\r\nFor example, Oracle Advanced Queuing facility (Oracle AQ) does not use a JNDI provider."
          },
          "queueUtilClass" : {
            "type" : "string",
            "description" : "The name of the Java class for implementing the connection to the message queue.\r\nA Java class for Oracle AQ is available. The class name is:\r\n<code>com.cyclonecommerce.tradingengine.transport.jms.OracleAQQueueUtil</code>.\r\nIf you want a Java class for a provider other than Oracle AQ, you need the help of a\r\nprofessional services consultant."
          },
          "jndiUrl" : {
            "type" : "string",
            "description" : "The network URL used to obtain access to the JNDI service provider for your JMS service.\r\nExample: <code>smqp://localhost:4001/timeout=10000</code>."
          },
          "jndiFactory" : {
            "type" : "string",
            "description" : "The name of the JNDI service provider class. Example: <code>com.swiftmq.jndi.InitialContextFactoryImpl</code>."
          },
          "jndiCredentials" : {
            "description" : "User name and password for the JNDI provider. The user name and password could be blank and are typically provided\r\nin the JNDI URL. This depends on the JNDI provider and how it is configured.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "jmsQueueConnFactory" : {
            "type" : "string",
            "description" : "The connection factory as defined within the JMS provider. This value can be either in the form\r\n<code>factoryname@routername</code> or the JNDI public symbol for the QueueConnectionFactory. This\r\ndepends on your JMS provider and how it is configured.\r\nExamples: <code>plainsocket@router1</code> or <code>QueueConnectionFactory22</code>."
          },
          "jmsQueue" : {
            "type" : "string",
            "description" : "The name of the queue. <p/>\r\nExample: <code>XMLQueue@router1</code>."
          },
          "jmsCredentials" : {
            "description" : "User name and password for the JMS provider. The user name and password can be the same as your JNDI user name\r\nand password. This depends on your JMS provider and how it is configured.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "queueUtilParameters" : {
            "type" : "array",
            "description" : "There are four parameters required for the Java class for Oracle AQ. These parameters must be in the following order:\r\n<ol><li>Host - the name of the computer running Oracle AQ</li>\r\n<li>Database name - the name of the database that contains the message queue</li>\r\n<li>Port - the port Oracle AQ uses to listen for messages</li>\r\n<li>Driver type - the type of JDBC driver for connecting to the provider. For Oracle AQ, the valid values are\r\n<code>thin</code> and <code>oci8</code></li><ol/>",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "useTransactedQueue" : {
            "type" : "boolean",
            "description" : "Specify whether the JMS provider is Oracle AQ."
          },
          "sendPayloadViaFilesystem" : {
            "type" : "boolean",
            "description" : "Specify whether payloads should be sent by a file system. You can specify the size of payloads to send and the\r\npath for payload files. The receiver uses the path to retrieve the files."
          },
          "overflowLimit" : {
            "type" : "number",
            "description" : "The size in bytes representing the lower limit over which payloads should be passed via the file system."
          },
          "overflowDir" : {
            "type" : "string",
            "description" : "Path to payload files."
          },
          "jmsMessageType" : {
            "description" : "The JMS message class. You can select one of the following two options:\r\n<ul><li>BYTES - a <code>BytesMessage</code> object is used to send a message containing a stream of\r\nuninterrupted bytes. It inherits from the Message interface and adds a bytes message body.</li>\r\n<li>TEXT - a <code>TextMessage</code> object is used to send a message containing a\r\n<code>java.lang.String</code>. It inherits from the Message interface and adds a text message body.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_MessageType"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_protocolVersion" : {
      "type" : "string",
      "title" : "protocolVersion",
      "description" : "",
      "enum" : [ "VERSION_1_3", "VERSION_1_4", "VERSION_2_0" ]
    },
    "json_JmsPollingExchangePointBean" : {
      "title" : "JmsPollingExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "jmsQueueConnFactory" : {
            "type" : "string",
            "description" : "The connection factory as defined within the JMS provider. This value can be either in the form\r\n<code>factoryname@routername</code> or the JNDI public symbol for the QueueConnectionFactory. This\r\ndepends on your JMS provider and how it is configured.\r\nExamples: <code>plainsocket@router1</code> or <code>QueueConnectionFactory22</code>."
          },
          "jmsQueue" : {
            "type" : "string",
            "description" : "The name of the queue. <p/>\r\nExample: <code>XMLQueue@router1</code>."
          },
          "jmsCredentials" : {
            "description" : "User name and password for the JMS provider. The user name and password can be the same as your JNDI user name\r\nand password. This depends on your JMS provider and how it is configured.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "useJndi" : {
            "type" : "boolean",
            "description" : "Specify whether the JMS provider requires a Java Naming and Directory Interface (JNDI) implementation.\r\nFor example, Oracle Advanced Queuing facility (Oracle AQ) does not use a JNDI provider."
          },
          "jndiUrl" : {
            "type" : "string",
            "description" : "The network URL used to obtain access to the JNDI service provider for your JMS service.\r\nExample: <code>smqp://localhost:4001/timeout=10000</code>."
          },
          "jndiFactory" : {
            "type" : "string",
            "description" : "The name of the JNDI service provider class. <p/>\r\nExample: <code>com.swiftmq.jndi.InitialContextFactoryImpl</code>."
          },
          "jndiCredentials" : {
            "description" : "User name and password for the JNDI provider. The user name and password could be blank and are typically provided\r\nin the JNDI URL. This depends on the JNDI provider and how it is configured.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "queueUtilClass" : {
            "type" : "string",
            "description" : "The name of the Java class for implementing the connection to the message queue.\r\nA Java class for Oracle AQ is available. The class name is:\r\n<code>com.cyclonecommerce.tradingengine.transport.jms.OracleAQQueueUtil</code>.\r\nIf you want a Java class for a provider other than Oracle AQ, you need the help of a\r\nprofessional services consultant."
          },
          "queueUtilParameters" : {
            "type" : "array",
            "description" : "There are four parameters required for the Java class for Oracle AQ. These parameters must be in the following order:\r\n<ol><li>Host - the name of the computer running Oracle AQ</li>\r\n<li>Database name - the name of the database that contains the message queue</li>\r\n<li>Port - the port Oracle AQ uses to listen for messages</li>\r\n<li>Driver type - the type of JDBC driver for connecting to the provider. For Oracle AQ, the valid values are\r\n<code>thin</code> and <code>oci8</code>.</li><ol/>",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "receiveTimeoutSeconds" : {
            "type" : "number",
            "description" : "If your JMS provider is slow to respond to the request received from the trading engine, increase the response interval.\r\nThe default value of 0 is acceptable in the case of most JMS providers. However, if unacceptable for your\r\nJMS provider, use trial-and-error to determine a workable interval between 1 and 32767 seconds."
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "description" : "This value specifies the maximum number of messages to be consumed over a single connection before the connection\r\nis closed and reopened on another processing node. As such, this setting effectively controls load balancing."
          },
          "useTransactedQueue" : {
            "type" : "boolean",
            "description" : "Set this option to <b>true</b> if the provider is Oracle AQ. Otherwise, set it to <b>false</b>."
          }
        }
      } ],
      "description" : ""
    },
    "json_RejectionRuleType_hl7v2" : {
      "type" : "string",
      "title" : "RejectionRuleType",
      "description" : "",
      "enum" : [ "NONE", "ENTIRE_BATCH", "SAME_TYPE", "CUSTOM_TYPE" ]
    },
    "json_IdocDocumentAgreementBean" : {
      "title" : "IdocDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementBean"
      }, {
        "properties" : {
          "useTypeExtended" : {
            "type" : "boolean",
            "description" : "Select this option if you want to use this document agreement only on a specific type extended."
          },
          "typeExtended" : {
            "type" : "string",
            "description" : "IDOC control record field representing the name of the extension type."
          },
          "useMessageType" : {
            "type" : "boolean",
            "description" : "Select this option if you want to use this document agreement only on a specific message type."
          },
          "messageType" : {
            "type" : "string",
            "description" : "IDOC control record field that sets the logical message type. Represents the business meaning of the message."
          },
          "useEdiMessageType" : {
            "type" : "boolean",
            "description" : "Select this option if you want to use this document agreement only on a specific EDI message type."
          },
          "ediMessageType" : {
            "type" : "string",
            "description" : "IDOC control record field representing the EDI message type."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_pluggableConsumerExchangePointBean" : {
      "title" : "pluggableConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "definitionName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Name to be displayed in the UI wizard for selecting a transport.\r\nThis name will be displayed along with built-in transport names such as \"Ftp\", \"File system\", etc.\r\nFor consistency with existing names, use an initial capital letter, and no period at the end."
          },
          "settings" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Defines setting string to be passed to the implementation class when a pluggable transport is created",
            "$ref" : "#/definitions/xml_ns0_mapType"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_sshUserBean" : {
      "title" : "sshUserBean",
      "allOf" : [ {
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the SFTP account is enabled."
          },
          "hasCredentials" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify where the account has associated credentials. The accounts might not have credentials if the server\r\nuses public/private key pair authentication"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The id of the SFTP account."
          },
          "password" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The password for the SFTP account to connect to the server."
          },
          "passwordPolicyName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the password policy to assign to the user. A default password policy is in effect globally for all\r\ntransport users. You can override the default policy by adding one or more user-defined policies and assigning\r\npolicies to specific users."
          },
          "sftpSubDirectories" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Subdirectories associated to the SFTP account. A specific combination of user\r\nand directory can be associated with only one exchange."
          },
          "sshPublicKeys" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns the RSA or DSK qualified SSH key for the user.  Multiple keys may be combined in one string and will\r\nbe separated by a carriage return or carriage return + line feed.\r\n<br></br>\r\nNote: if multiple keys are present it is best to parse the keys using a BufferedReader wrapped with a\r\nStringReader which takes this data a value."
          },
          "userName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The user name to connect to the server. The name is used not only for connection, but also represents\r\nthe home directory for the SFTP account."
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_consumerExchangePointBean" : {
      "title" : "consumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_exchangePointBean"
      }, {
        "properties" : {
          "ediSplitterEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The EDI splitter breaks apart documents containing more than one interchange into separate documents.\r\nThe splitter supports the X12, EDIFACT and TRADACOMS formats."
          },
          "maxConsumableFileSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Maximum file size (bytes)."
          },
          "metadataFixedItems" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Assign fixed values to message attributes.",
            "$ref" : "#/definitions/xml_ns0_mapType"
          },
          "metatadaTemplate" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The default message attributes template to apply to this exchange point.",
            "$ref" : "#/definitions/xml_ns0_metadataTemplateConsumptionPropertiesBean"
          },
          "overrideDirection" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Return the override direction if the setting is to override"
          },
          "pickupGroupId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the pickup group where the exchange point is assigned."
          },
          "pickupGroupStatus" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The status of the pickup group where the exchange point is assigned. Can be Allow or Block."
          },
          "restrictConsumableFileSize" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Restrict the maximum file size supported for this transport."
          },
          "serviceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "When <b>useContentProcessing</b> is <code>true</code>, specify the ID of the service used to supply the processing."
          },
          "shouldOverrideDirection" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Validate that the direction should be overridden"
          },
          "useCommunityMessageDelivery" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Apply the community collaboration settings to the messages that are consumed by this pickup."
          },
          "useContentProcessing" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want to apply processing to the messages you consume using this exchange. If you\r\nselect this option you can then select a service to supply the processing."
          }
        }
      } ],
      "description" : ""
    },
    "json_OftpProducerExchangePointBean" : {
      "title" : "OftpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "SSID" : {
            "type" : "string",
            "description" : "SSID identification code - The start session identification (SSID) of the local or remote party. Trading partners\r\nexchange SSIDs to identify each other in the protocol handshake and session setup.   <p/>"
          },
          "useSessionPassword" : {
            "type" : "boolean",
            "description" : "Set OFTP session password - If set to true, the partner must present this password to your community. The password\r\nis compared to the one your community has stored for the partner. <p/>"
          },
          "sessionPassword" : {
            "type" : "string",
            "description" : "The OFTP session password -  The password can be no longer than eight alphanumeric characters and is case sensitive. <p/>"
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "Connect timeout (seconds) - Time in seconds the trading engine waits for a connection to the delivery exchange\r\nbefore the attempt times out. Although the default value is 30 seconds, this may be longer than the interval\r\nallowed by your operating system (OS). For example, Windows XP by default allows a maximum timeout of 20 seconds.\r\nThe actual connect timeout interval is the lesser of the OS timeout and the value set in the trading engine. <p/>"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Read timeout (seconds) - The maximum number of seconds the server waits when reading data from a partner. <p/>"
          },
          "version" : {
            "description" : "OFTP Protocol version. <p/>\r\n<ul>\r\nFor Odette FTP V1 <p/>\r\n<li>VERSION_1_3</li>\r\n<li>VERSION_1_4</li>\r\nFor Odette FTP V2:\r\n<li>VERSION_2_0</li>\r\n</ul> <p/>",
            "$ref" : "#/definitions/json_ProtocolVersion"
          },
          "networkSettings" : {
            "description" : "The Network Settings for this Exchange Point. The network settings on an OFTP Exchange Point must be one of the\r\nfollowing type: TCP, X25, ISDN.<p/>",
            "$ref" : "#/definitions/json_NetworkSettingsBean"
          },
          "creditCounter" : {
            "type" : "number",
            "description" : "Credit counter - The number of consecutive data exchange buffers sent by the speaker before it must wait for a\r\ncredit (CDT) command from the listener. The credit value is only applied to data flow in the data transfer phase.\r\nThe speaker's available credit is initialized to SSIDCRED when it receives a start file positive answer (SFPA)\r\ncommand from the listener. It is zeroed by the end file (EFID) command. After negotiation, the smallest size must\r\nbe selected in the answer of the responder or a protocol error aborts the session.  <p/>"
          },
          "dataExchangeBuffer" : {
            "type" : "number",
            "description" : "Data exchange buffer - The length in octets of the largest acceptable data exchange buffer. The length includes\r\nthe command octet, but not the stream transmission header. After negotiation, the smallest size is selected.\r\nThe value in this field maps to the SSIDSDEB field in the SSID OFTP protocol command. <p/>"
          },
          "overrideSsidAndPassword" : {
            "type" : "boolean",
            "description" : "Set this to true in order to have this partner exchange use an SSID code and password different than the values\r\nset on a community's OFTP delivery exchange. <p/>"
          },
          "localSSIDOverride" : {
            "type" : "string",
            "description" : "If overrideSsidAndPassword is set to true, this SSID must be set. This SSID will be used instead of the one from\r\nthe community's OFTP delivery exchange. <p/>"
          },
          "localSSIDPasswordOverride" : {
            "type" : "string",
            "description" : "Entering an override password is optional. This password overrides the password in the field named \"This server\r\nrequires a session password\", which is an optional field for a community OFTP delivery exchange. <p/>"
          },
          "enableHostNameVerification" : {
            "type" : "boolean",
            "description" : "Enable host name verification - If selected, the trading engine compares the name of the TLS server to the name\r\nin the server's certificate to ensure they are the same.<p/>"
          }
        }
      } ],
      "description" : ""
    },
    "json_PriorityCode" : {
      "type" : "string",
      "title" : "PriorityCode",
      "description" : "",
      "enum" : [ "A", "B", "C" ]
    },
    "json_DocumentServiceBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : "The name of this service."
        },
        "deliveryMethod" : {
          "description" : "The delivery method for this service. You can use one of the following values:\r\n<ul>\r\n<li><b>DELIVER_TO_PARTNER</b> </br> Select this option if the message is to be sent to a trading partner. This option is\r\nthe default setting for the following document formats: MEC XML, XML, In-house and IDoc.</li>\r\n<li><b>RETURN_TO_SENDER</b> </br> Select this option if you are creating a service to support Web Services or MLLP trading,\r\nand the service requires a return exchange to the originating party.</li>\r\n<li><b>DELIVER_TO_APPLICATION</b> </br> Select this option if the delivery endpoint of the document exchange is a back-end\r\napplication. This option is the default setting for the following document formats: EDIFACT, X12, VDA and\r\nTRADACOMS. If you select this option, you must also provide the target application for the document delivery.</li>\r\n<li><b>CONTINUE_TO_NEXT_STEP</b> </br> Select this option if the message is to be sent to the next content-based\r\nprocessing after the processing steps specified in the service have been executed.</br>\r\n<b>Note:</b> This option is for metadata services only. </li>\r\n</ul>\r\nThe delivery method is set on the Document Service only if the initial component or the post detection component\r\n(for Partner Document Services) has no outputs.\r\nOtherwise, the delivery method is set individually on each output.",
          "$ref" : "#/definitions/json_DeliveryMethod"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Specify whether this service is enabled."
        },
        "exchangePoint" : {
          "type" : "string",
          "description" : "The Application Delivery used when <code>DELIVER_TO_APPLICATION</code> delivery method is selected."
        },
        "component" : {
          "type" : "string",
          "description" : "Component object which provides the initial processing of the service."
        },
        "outputs" : {
          "type" : "string",
          "description" : "List of document service output objects, which are used for configuring the message that is output from the component resource."
        },
        "exchangePointId" : {
          "type" : "string",
          "description" : "The ID of the application delivery used when DELIVER_TO_APPLICATION delivery method is selected."
        },
        "componentId" : {
          "type" : "string",
          "description" : "The ID of the Component which provides the initial processing of the Service."
        },
        "documentServiceAttributes" : {
          "type" : "string",
          "description" : "List with all attributes for current document service"
        },
        "documentServiceAttributesTemplate" : {
          "type" : "string",
          "description" : "List with all template attributes for document services"
        }
      },
      "title" : "DocumentServiceBean",
      "description" : ""
    },
    "xml_ns0_emailB2biProducerExchangePointBean" : {
      "title" : "emailB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_SftpDuplicateFileNameMode" : {
      "type" : "string",
      "title" : "SftpDuplicateFileNameMode",
      "description" : "",
      "enum" : [ "OVERWRITE", "APPEND", "AUTO_GENERATE" ]
    },
    "json_EdifactAckType" : {
      "type" : "string",
      "title" : "EdifactAckType",
      "description" : "",
      "enum" : [ "CONTROL_EANCOM_D93A", "CONTROL_EANCOM_D96A", "CONTROL_UN_EDIEL_2", "CONTROL_UN_2", "CONTROL_UN_2_1", "CONTROL_UN_2_2", "CONTROL_UN_3", "CONTROL_UN_4", "CONTROL_EDIG_S_3_2", "CONTROL_EDIG_S_4" ]
    },
    "json_FtpCollisionMode" : {
      "type" : "string",
      "title" : "FtpCollisionMode",
      "description" : "",
      "enum" : [ "USE_USE_NONE", "USE_TEMP_FILES_WITH_INBOX", "USE_TEMP_FILE_EXTENSION" ]
    },
    "json_X12MessagingIdBean" : {
      "title" : "X12MessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MessagingIdBean"
      }, {
        "properties" : {
          "interchangeIdQualifier" : {
            "type" : "string",
            "description" : "The qualifier for designating the system or method of information code structure used to designate the sender ID\r\nelement being qualified (ISA05). Or, the qualifier for designating the system or method of information code\r\nstructure to designate the receiver ID element being qualified (ISA07). These are Interchange envelope parameters."
          },
          "applicationId" : {
            "type" : "string",
            "description" : "A code identifying the sender (GS02) or the receiver (GS03) of the message.\r\nThe trading partners agree upon the codes to use. This is a functional group parameter."
          },
          "interchangeId" : {
            "type" : "string",
            "description" : "The information code published by the sender for other parties to use as the receiver ID to route data to them (ISA06).\r\nOr, the information code published by the receiver of the data (ISA08).\r\nWhen you are sending, the sender uses this as its sending ID.\r\nOther parties sending to you use this as a receiving ID route data to them. These are Interchange envelope parameters."
          },
          "processingMode" : {
            "description" : "<p> Exchange modes for trading messages:</p>\r\n<ul>\r\n<li>ISA_AND_GS -&nbsp;Used for interchange and group level processing - (Default) Select this option to enable the handling of complete X12 messages (including ISA headers).\r\nThen, specify the following:\r\n<ul>\r\n<li>Interchange ID qualifier</li>\r\n<li>Interchange ID</li>\r\n<li>Application ID</li>\r\n</ul>\r\n</li>\r\n<li>GS_ONLY - Used for group level processing - Select this option to enable the handling of X12 messages without ISA headers.\r\nThen, specify the following:\r\n<ul>\r\n<li>Application ID</li>\r\n</ul>\r\n</li>\r\n</ul>",
            "$ref" : "#/definitions/json_X12ProcessingMode"
          }
        }
      } ],
      "description" : "User: cfistrate"
    },
    "xml_ns0_pesitConsumerExchangePointBean" : {
      "title" : "pesitConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "acknowledgementExpected" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if the polled back-end server expects an acknowledgment for each file fetched."
          },
          "bufferSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Max data unit size in bytes (PI25): The largest chunk of data, in bytes, to be transferred at one time. For\r\nhigh-speed networks, use the default 32700 bytes. This value is related to the client setting for record length.\r\n\r\nThe value of this field must be the same or larger than the value of the record length field."
          },
          "callerIdentification" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Holds the caller's protocol identity (P13) and password requirements.\r\n<b>Note:</b> This field is automatically filled on trading part",
            "$ref" : "#/definitions/xml_ns0_pesitIdentificationBean"
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "List of cipher suites to be used. <p/>"
          },
          "compressionType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Compression (PI21) - Controls the compression of the file during the transfer (compression on the fly).\r\nSelect a compression method:   <ul>\r\n<li>NONE\r\nNo compression. (default)</li>\r\n<li>HORIZONTAL\r\nCompresses the consecutive identical characters in the records.</li>\r\n<li>Vertical\r\nRecords are compared to one another and the consecutive identical columns are compressed.</li>\r\n<li>BOTH\r\nCombination of the above two compression methods.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_pesitCompressionType"
          },
          "connectionTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "PeSIT Tc timeout. The time the caller waits for a connection acknowledgment from the server."
          },
          "disableNagleAlgorithm" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option to disable Nagle's algorithm on the underlying TCP connection used by the PeSIT protocol.\r\nDisable Nagle's algorithm to enhance transfer speed or enable it to reduce overhead of the transferred packet data."
          },
          "enableCftComptatibility" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "When you select this option, B2Bi aligns the PeSIT record size on TLS packets.\r\nThis is the only method handled by Axway Transfer CFT before version 3.0,\r\nand is the default method for the Axway products Gateway and Interpel."
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you select this option, the trading engine verifies that the name of the server\r\nis the same as the name in the server's certificate. This requires that you import\r\nthe server certificate chain in the community's personal certificates and then select\r\nthe option <i>Trust this for SSL server and/or client authentication</i>.\r\nThe trading engine automatically adds the root certificate to the linked community's\r\ntrusted SSLroot certificates."
          },
          "fileName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "File name (PI12) - Name of the file, forced to uppercase at runtime. Often, the real name of the file is shipped\r\nin File label (customFileName)."
          },
          "fileType" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The file type (PI11), which is used by some monitors. The default value is 0."
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The IP address or the network name of the back-end PeSIT server to poll. This must be the fully\r\nqualified domain name or IP address of the PeSIT server"
          },
          "kbPerSyncPoint" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Intervals between sync points (Kbytes): Each time an amount of data equal to this value has been sent, the\r\nclient is expected to ask the server to confirm whether data totaling this value has been received. This represents\r\na check point in the progress of a file transfer. If a connection is lost before a file transfer has been\r\ncompleted, the transfer resumes, upon restart of the transport, at the point of the last successful check point.\r\nThe default value is 1024 kilobytes (1 megabyte).\r\nThis setting corresponds to the pacing setting in Axway Transfer CFT."
          },
          "maxOutstandingSyncPoints" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Sync acknowledgement window: The number of check-point cycles that the client waits for the server to respond\r\nto a request to confirm file-transfer progress. For example, if the value of Kb per sync point (pacing) is 1024\r\n(1 megabyte) and the value of this field is 1, the client stops sending data after 1024 kilobytes unless the\r\nserver responds, although the transfer remains active.\r\nIf this value is 2, the client keeps sending until 2 megabytes (1024 x 2) of data  are sent, and so on.\r\nIf the client's value for this field is 0 (zero), the client does not ask the server to confirm at intervals the\r\namount of data received.\r\nIf the server's value for this field is 0, the server does not send confirmations at intervals of data received.\r\nThe default value is 3. In most situation this is the correct value.\r\nThis setting corresponds to chkw setting in Axway Transfer CFT."
          },
          "networkTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "PeSIT Tr timeout. The time the caller waits for an expected and effective network disconnection, before forcing\r\nit."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Optionally, set to true in order to override the default cipher suites.  <p/>"
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The Port on which the back-end PeSIT server listens."
          },
          "priority" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Priority (PI17) - Select an option:  <ul>\r\n<li>HIGH\r\nHighest priority</li>\r\n<li>MEDIUM\r\nDefault</li>\r\n<li>LOW\r\nLowest priority</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_pesitPriority"
          },
          "protocolTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "PeSIT Tp timeout. The time the caller waits for the response of the remote, in the middle of a protocol action\r\n(such as a transfer)."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the\r\nconnection."
          },
          "remotePesitExchangePointId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select the partner delivery exchange / application delivery, if any are available. When used, caller and server\r\nidentifications are automatically filled on the trading side.</br>\r\n<b>Note:</b> Only Pesit exchanges from partners on same community with this exchange are allowed</br>\r\n<b>Note:</b> On integration, an application delivery on same community can be selected,\r\nor for special use (for example, 3rd party monitoring), another one can be used too."
          },
          "serverIdentification" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Holds the partner server's protocol identity (PI4) and password requirements. </br>\r\n<b>Note:</b> This field is automatically filled on trading part",
            "$ref" : "#/definitions/xml_ns0_pesitIdentificationBean"
          },
          "serviceParam" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Free text (PI99), often used to transfer metadata."
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option If the backend server is configured to transfer over SSL/TLS.\r\nYou must import the root certificate of the remote server to the community trusted SSL root certificates."
          },
          "transferTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "PeSIT Td timeout. The time the caller keeps the connection open, waiting for another message to send."
          }
        }
      } ],
      "description" : ""
    },
    "json_OftpV2ConsumerExchangePointBean" : {
      "title" : "OftpV2ConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_OftpConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_UsernamePasswordCredentialsBean" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string",
          "description" : "user name used in basic authentication"
        },
        "password" : {
          "type" : "string",
          "description" : "password for the user"
        }
      },
      "title" : "UsernamePasswordCredentialsBean",
      "description" : "Bean used in basic authentication"
    },
    "json_SyntaxRule" : {
      "type" : "string",
      "title" : "SyntaxRule",
      "description" : "",
      "enum" : [ "ANA", "ANAA" ]
    },
    "json_WSUserBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "user" : {
          "type" : "string",
          "description" : "The username of this Web Services user. Once the user is created, the username cannot be changed."
        },
        "password" : {
          "type" : "string",
          "description" : "The password of this Web Services user."
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "The status of this user."
        },
        "policy" : {
          "type" : "string",
          "description" : "The password policy assigned to this user."
        }
      },
      "title" : "WSUserBean",
      "description" : ""
    },
    "xml_ns0_isdnClientNetworkSettingsBean" : {
      "title" : "isdnClientNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_isdnNetworkSettingsBean"
      }, {
        "properties" : {
          "callUserData" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This value is passed to the X.25 connection request.\r\nDepending on the configuration on the partner’s side,\r\nthis may be used to select the software responsible for answering the call."
          },
          "localNUA" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The X.25 address identifying the caller (the instance of the trading engine).\r\nComplete this field if the call is routed over an X.25 network that requires\r\nit or if the remote partner uses X.25 access control based on the originating address."
          },
          "localNumber" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ISDN number identifying the caller (the instance of the trading engine).\r\nDepending on the telecom operator’s configuration, you must set this to your number\r\nor let the telecom equipment fill it in for you."
          },
          "remoteNUA" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The X.121 address of the partner if the call is to be routed over X.25.\r\nIf the call is established directly to the partner’s ISDN number,\r\nthis number may be optional depending on its access control configuration."
          },
          "remoteNumber" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "For ISDN, the partner’s ISDN number. If prefixes are required to access an external\r\nline or an international number, include those in the number."
          },
          "x25PacketSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The size of the X.25 packets to be sent over the network.\r\nIf the value is blank the network’s default value is used."
          },
          "x25WindowSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The number of X.25 packets that can be sent without acknowledgment.\r\nIf the value is blank the network’s default value is used."
          }
        }
      } ],
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "json_InHouseOutboundAgreementBean" : {
      "title" : "InHouseOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_InHouseAgreementBean"
      }, {
        "properties" : {
          "enveloperId" : {
            "type" : "string",
            "description" : "The ID of the service to be used for enveloping outbound In-House documents."
          },
          "enveloper" : {
            "type" : "string",
            "description" : "Reference to an enveloper registry object."
          },
          "testFlag" : {
            "type" : "boolean",
            "description" : "Set this field to true if the agreement is for testing and not for production."
          }
        }
      } ],
      "description" : ""
    },
    "json_Throwable" : {
      "type" : "object",
      "properties" : {
        "cause" : {
          "description" : "",
          "$ref" : "#/definitions/json_Throwable"
        },
        "suppressed" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_Throwable"
            }
          }
        },
        "stackTrace" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_StackTraceElement"
            }
          }
        },
        "localizedMessage" : {
          "type" : "string",
          "description" : ""
        },
        "message" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "Throwable",
      "description" : ""
    },
    "json_X509CertificateInfoBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "certificateType" : {
          "description" : "Certificate type: <p/> <ul>\r\n<li>ROOT_CA</li>\r\n<li>INTERMEDIARY</li>\r\n<li>END_ENTITY</li>\r\n<li>SELF_SIGNED</li>\r\n</ul><p/>",
          "$ref" : "#/definitions/json_CertificateType"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "A user-defined name for a certificate.  <p/>\r\nNaming the certificate can help identify the community or partner it belongs to."
        },
        "issuer" : {
          "type" : "string",
          "description" : "The name of the person or entity that issued the certificate.<p/>"
        },
        "issuerUniqueId" : {
          "type" : "string",
          "description" : "Gets the <code>issuerUniqueID</code> value from the certificate.\r\nThe issuer unique identifier is present in the certificate\r\nto handle the possibility of reuse of issuer names over time. <p/>"
        },
        "keyUsage" : {
          "type" : "string",
          "description" : "Identifies the purpose of the key in the certificate, such as encipherment, digital signature or certificate signing. <p/>"
        },
        "md5Fingerprint" : {
          "type" : "string",
          "description" : "Fingerprints are a way to verify the source of a certificate. After you import or export a certificate, you can\r\ncontact your partner and ensure the MD5 fingerprints at both ends are identical. Do this before attempting to\r\nexchange documents. If the fingerprints do not match, one of the certificates might be corrupted or out of date. <p/>"
        },
        "metadata" : {
          "description" : "Metadata for this certificate. <p/>",
          "$ref" : "#/definitions/json_MapType"
        },
        "publicKey" : {
          "type" : "string",
          "description" : "Public key which is used to encrypt messages before sending. <p/>"
        },
        "publicKeyAlgorithm" : {
          "type" : "string",
          "description" : "An algorithm identifier that specifies the public key crypto system this key belongs to and any associated key parameters, such as key length <p/>"
        },
        "publicKeyExtensions" : {
          "type" : "array",
          "description" : "Extensions used to store additional information regarding the certificate holder and to define certificate usage. <p/>",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "publicKeyLength" : {
          "type" : "number",
          "description" : "Key length indicates encryption strength, the larger the number the stronger the key. <p/>"
        },
        "selfSigned" : {
          "type" : "boolean",
          "description" : "Self-signed certificates are easily created. The primary disadvantage is lack of\r\nverification by a trusted third party."
        },
        "serialNumber" : {
          "type" : "string",
          "description" : "The serial number uniquely identifies the certificate.  <p/>\r\nThe CA or entity that issued the certificate assigned this number. <p/>\r\nIf the issuer revokes a certificate, it can place the serial number on a certificate revocation (CRL) list."
        },
        "sha1Fingerprint" : {
          "type" : "string",
          "description" : "Fingerprints are a way to verify the source of a certificate. After you import or export a certificate, you can\r\ncontact your partner and ensure the SHA1 fingerprints at both ends are identical. Do this before attempting to\r\nexchange documents. If the fingerprints do not match, one of the certificates might be corrupted or out of date. <p/>"
        },
        "signatureAlgorithm" : {
          "type" : "string",
          "description" : "The algorithm the CA used to sign the certificate. <p/>"
        },
        "certificateState" : {
          "description" : "Indicates whether the certificate can be used. Valid states are: <p/> <ul>\r\n<li>PENDING</li>\r\n<li>OPERATIONAL</li>\r\n<li>EXPIRED</li>\r\n<li>FAILED</li>\r\n<li>REVOKED</li>\r\n<li>UNKNOWN</li>\r\n</ul>",
          "$ref" : "#/definitions/json_CertificateState"
        },
        "subject" : {
          "type" : "string",
          "description" : "The name of person or entity who was issued the certificate. <p/>"
        },
        "subjectUniqueId" : {
          "type" : "string",
          "description" : "The subject key identifier extension provides a means of identifying\r\ncertificates that contain a particular public key."
        },
        "certificateUsage" : {
          "description" : "Describes the functions that the certificate can perform. The intended usage does not mean the certificate is\r\nbeing used for that purpose, only that it can be used for it. <p/> <ul>\r\n<li>ENCRYPTION</li>\r\n<li>VERIFICATION</li>\r\n<li>ANY</li>\r\n<li>OTHER</li>\r\n<li>NON_REPUDIATION</li>\r\n<li>DIGITAL_SIGNATURE</li>\r\n</ul>",
          "$ref" : "#/definitions/json_CertificateUsage"
        },
        "validFrom" : {
          "type" : "number",
          "description" : "The date the certificate became valid. <p/>"
        },
        "validTo" : {
          "type" : "number",
          "description" : "The date the certificate expires, provided it is not compromised or revoked before that date. <p/>"
        },
        "x509Version" : {
          "type" : "number",
          "description" : "The version of the X.509 standard that applies to the certificate <p/>"
        },
        "issuerInfo" : {
          "type" : "string",
          "description" : "The issuer of this certificate. <p/>"
        }
      },
      "title" : "X509CertificateInfoBean",
      "description" : ""
    },
    "xml_ns0_documentServiceBean" : {
      "title" : "documentServiceBean",
      "allOf" : [ {
        "properties" : {
          "componentId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the Component which provides the initial processing of the Service."
          },
          "deliveryMethod" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The delivery method for this service. You can use one of the following values:\r\n<ul>\r\n<li><b>DELIVER_TO_PARTNER</b> </br> Select this option if the message is to be sent to a trading partner. This option is\r\nthe default setting for the following document formats: MEC XML, XML, In-house and IDoc.</li>\r\n<li><b>RETURN_TO_SENDER</b> </br> Select this option if you are creating a service to support Web Services or MLLP trading,\r\nand the service requires a return exchange to the originating party.</li>\r\n<li><b>DELIVER_TO_APPLICATION</b> </br> Select this option if the delivery endpoint of the document exchange is a back-end\r\napplication. This option is the default setting for the following document formats: EDIFACT, X12, VDA and\r\nTRADACOMS. If you select this option, you must also provide the target application for the document delivery.</li>\r\n<li><b>CONTINUE_TO_NEXT_STEP</b> </br> Select this option if the message is to be sent to the next content-based\r\nprocessing after the processing steps specified in the service have been executed.</br>\r\n<b>Note:</b> This option is for metadata services only. </li>\r\n</ul>\r\nThe delivery method is set on the Document Service only if the initial component or the post detection component\r\n(for Partner Document Services) has no outputs.\r\nOtherwise, the delivery method is set individually on each output.",
            "$ref" : "#/definitions/xml_ns0_deliveryMethod"
          },
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether this service is enabled."
          },
          "exchangePointId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the application delivery used when DELIVER_TO_APPLICATION delivery method is selected."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique ID of this service."
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of this service."
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_VdaAgreementBean" : {
      "title" : "VdaAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, {
        "properties" : {
          "senderIdentification" : {
            "type" : "string",
            "description" : "The \"Partner Code\" identification defined in the sender's Messaging ID. </br> This is a read-only field."
          },
          "receiverIdentification" : {
            "type" : "string",
            "description" : "The \"Partner Code\" identification defined in the receiver's Messaging ID. </br> This is a read-only field."
          },
          "senderVdaRole" : {
            "description" : "The VDA role of the sending partner.",
            "$ref" : "#/definitions/json_VdaRole"
          },
          "receiverVdaRole" : {
            "description" : "The VDA role of the receiving partner. </br> This is a read-only field.",
            "$ref" : "#/definitions/json_VdaRole"
          }
        }
      } ],
      "description" : ""
    },
    "json_Exception" : {
      "title" : "Exception",
      "allOf" : [ {
        "$ref" : "#/definitions/json_Throwable"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_AS4HttpConsumerExchangePointBean" : {
      "title" : "AS4HttpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "deliveryId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the AS4 Delivery Exchange to poll."
          },
          "generateReceipt" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Generate receipt."
          },
          "groupAttachments" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Group Attachments - Select this option to enable the consumed message to be split into parent and dependent\r\nchild messages."
          },
          "mpc" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "MPC of the AS4 Delivery Exchange to poll. This is a read-only field."
          },
          "mpcOverride" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "MPC value to override the MPC defined in the AS4 Delivery Exchange."
          },
          "partnerId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the Partner owning the AS4 Delivery Exchange to poll. This is a read-only field."
          },
          "shouldIntegrateAttachments" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Process Attachments - Select this option to process the attachments of the SOAP message."
          },
          "shouldIntegrateBody" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Process SOAP Body - Select this option to process the contents of the SOAP body."
          },
          "shouldParseMetadataFromHeader" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Parse SOAP headers into message metadata - Select this option if you want to SOAP headers to be carried as\r\nmetadata attributes with the message."
          },
          "xpaths" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If shouldParseMetadataFromHeader is selected, enter the XPath expressions to resolve the header."
          }
        }
      } ],
      "description" : ""
    },
    "json_DeliverySettingsBean" : {
      "title" : "DeliverySettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_IntegrationDeliverySettingsBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_jmsProducerExchangePointBean" : {
      "title" : "jmsProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "jmsCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password for the JMS provider. The user name and password can be the same as your JNDI user name\r\nand password. This depends on your JMS provider and how it is configured.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          },
          "jmsMessageType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The JMS message class. You can select one of the following two options:\r\n<ul><li>BYTES - a <code>BytesMessage</code> object is used to send a message containing a stream of\r\nuninterrupted bytes. It inherits from the Message interface and adds a bytes message body.</li>\r\n<li>TEXT - a <code>TextMessage</code> object is used to send a message containing a\r\n<code>java.lang.String</code>. It inherits from the Message interface and adds a text message body.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_messageType"
          },
          "jmsQueue" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the queue. <p/>\r\nExample: <code>XMLQueue@router1</code>."
          },
          "jmsQueueConnFactory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The connection factory as defined within the JMS provider. This value can be either in the form\r\n<code>factoryname@routername</code> or the JNDI public symbol for the QueueConnectionFactory. This\r\ndepends on your JMS provider and how it is configured.\r\nExamples: <code>plainsocket@router1</code> or <code>QueueConnectionFactory22</code>."
          },
          "jndiCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password for the JNDI provider. The user name and password could be blank and are typically provided\r\nin the JNDI URL. This depends on the JNDI provider and how it is configured.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          },
          "jndiFactory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the JNDI service provider class. Example: <code>com.swiftmq.jndi.InitialContextFactoryImpl</code>."
          },
          "jndiUrl" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The network URL used to obtain access to the JNDI service provider for your JMS service.\r\nExample: <code>smqp://localhost:4001/timeout=10000</code>."
          },
          "overflowDir" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Path to payload files."
          },
          "overflowLimit" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The size in bytes representing the lower limit over which payloads should be passed via the file system."
          },
          "queueUtilClass" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the Java class for implementing the connection to the message queue.\r\nA Java class for Oracle AQ is available. The class name is:\r\n<code>com.cyclonecommerce.tradingengine.transport.jms.OracleAQQueueUtil</code>.\r\nIf you want a Java class for a provider other than Oracle AQ, you need the help of a\r\nprofessional services consultant."
          },
          "queueUtilParameters" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "There are four parameters required for the Java class for Oracle AQ. These parameters must be in the following order:\r\n<ol><li>Host - the name of the computer running Oracle AQ</li>\r\n<li>Database name - the name of the database that contains the message queue</li>\r\n<li>Port - the port Oracle AQ uses to listen for messages</li>\r\n<li>Driver type - the type of JDBC driver for connecting to the provider. For Oracle AQ, the valid values are\r\n<code>thin</code> and <code>oci8</code></li><ol/>"
          },
          "sendPayloadViaFilesystem" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether payloads should be sent by a file system. You can specify the size of payloads to send and the\r\npath for payload files. The receiver uses the path to retrieve the files."
          },
          "useJndi" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the JMS provider requires a Java Naming and Directory Interface (JNDI) implementation.\r\nFor example, Oracle Advanced Queuing facility (Oracle AQ) does not use a JNDI provider."
          },
          "useTransactedQueue" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the JMS provider is Oracle AQ."
          }
        }
      } ],
      "description" : ""
    },
    "json_MetadataTemplateConsumptionPropertiesBean" : {
      "type" : "object",
      "properties" : {
        "defaultMetadataTemplate" : {
          "type" : "string",
          "description" : "A reference to a metadata template in the system, that is applied when a message is received. If the\r\nmetadata template isn't anymore in the system, we just log a warn a message."
        },
        "enabledByProtocol" : {
          "type" : "boolean",
          "description" : "Indicates if the exchange point supports metadata template passed through the protocol."
        },
        "priorityOverFixedAttributes" : {
          "type" : "boolean",
          "description" : "Indicates if the metadata template has priority than the fixed message attributes. In case the metadata\r\ntemplate has priority then we first apply the metadata defined in the message attributes then we apply the\r\nmetadata template ones (if there's a conflict between the same metadata, the metadata template one\r\nwins) and vice versa."
        },
        "metadataTemplatePolicy" : {
          "description" : "This option is available only for OFTP and PeSIT exchanges. You can specify the template name in the file name of the message\r\nsubmitted by the sender or by the setting <i>defaultMetadataTemplate</i> property</br>\r\nIndicates the way to deal with metadata template, it allows 3 values :\r\n<ul>\r\n<li><b>always</b> : Apply MMT provided by protocol. If unknown, the transfer is refused.</li>\r\n<li><b>ifKnown</b> : Apply MMT provided by protocol if it is known, else apply the default MMT (if set).</li>\r\n<li><b>never</b> : Ignore the MMT provided by the protocol. Always apply the default MMT (if set).</li>\r\n</ul>",
          "$ref" : "#/definitions/json_MetadataTemplatePolicy"
        }
      },
      "title" : "MetadataTemplateConsumptionPropertiesBean",
      "description" : "Settings to attach meta-data to the messages the trading engine picks up from applications or receives from partner"
    },
    "json_InlineProcessorBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "className" : {
          "type" : "string",
          "description" : "User defined java class"
        },
        "parameters" : {
          "type" : "string",
          "description" : "Parameters for user defined java class"
        },
        "description" : {
          "type" : "string",
          "description" : "Documentation for this user defined functionality"
        }
      },
      "title" : "InlineProcessorBean",
      "description" : "The extensible architecture of the trading engine enables system integrators to apply custom logic to in-process messages\r\nas an integral part of the processing pipeline. You can selectively apply the custom processing logic to inbound or outbound\r\nmessages at runtime, implemented as a user-defined Java class ."
    },
    "xml_ns0_versionInfo" : {
      "title" : "versionInfo",
      "allOf" : [ {
        "properties" : {
          "versionProperties" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Retrieves the version information of all the components.",
            "$ref" : "#/definitions/xml_ns0_mapType"
          }
        }
      }, { } ],
      "description" : "A bean that holds information about the various application components and each components specific version/build number"
    },
    "xml_ns0_nachaAgreementBean" : {
      "title" : "nachaAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_agreementBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_ackEnvelopingMode" : {
      "type" : "string",
      "title" : "ackEnvelopingMode",
      "description" : "",
      "enum" : [ "DEFAULT", "OUTBOUND_AGREEMENT" ]
    },
    "json_Level" : {
      "type" : "string",
      "title" : "Level",
      "description" : "",
      "enum" : [ "ERROR", "WARN", "INFO" ]
    },
    "json_PrivateKeyCredentialsBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "username" : {
          "type" : "string",
          "description" : "Key alias"
        },
        "password" : {
          "type" : "string",
          "description" : "Password key"
        },
        "encodedClientPrivateKey" : {
          "type" : "string",
          "description" : "Base64 encoded key"
        }
      },
      "title" : "PrivateKeyCredentialsBean",
      "description" : "Private key credential used in PKI mechanism"
    },
    "json_AbstractPasswordInfoException" : {
      "title" : "AbstractPasswordInfoException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ApiException"
      }, { } ],
      "description" : "Use this class to show information about the password policies"
    },
    "json_X25ServerNetworkSettingsBean" : {
      "title" : "X25ServerNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_X25NetworkSettingsBean"
      }, {
        "properties" : {
          "localNUA" : {
            "type" : "string",
            "description" : "The Server network user address to wait for an incoming call via OFTP V1 X.25"
          },
          "localPort" : {
            "type" : "number",
            "description" : "For each inbound X.25 connection the X.25 router uses the recall port to make a TCP connection\r\nto a trading engine processing node. If the recall port value is 0 or blank, the trading engine server,\r\nupon startup, selects a port at random. If there is a firewall between the trading engine and the router,\r\nadd this port as an exception in the firewall."
          }
        }
      } ],
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "json_MqSegmentationType" : {
      "type" : "string",
      "title" : "MqSegmentationType",
      "description" : "",
      "enum" : [ "MQ", "APPLICATION" ]
    },
    "xml_ns0_ftpConsumerExchangePointBean" : {
      "title" : "ftpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "applyNegativeFiltering" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive, only files matching the pattern are consumed. If set to true it is exclusive,\r\nfiles matching the pattern are ignored, but all other files are consumed.  <p/>"
          },
          "attemptRestarts" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Indicates whether the system resumes transferring large files at the interruption point, when a connection is lost\r\nbefore a transfer is completed. If selected, the system resumes the processing of files that are at least as\r\nlarge as specified in the restartable minimum bytes field. This checkpoint-restart feature is worthwhile only for\r\nlarge documents. If this option is not used, the system starts a file transfer over when processing is interrupted. <p/>"
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "List of cipher suites to be used. <p/>"
          },
          "commandSetConfigPath" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The FTP command set file controls the commands sent to the FTP server for operations such as send, receive, delete.\r\nThe default command set file is ftpcommandset.xml. This field lets you specify a different command set file.  Changing\r\nthis is only for advanced FTP users with specialized needs. The  field value is the name of an entry in\r\nfilereg.xml in [install directory]\\conf that points to another file in the conf directory. <p/>"
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits for a connection to the delivery exchange before the attempt times out.\r\nAlthough the default value is 30 seconds, this may be longer than the interval allowed by your operating\r\nsystem (OS) . The actual connect timeout interval is the lesser of the OS timeout and the value set in the trading\r\nengine.  <p/>"
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this if you want the server to delete files after they have been downloaded from it. This option should be\r\nenabled in most cases. If an external server automatically deletes files that have been downloaded, deselect this\r\noption.  <p/>"
          },
          "enableFiltering" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names.  <p/>"
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable if you use host-based authentication with a Linux SFTP server. <p/>"
          },
          "fileCollisionMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Defines the use of temporary files to avoid read/write collisions. It is recommended to use\r\nUSE_TEMP_FILES_WITH_INBOX or USE_TEMP_FILE_EXTENSION to prevent the trading engine from attempting to retrieve\r\npartially written files. <p/><ul>\r\n<li>USE_USE_NONE <p/>\r\nTemporary files will not be used in order to avoid read/write collisions. </li>\r\n<p/>\r\n<li>USE_TEMP_FILES_WITH_INBOX <p/>\r\nUse separate directory for temporary files. When receiving files from a partner, we recommend that your partner\r\nwrite files to the inbox directory first and then move them to the pickup directory when they are ready to be\r\nretrieved. This process is automatic if your partner also uses Axway products B2Bi, Interchange or Activator.\r\nIf the partner uses other software to upload files to your server, the software should be configured to initially\r\nupload the files to the inbox directory and move them to the pickup directory when they are ready to be retrieved.\r\nThe trading engine writes to the inbox and then moves the message to the pickup directory. </li>\r\n<p/>\r\n<li>USE_TEMP_FILE_EXTENSION\t<p/>\r\nUse special extension in pickup directory for temporary files. If you prefer not to\r\nuse an inbox, select this option. While a file is being written to the pickup directory, a\r\ntemporary extension is added so the system knows not to retrieve it because the file is only\r\npartially written. Once fully written, the temporary extension goes away and the file can be\r\nretrieved. </li>\r\n<p/></ul>",
            "$ref" : "#/definitions/xml_ns0_ftpCollisionMode"
          },
          "filterPattern" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Insert the format of the file names you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names or\r\nextensions or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file-name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>"
          },
          "ftpProcessingMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set the mode how the files are poll from the FTP server.",
            "$ref" : "#/definitions/xml_ns0_ftpProcessingMode"
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the FTP server. <p/>"
          },
          "implicitSsl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use implicit SSL. Select this if you want to use implicit SSL rather than explicit SSL, which is the default mode.\r\nFTP supports two methods to accomplish security through a sequence of commands passed between two computers.\r\nThe sequence is initiated with explicit (active) or implicit (passive) security. <p/><ul>\r\n<li> Explicit security. To establish the SSL link, explicit security requires the FTP client to issue a specific\r\ncommand to the FTP server after establishing a connection. The default FTP server  port is used.</li>\r\n<li> Implicit security. Implicit security begins with an SSL connection as soon as the FTP client connects to an\r\nFTP server. The FTP server defines a specific port for the client to be used for secure connections. </li>\r\n<p/></ul>"
          },
          "inboxPath" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Type the full path of an inbox directory (for example, c:\\data\\inbox). Files are uploaded to this directory.\r\nWhen fully written, files are moved to the pickup directory for retrieval. <p/>"
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This value specifies the maximum number of messages to be consumed over a single connection before the connection\r\nis closed and reopened on another processing node. As such, this setting effectively controls load balancing. The\r\ndefault setting of 1 achieves optimal load balancing at the cost of greater overhead per message. Depending on your\r\nmessage volume and the load on each node, this value could be increased to avoid the overhead associated with\r\nreconnecting to the transport server, at the cost  of a less well-balanced cluster."
          },
          "metadataHierarchy" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "You can use metadata hierarchy to avoid file name collisions by selecting message attributes that correspond to\r\nthe names of subdirectories. Each item added represents another subdirectory level. For example, add\r\n\"From routing ID\" and \"To routing ID\" to the selected attributes list in that order. Then, place a message in a\r\nsubdirectory named \"ABC/DEF\". The message will be assigned a \"From routing ID\" attribute set to \"ABC\" and a \"To\r\nrouting ID\" set to \"DEF\".  <p/>"
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Optionally, set to true in order to override the default cipher suites.  <p/>"
          },
          "passive" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If set to true, files are transmitted using passive mode. In this mode, during the connection, the server\r\nspecifies the port it will listen to for the data connection. If set to false, files are transmitted using\r\nactive mode.  <p/>"
          },
          "pickupDirectory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The path of the directory on your server where messages are picked up. When the trading engine polls the\r\nserver for files, it only looks in the pickup directory, not in an inbox directory. <p/>"
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port on which the server listens for incoming connections. The default is 21. <p/>"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection.\r\nThe default is 30 seconds.  <p/>"
          },
          "restartableMinKiloBytes" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If attempt restarts is selected, the minimum size of a file that triggers the system to continue the file transfer\r\nat the point interrupted before the connection was lost. The minimum size is in megabytes. The system only resumes\r\ntransfers of files that meet this minimum. The system starts over the transfer of smaller files whose processing is\r\ninterrupted. <p/>"
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Value of sequence timeout in seconds. <p/>"
          },
          "sequenced" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this option to true if you want all messages that are consumed by this pickup to be delivered in their\r\noriginal consumption order. <p/>"
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you must connect to this server using SSL.<p/>"
          },
          "tempFileExtension" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Used when File Collision Mode is set to USE_TEMP_FILE_EXTENSION. Specify a temporary extension to be added to the\r\nfile while it is being written to the pickup directory. Once fully written, the temporary extension goes away and\r\nthe file can be retrieved. <p/>"
          },
          "tempFileHoursToLive" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If attempt restarts is selected, how long the system retains a file whose transfer has been interrupted while\r\nwaiting for the connection to be restored. This temporary file enables the system to resume the transfer at the\r\npoint interrupted. <p/>"
          },
          "transferType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select the format of the files that are transmitted over this delivery: <p/><ul>\r\n<li>ASCII_AUTO_LF <p/>\r\nASCII - automatic line ending</li>\r\n<p/>\r\n<li>ASCII_CR_LF <p/>\r\nASCII - user CR/LF</li>\r\n<p/>\r\n<li>ASCII_CR_ONLY <p/>\r\nASCII - use CR only\r\n</li>\r\n<p/>\r\n<li>BINARY <p/>\r\nBinary (default). In most cases, use binary mode. Always trade packaged files (for example, AS2,\r\nAS3, Secure file) in binary mode.<p/>\r\n</li>\r\n<p/>\r\n</ul>\r\nIf the receiver requires a particular line-ender, select an ASCII option to have the trading engine translate\r\nthe line-ender based on what is required by the back-end system. The FTP specification requires the sender to\r\nalways use CRLF as the line-ender when transmitting files in ASCII mode. It is up to the receiver to translate\r\nthe line-ender to something else if desired. <p/>",
            "$ref" : "#/definitions/xml_ns0_ftpType"
          },
          "userCommands" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enter user commands such as SITE to be sent to the server after login. <p/>\r\nCommands must be entered in the exact case and format expected by the server. Consult RFC 959 for a list of standard\r\nFTP commands.  You can use FTP commands that do not make use of the FTP data connection. Commands that make use\r\nof the FTP data connection are not supported. <p/>\r\nIf any command fails, the remaining commands are not executed, and production to the FTP server fails. To avoid\r\npossible failures, preface any command with an \"at\" sign (@) to indicate that errors from that command should be\r\nignored, for example, \"@MKD test\". Preface any command with an asterisk to cause the entire line to be treated as\r\na comment, for example, \"*Create test directory\".  <p/>"
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The username and the password required to connect to the server.  <p/>",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "json_PesitPriority" : {
      "type" : "string",
      "title" : "PesitPriority",
      "description" : "",
      "enum" : [ "LOW", "MEDIUM", "HIGH" ]
    },
    "xml_ns0_privateKeyCredentialsBean" : {
      "title" : "privateKeyCredentialsBean",
      "allOf" : [ {
        "properties" : {
          "encodedClientPrivateKey" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Base64 encoded key"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Private key Id"
          },
          "password" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Password key"
          },
          "username" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Key alias"
          }
        }
      }, { } ],
      "description" : "Private key credential used in PKI mechanism"
    },
    "json_ConsumerExchangePointBean" : {
      "title" : "ConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ExchangePointBean"
      }, {
        "properties" : {
          "metadataFixedItems" : {
            "description" : "Assign fixed values to message attributes.",
            "$ref" : "#/definitions/json_MapType"
          },
          "restrictConsumableFileSize" : {
            "type" : "boolean",
            "description" : "Restrict the maximum file size supported for this transport."
          },
          "maxConsumableFileSize" : {
            "type" : "number",
            "description" : "Maximum file size (bytes)."
          },
          "metatadaTemplate" : {
            "description" : "The default message attributes template to apply to this exchange point.",
            "$ref" : "#/definitions/json_MetadataTemplateConsumptionPropertiesBean"
          },
          "addressingRules" : {
            "type" : "string",
            "description" : "Used to configure how the system determines who is sending/receiving the message."
          },
          "useCommunityMessageDelivery" : {
            "type" : "boolean",
            "description" : "Apply the community collaboration settings to the messages that are consumed by this pickup."
          },
          "shouldOverrideDirection" : {
            "type" : "boolean",
            "description" : "Validate that the direction should be overridden"
          },
          "overrideDirection" : {
            "type" : "string",
            "description" : "Return the override direction if the setting is to override"
          },
          "ediSplitterEnabled" : {
            "type" : "boolean",
            "description" : "The EDI splitter breaks apart documents containing more than one interchange into separate documents.\r\nThe splitter supports the X12, EDIFACT and TRADACOMS formats."
          },
          "useContentProcessing" : {
            "type" : "boolean",
            "description" : "Select this option if you want to apply processing to the messages you consume using this exchange. If you\r\nselect this option you can then select a service to supply the processing."
          },
          "serviceId" : {
            "type" : "string",
            "description" : "When <b>useContentProcessing</b> is <code>true</code>, specify the ID of the service used to supply the processing."
          },
          "service" : {
            "type" : "string",
            "description" : "Reference to a service object."
          },
          "pickupGroupId" : {
            "type" : "string",
            "description" : "The ID of the pickup group where the exchange point is assigned."
          },
          "pickupGroup" : {
            "type" : "string",
            "description" : "The URI to the pickup group where the exchange point is assigned."
          },
          "pickupGroupStatus" : {
            "type" : "string",
            "description" : "The status of the pickup group where the exchange point is assigned. Can be Allow or Block."
          }
        }
      } ],
      "description" : ""
    },
    "json_DocumentAgreementBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "documentName" : {
          "type" : "string",
          "description" : "Name of the Document Agreement. Once the Document Agreement has been created, the name cannot be\r\nchanged."
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Specifies if this Document Agreement is enabled."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the document you are exchanging with the current agreement."
        },
        "version" : {
          "type" : "string",
          "description" : "The document format you are exchanging with the current agreement."
        },
        "documentFormat" : {
          "type" : "string",
          "description" : "The message standard or format this document is based on. This is the format of the Agreement which\r\nowns this Document Agreement. The field cannot be modified."
        },
        "owningAgreement" : {
          "type" : "string",
          "description" : ""
        },
        "documentServiceId" : {
          "type" : "string",
          "description" : "The ID of the Document Service that specifies the processing for this agreement."
        },
        "processingStep" : {
          "type" : "string",
          "description" : "The name of the initial processing step for the document service"
        },
        "documentAgreementAttributes" : {
          "type" : "string",
          "description" : "List with all attributes for document agreements"
        },
        "documentAgreementAttributesTemplate" : {
          "type" : "string",
          "description" : "List with all template attributes for document agreements"
        },
        "documentService" : {
          "type" : "string",
          "description" : "The Service used on this Document Agreement"
        },
        "outputs" : {
          "type" : "string",
          "description" : "The outputs for this Document Agreement."
        }
      },
      "title" : "DocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_pesitCompressionType" : {
      "type" : "string",
      "title" : "pesitCompressionType",
      "description" : "",
      "enum" : [ "NONE", "HORIZONTAL", "VERTICAL", "BOTH" ]
    },
    "json_OftpServerExchangePointBean" : {
      "title" : "OftpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerExchangePointBean"
      }, {
        "properties" : {
          "SSID" : {
            "type" : "string",
            "description" : "The start session identification (SSID) of the local or remote party. Trading partners exchange SSIDs to identify\r\neach other in the protocol handshake and session setup."
          },
          "protocolVersion" : {
            "description" : "The protocol version being used (1.3 or 1.4 for OFTP V1 and 2.0 for OFTP V2).",
            "$ref" : "#/definitions/json_ProtocolVersion"
          },
          "useSessionPassword" : {
            "type" : "boolean",
            "description" : "Specify whether a password verification is required before establishing the connection.\r\n<p/>\r\nIf this is an exchange for receiving messages from a partner, your community presents this\r\npassword to the partner. The password is compared to the one the partner has stored for your\r\ncommunity.\r\n<p/>\r\nIf this is an exchange for sending messages to a partner, the partner must present this password\r\nto your community. The password is compared to the one your community has stored for the\r\npartner.\r\n<p/>\r\nIn either case, the passwords must match to establish the connection."
          },
          "networkSettings" : {
            "description" : "The network settings for the embedded server referred by this exchange point. The following types are supported:\r\n<ol><li><b>TCP</b>. Transmission Control Protocol is the basic communications protocol of the Internet.</li>\r\n<li>X.25. An ITU-T standard protocol suite for packet-switched wide area network communications.</li>\r\n<li>X.25 over ISDN (B-channel). Integrated Services Digital Network broadband channel\r\nsupports data transfers over telephone networks</li></ol>",
            "$ref" : "#/definitions/json_NetworkSettingsBean"
          },
          "sessionPassword" : {
            "type" : "string",
            "description" : "OFTP session password. If password verification is enabled before establishing a connection, this field is\r\nmandatory. The password can be no longer than eight alphanumeric characters and is case sensitive."
          },
          "creditCounter" : {
            "type" : "number",
            "description" : "The number of consecutive data exchange buffers sent by the speaker before it must wait for a credit (CDT)\r\ncommand from the listener. The credit value is only applied to data flow in the data transfer phase.\r\nThe speaker's available credit is initialized to SSIDCRED when it receives a start file positive answer (SFPA)\r\ncommand from the listener. It is zeroed by the end file (EFID) command. After negotiation, the smallest size must\r\nbe selected in the answer of the responder or a protocol error aborts the session."
          },
          "dataExchangeBuffer" : {
            "type" : "number",
            "description" : "The length in octets of the largest acceptable data exchange buffer. The length includes the command octet,\r\nbut not the stream transmission header. After negotiation, the smallest size is selected. The value in this\r\nfield maps to the SSIDSDEB field in the SSID OFTP protocol command."
          },
          "backendGenerateReceipt" : {
            "type" : "boolean",
            "description" : "Specify whether the trading engine should pause before generating and sending EERPs (signed end-to-end responses)\r\nand NERPs (signed negative end responses). If this option is set to <code>true</code>, the trading engine waits\r\nfor a back-end system to submit messages containing the correct metadata for generating EERPs and NERPs. If this\r\noption is set to <code>false</code>, the trading engine synchronously generates and sends EERPs and NERPs without\r\nwaiting for the back-end system to respond."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "The maximum number of seconds the server waits when reading data from a partner."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_processingMode" : {
      "type" : "string",
      "title" : "processingMode",
      "description" : "",
      "enum" : [ "A", "R", "I", "T" ]
    },
    "json_SftpProducerExchangePointBean" : {
      "title" : "SftpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "encodedHostPublicKey" : {
            "type" : "string",
            "description" : "SSH/SFTP server's public key"
          },
          "host" : {
            "type" : "string",
            "description" : "The name of the SSH/SFTP server."
          },
          "port" : {
            "type" : "number",
            "description" : "The port on which the server listens for incoming connections.\r\nThe default is 22 (embedded SFTP default is for trading 4022/ for application 5022)."
          },
          "pickupDirectory" : {
            "type" : "string",
            "description" : "Path of the directory on your server where messages are\r\npicked up. When the trading engine polls the server for files, it only looks in the pickup\r\ndirectory, not an inbox directory. If connecting to a partner's B2Bi embedded FTP server,\r\nuse mailbox if picking up. Leave the field blank if delivering."
          },
          "passwordAuthentication" : {
            "type" : "boolean",
            "description" : "Whether or not server requires the SFTP client to authenticate using a password"
          },
          "publicKeyAuthentication" : {
            "type" : "boolean",
            "description" : "Whether or not server requires the SFTP client to use public key authentication"
          },
          "hostBasedAuthentication" : {
            "type" : "boolean",
            "description" : "Whether or not server requires the SFTP client to use host based authentication\r\nBy using this mechanism passwords no longer have to be transferred to the untrusted systems</p>\r\n<b>Note: </b> per-user SSH public keys can achieve similar effects; but maintaining\r\nper-user keys could be an unwanted administrative overhead"
          },
          "usernamePasswordCredentials" : {
            "description" : "The user name and its password to connect to the server.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "keyUserName" : {
            "type" : "string",
            "description" : "This user name applies to both public/private key pair and host-based authentication."
          },
          "fileCollisionMode" : {
            "description" : "It is recommended to use this option to prevent the trading engine from attempting to\r\nretrieve partially written files. There may be some specialized servers, typically\r\nrunning on mainframes, that support only part of the FTP protocol (RFC 959).\r\nIn such cases you may have to clear this check box and take steps of your own to make\r\nsure collisions do not occur. If connecting to a partner's Interchange embedded FTP\r\nserver, use <b>None</b>. This property will be ignored if the filename handling is in append mode.</p>\r\nOptions available:</p>\r\n<ul>\r\n<li><b>None</b></>Use this option if the partner's server is an Interchange embedded server. </li>\r\n<li><b>Use temp files with inbox</b><p>Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:\r\nc:\\data\\pickup\\inbox\r\nBut you can use the following because a period is the first character of the inbox directory name:\r\nc:\\data\\pickup\\.inbox</p>When this flag is used, the additional property <b>inboxPath</b> should be set.</li>\r\n<li><b>Use temp file extension</b></p>If you prefer not to use an inbox, select this option.\r\nWhile a file is being written to the pickup directory, a temporary extension is added\r\nso the system knows not to retrieve it because the file is only partially written.\r\nOnce fully written, the temporary extension goes away and the file can be retrieved.\r\n</p>When this flag is used, the additional property <b>tempFileExtension</b> should be set.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_SftpCollisionMode"
          },
          "inboxPath" : {
            "type" : "string",
            "description" : "Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:</br>\r\n&emsp;c:\\data\\pickup\\inbox<br>\r\nBut you can use the following because a period is the first character of the inbox directory name:</br>\r\n&emsp;c:\\data\\pickup\\.inbox"
          },
          "tempFileExtension" : {
            "type" : "string",
            "description" : "If you prefer to not use an inbox, select this option. When a file is being written to the\r\npickup directory, a temporary extension is added so that the system knows not\r\nto retrieve it because the file is only partially written. Once fully written, the\r\ntemporary extension goes away and the file can be retrieved."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection.\r\nThe default is 30 seconds."
          },
          "duplicateFileNameMode" : {
            "description" : "We recommend using this option to prevent the trading engine\r\nfrom attempting to retrieve partially written files.There may be some\r\nspecialized servers, typically running on mainframes, that support\r\nonly part of the FTP protocol (RFC 959). In such cases you may have to\r\ntake steps of your own to make sure collisions do not occur.\r\nFtp Duplicate File Name Options: <ul><li><b>Overwrite</b></p>\r\nIf duplicate file names are detected, the trading engine overwrites the existing file.</li>\r\n<li><b>Auto generate</b></p>Automatically generate unique filenames</li>\r\n<li><b>Append</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>",
            "$ref" : "#/definitions/json_SftpDuplicateFileNameMode"
          },
          "metadataHierarchy" : {
            "type" : "array",
            "description" : "Set message attributes that correspond to the names of subdirectories.\r\nEach item in the selected attributes list represents another subdirectory level.\r\nFor example, add \"From routing ID\" and \"To routing ID\" to the selected attributes\r\nlist in that order. A message with attributes \"From routing ID\" set to \"ABC\"\r\nand \"To routing ID\" set to \"DEF\" would be delivered to the subdirectory ABC/DEF.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "If <b>true</b> a list of cipher suites should be provided."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "List with cipher suites.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "description" : "Select this if you want the server to delete files after they have been downloaded from it. This option should be\r\nenabled in most cases. If an external server automatically deletes files that have been downloaded, deselect this\r\noption.\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "maxBlockSize" : {
            "type" : "number",
            "description" : "The maximum size of the packets that can be downloaded from an external SFTP server by the SFTP client within the trading engine.\r\nThe client downloads messages in a series of data packets. By default the maximum size is 32768  data packet units.\r\nThe default value is compatible with most SFTP servers. But when handling messages of a certain size (2-3 megabytes or larger),\r\nsome servers cannot process many packets of the default size and downloading hangs. If this occurs, reduce the packet size maximum.\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "enableFiltering" : {
            "type" : "boolean",
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "filterPattern" : {
            "type" : "string",
            "description" : "Insert the format of the file names you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names or\r\nextensions or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file-name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "applyNegativeFiltering" : {
            "type" : "boolean",
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive, only files matching the pattern are consumed. If set to true it is exclusive,\r\nfiles matching the pattern are ignored, but all other files are consumed.\r\n<br><b>Note:</b> This field is used only in integration"
          }
        }
      } ],
      "description" : ""
    },
    "json_InHouseInboundAgreementBean" : {
      "title" : "InHouseInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_InHouseAgreementBean"
      }, {
        "properties" : {
          "useTestFlag" : {
            "type" : "boolean",
            "description" : "If true, testFlag will be used for detection / matching."
          },
          "testFlag" : {
            "type" : "boolean",
            "description" : "Set this field to true if the agreement is for testing and not for production."
          },
          "useSenderIdentification" : {
            "type" : "boolean",
            "description" : "Enable sender identification for detection/matching. </br> This is a read-only field."
          },
          "useReceiverIdentification" : {
            "type" : "boolean",
            "description" : "Enable receiver identification for detection/matching. </br> This is a read-only field."
          },
          "documentAgreements" : {
            "type" : "string",
            "description" : "List with all document agreements for current agreement"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_errorMessage" : {
      "title" : "errorMessage",
      "allOf" : [ {
        "properties" : {
          "status" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "String representation of the HTTP status code returned for this error",
            "$ref" : "#/definitions/xml_ns0_status"
          }
        }
      }, { } ],
      "description" : "This object will be returned whenever an error occurs in the server and a NON HTTP success(20x)\r\nstatus code is returned."
    },
    "xml_ns0_pickupGroupStatus" : {
      "type" : "string",
      "title" : "pickupGroupStatus",
      "description" : "",
      "enum" : [ "Allow", "Block" ]
    },
    "json_ErrorMessage" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "String representation of the HTTP status code returned for this error",
          "$ref" : "#/definitions/json_Status_Response"
        },
        "responseMessage" : {
          "description" : "The message code that maps to the resource file to get the message description from.",
          "$ref" : "#/definitions/json_ResponseMessage"
        },
        "description" : {
          "type" : "string",
          "description" : "Detailed description of the error.  This description is loaded from the resource file."
        },
        "trace" : {
          "type" : "string",
          "description" : "An optional field that provides a stack trace from the server of the internal error.  This\r\nfield will only be populated if debug logging is enabled."
        }
      },
      "title" : "ErrorMessage",
      "description" : "This object will be returned whenever an error occurs in the server and a NON HTTP success(20x)\r\nstatus code is returned."
    },
    "xml_ns0_attributeValueBean" : {
      "title" : "attributeValueBean",
      "allOf" : [ {
        "properties" : {
          "clearedAtRuntime" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this attribute to true in order to clear it from documents at runtime."
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A name for this attribute to identify it.</br> <b>Note:</b> it is read only"
          },
          "usedForProcessing" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If true, this attribute is used for processing at runtime.</br> <b>Note:</b> it is read only"
          },
          "usedForSearching" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If true, this attribute is used for searching at runtime.</br> <b>Note:</b> it is read only"
          },
          "values" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set the value/values in case of MULTISELECT."
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_PasswordChangeBean" : {
      "type" : "object",
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "PasswordChangeBean",
      "description" : ""
    },
    "json_ExchangePointScheduleBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "dayOfWeek" : {
          "type" : "number",
          "description" : "A day between 1-7 to activate this schedule"
        },
        "startHour" : {
          "type" : "number",
          "description" : "An hour for starting this schedule. Between 0-23"
        },
        "startMinute" : {
          "type" : "number",
          "description" : "A minute for starting this schedule. Between 0-59"
        },
        "endMinute" : {
          "type" : "number",
          "description" : "A minute for stopping this schedule. Between 0-59"
        },
        "endHour" : {
          "type" : "number",
          "description" : "An hour for stopping this schedule. Between 0-23"
        }
      },
      "title" : "ExchangePointScheduleBean",
      "description" : "Used to set times for making a pickup or delivery exchange inactive while keeping the transport in an enabled state.\r\nFor example, you could set a schedule to turn off the exchange for a few hours once a week to perform maintenance on a transport server.</br>\r\nBy default exchanges are active continuously. Schedules are added by day of the week and time of day.\r\nFor instance, if you select Monday 0:00 - 23:59, the exchange is on all day every Monday.\r\nIf you select Monday 8:30 - 11:30, the exchange is on from 8:30 to 11:30 a.m. and off all other times on Mondays.</br>\r\nTimes are expressed in 24-hour format: hh:mm or h:mm. Times are the time zone for your server.</br>\r\nIf you schedule down times for a pickup used by a community to receive messages from partners, you may want to inform partners when the transport is inactive.</br>\r\nIf you want an exchange to be active most of the time but turned off only some of the time, you may need many schedules specifying the daily times you want\r\nthe transport to be on or off. For example, to schedule a transport to turn off between 1 and 2 p.m. each Saturday, eight schedules are needed as follows:\r\nsix daily schedules calling for the transport to run continuously Sunday through Friday and two Saturday schedules, the first specifying the transport\r\nis on from midnight to 1 p.m. and the second specifying the transport is on from 2 p.m. to midnight.</br>\r\nMessages in queue when a transport turns off are suspended until the transport turns back on. For example, if a message is picked up from an application\r\nwhile the transport for sending to a partner is turned off, Message Tracker reports the status for the message as \"scheduled production.\"\r\nWhen the transport turns on again, processing of the message continues. Similarly, retries and resends for messages are suspended while the transport is off,\r\nbut they resume at the point where they were suspended when the transport turns back on.</br>\r\nTo use schedules, make sure message backups are enabled for the affected transports.\r\nUnless backups are enabled, messages in process when a transport turns off cannot be queued to resume processing when the transport turns on again.</br>\r\nIf you trade via the AS2 message protocol and request asynchronous receipts, your community cannot receive receipts from partners\r\nwhen the sending transport is turned off. To avoid this, request synchronous receipts or schedule a transport to be off when no messages are in process."
    },
    "xml_ns0_aleB2biProducerExchangePointBean" : {
      "title" : "aleB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_nachaDocumentAgreementBean" : {
      "title" : "nachaDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementBean"
      }, {
        "properties" : {
          "addendaDocument" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The document type of the addenda for the selected format and version."
          },
          "addendaType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Indicates the addenda format type to be specified, if NACHA files that include addenda (embedded documents)\r\nwill be handled."
          },
          "addendaVersion" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The version of the addenda for the selected format."
          },
          "useAddendaDocument" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify if the document type of the addenda is used for matching/selection.\r\nIf this option is set to <code>true</code>, the field must match the defined (or empty) indicated value."
          },
          "useAddendaType" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify if the addenda type is used for matching/selection.\r\nIf this option is set to <code>true</code>, the field must match the defined (or empty) indicated value."
          },
          "useAddendaVersion" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify if the addenda version is used for matching/selection.\r\nIf this option is set to <code>true</code>, the field must match the defined (or empty) indicated value."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_oftpV1SharedProducerExchangePointBean" : {
      "title" : "oftpV1SharedProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_oftpSharedProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_WebtraderUserBean" : {
      "type" : "object",
      "properties" : {
        "preferences" : {
          "description" : "",
          "$ref" : "#/definitions/json_MapType"
        },
        "primaryContact" : {
          "description" : "",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "alternateContact" : {
          "description" : "",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "sponsorContact" : {
          "description" : "",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "userId" : {
          "type" : "string",
          "description" : ""
        },
        "ownerName" : {
          "type" : "string",
          "description" : ""
        },
        "ownerId" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "WebtraderUserBean",
      "description" : ""
    },
    "json_ImmutableProducerExchangePointBean" : {
      "title" : "ImmutableProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_pesitIntegrationDeliverySettingsBean" : {
      "title" : "pesitIntegrationDeliverySettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_integrationDeliverySettingsBean"
      }, {
        "properties" : {
          "callerIdentification" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Holds the caller's protocol identity (P13) and password requirements. <p/>",
            "$ref" : "#/definitions/xml_ns0_pesitIdentificationBean"
          }
        }
      } ],
      "description" : ""
    },
    "json_FtpUserBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "password" : {
          "type" : "string",
          "description" : "Get the user's password  to connect to the server."
        },
        "userName" : {
          "type" : "string",
          "description" : "The name of the user."
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Returns if this FTP user is enabled."
        },
        "hasCredentials" : {
          "type" : "boolean",
          "description" : "Returns if this FTP user has credentials. The user may not have credentials if credentials should be read from an external source."
        },
        "passwordPolicyName" : {
          "type" : "string",
          "description" : "Get the password policy to assign to the user."
        },
        "ftpSubDirectories" : {
          "type" : "array",
          "description" : "The FTP subdirectories associated with the user. A specific combination of user and directory can be associated with only one exchange.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "title" : "FtpUserBean",
      "description" : ""
    },
    "json_CommunityBean" : {
      "title" : "CommunityBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PartyBean"
      }, {
        "properties" : {
          "subscribedPartners" : {
            "type" : "string",
            "description" : "The trading partners that belong to community"
          },
          "integrationDeliveries" : {
            "type" : "string",
            "description" : "The transports set up to route messages to a back-end system. A community can have multiple integration\r\ndelivery exchanges."
          },
          "tradingPickupExchanges" : {
            "type" : "string",
            "description" : "The message protocols and transports partners use to send messages to the community and how the\r\ncommunity retrieves the sent messages. A community with multiple trading pickups gives partners\r\nmultiple avenues for sending messages."
          },
          "tradingDeliveryExchanges" : {
            "type" : "string",
            "description" : ""
          },
          "defaultSigningCertificate" : {
            "type" : "string",
            "description" : "The default certificate for signing documents used by the community"
          },
          "defaultEncryptionCertificate" : {
            "type" : "string",
            "description" : "The default certificate for encrypting documents used by the community"
          },
          "defaultSslCertificate" : {
            "type" : "string",
            "description" : "The default certificate for use in authenticating SSL connections used by the community"
          },
          "certificates" : {
            "type" : "string",
            "description" : "All certificates associated with the community"
          },
          "trustedCertificates" : {
            "type" : "string",
            "description" : "All trusted certificates associated with the community"
          },
          "trustedSslCertificates" : {
            "type" : "string",
            "description" : "All trusted ssl certificates associated with the community"
          },
          "sshKeys" : {
            "type" : "string",
            "description" : "All ssh keys associated with the community"
          },
          "defaultSshKeyId" : {
            "type" : "string",
            "description" : "Default ssh key used by this community"
          },
          "defaultSshKey" : {
            "type" : "string",
            "description" : "Default ssh key used by this community"
          },
          "defaultDelivery" : {
            "type" : "string",
            "description" : ""
          },
          "pgpCertificates" : {
            "type" : "string",
            "description" : "Used to retrieve the URI to all the public PGP Certificates."
          },
          "defaultPGPCertificateId" : {
            "type" : "string",
            "description" : "Returns the default PGP certificate of this partner."
          },
          "defaultPGPCertificate" : {
            "type" : "string",
            "description" : "Returns the URI to the default PGP certificate."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_ftpServerProducerExchangePointBean" : {
      "title" : "ftpServerProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverProducerExchangePointBean"
      }, {
        "properties" : {
          "defaultUser" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The default FTP account used by the FTP server.",
            "$ref" : "#/definitions/xml_ns0_ftpUserBean"
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "For delivery only\r\n<p/>\r\nSelect this if you want the embedded server to delete files after they have been downloaded from it"
          },
          "deliveryFilenameMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "This property is used when the trading engine delivers messages.</p>\r\nFtp Delivery Filename Options: <ul><li><b>Preserve original</b></p>Select this option if you\r\nwant original file names to be preserved when the trading engine delivers messages.</li>\r\n<li><b>Auto generate</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>\r\n<li><b>Custom generate</b></p>When this flag is used, the additional property\r\n<b>userDefinedDeliveryFilename</b> must be set.</li></ul>",
            "$ref" : "#/definitions/xml_ns0_ftpDeliveryFilenameMode"
          },
          "duplicateFileNameMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "We recommend using this option to prevent the trading engine\r\nfrom attempting to retrieve partially written files.There may be some\r\nspecialized servers, typically running on mainframes, that support\r\nonly part of the FTP protocol (RFC 959). In such cases you may have to\r\ntake steps of your own to make sure collisions do not occur.\r\nFtp Duplicate File Name Options: <ul><li><b>Overwrite</b></p>\r\nIf duplicate file names are detected, the trading engine overwrites the existing file.</li>\r\n<li><b>Auto generate</b></p>Automatically generate unique filenames</li>\r\n<li><b>Append</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>\r\n<li><b>Custom generate</b></p>When this flag is used, the additional property\r\n<b>userDefinedDuplicateFilename</b> must be set.</li></ul>",
            "$ref" : "#/definitions/xml_ns0_ftpDuplicateFileNameMode"
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The local port used by the embedded FTP server to listen for incoming connections.\r\nThe default value is 4021 for trading server and 5021 for application server."
          },
          "modifyFtpServerDirectory" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable subdirectory management on the client side."
          },
          "userDefinedDeliveryFilename" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use items such as %metadata%, $filename$, $extension$, $timestamp$, and $sequence$."
          },
          "userDefinedDuplicateFilename" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use items such as $filename$, $extension$, $timestamp$, $sequence$ and $filesequence$ one time."
          }
        }
      } ],
      "description" : ""
    },
    "json_EmailUserBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "emailAddress" : {
          "type" : "string",
          "description" : "The email address of this SMTP user. Once created, it cannot be changed.\r\nThe email address allows wildcards:\r\n<ul>\r\n<li>? - matches any character</li>\r\n<li>* - matches any characters occurring zero or more times </li>\r\n</ul>\r\nExamples: <code>user@host.com; *@host.com; ??user@*.com</code>."
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "The status of this user."
        }
      },
      "title" : "EmailUserBean",
      "description" : ""
    },
    "json_HttpServerSettingsBean" : {
      "title" : "HttpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerSettingsBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The port on which the embedded server listens for connection requests."
          },
          "maxLingerTimeSeconds" : {
            "type" : "number",
            "description" : "The amount of time in seconds the connection is kept open after it is closed.\r\nA negative number (-1) indicates that the connection should not be kept open after it is closed"
          },
          "maxThreads" : {
            "type" : "number",
            "description" : "The maximum number of threads the trading engine can dedicate to the server."
          },
          "minThreads" : {
            "type" : "number",
            "description" : "The least number of threads the trading engine must dedicate to the server."
          },
          "restartableMinKiloBytes" : {
            "type" : "number",
            "description" : "The minimum size of a file that triggers the system to continue the file transfer at the point where it was\r\ninterrupted before the connection was lost. The minimum size is in kilobytes. The system only resumes\r\ntransfers of files that meet this minimum. The system starts over the transfer of smaller files whose\r\nprocessing is interrupted."
          },
          "tempFileHoursToLive" : {
            "type" : "number",
            "description" : "The number of hours the system retains a file whose transfer has been interrupted while waiting for the\r\nconnection to be restored, if restart attempts are made.\r\nThis temporary file enables the system to resume the transfer at the point where it was interrupted."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires signing messages using a message digest\r\nalgorithm. But the choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Specify whether the cipher suites supported by the server are stated, in order for you select the level of\r\nsecurity that suits your needs and enables communicating with others who might have different security\r\nrequirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "enableClientAuthenticatedSsl" : {
            "type" : "boolean",
            "description" : "Specify whether the partner’s certificate should be used for authentication when the partner connects to the\r\nserver, when using SSL option is enabled. If this option is set to <code>true</code>, partners are required\r\nto present a certificate for identity verification trusted by the server before the delivery exchanges\r\nusing this server allow the connection and you must add an authentication certificate for the partner.\r\nIf this option is set to <code>false</code>, non-authenticated HTTPS is used."
          },
          "certificate" : {
            "type" : "string",
            "description" : "Path to get the certificate for this server. <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_hl7v2OutboundAgreementBean" : {
      "title" : "hl7v2OutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_hl7v2AgreementBean"
      }, {
        "properties" : {
          "ackTimeout" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <b>useAcceptAck</b> is set to true, enter a timeout limit to how B2Bi will wait for the accept\r\nacknowledgement."
          },
          "componentSeparator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Message component separator. Default value is ^."
          },
          "countryCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The country code for the specified HL7v2 agreement. The format is [ISO code]. For a list of codes see\r\nthe Website for ISO (International Organization for Standardization): <a\r\nhref=\"http://www.iso.org/iso/home.html\">http://www.iso.org/iso/home.html</a>."
          },
          "escapeCharacter" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Message escape character separator. Default value is \\."
          },
          "fieldSeparator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Message field separator. Default value is |."
          },
          "messageControlIdGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Generator identifier set for message control counter. Default value is $MsgId:9$."
          },
          "repetitionCharacter" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Message repetition character separator. Default value is ~."
          },
          "security" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "<b>MSH-0008</b> field is an optional field used to implement security features. If this exchange\r\nagreement requires specific security, enter the MSH-00008 code in this field."
          },
          "sequenceNumberGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Sequence number generator. Default value is $SeqId:9$."
          },
          "subComponentSeparator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Message sub component separator. Default value is &."
          },
          "useAcceptAck" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want the receiving application to send an acknowledgement code to indicate\r\nthe receipt of the message."
          },
          "useNonDefaultSeparators" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If the exchanges defined in this agreement use messages with non-default separators, specify the\r\nrequired separator characters in the following fields: </br>\r\n<ul>\r\n<li>Field separator</li>\r\n<li>Component separator</li>\r\n<li>Repetition character</li>\r\n<li>Escape character</li>\r\n<li>Sub-component separator</li>\r\n</ul>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_priorityCode" : {
      "type" : "string",
      "title" : "priorityCode",
      "description" : "",
      "enum" : [ "A", "B", "C" ]
    },
    "json_FtpProcessingMode" : {
      "type" : "string",
      "title" : "FtpProcessingMode",
      "description" : "",
      "enum" : [ "USE_DEFAULT", "USE_TIMESTAMP_POLLING" ]
    },
    "xml_ns0_sshServerAuthenticationMode" : {
      "type" : "string",
      "title" : "sshServerAuthenticationMode",
      "description" : "",
      "enum" : [ "PASSWORD_AUTHENTICATION", "PUBLIC_KEY_AUTHENTICATION", "BOTH_PUBLIC_KEY_PASSWORD_AUTHENTICATION", "EITHER_PUBLIC_KEY_PASSWORD_AUTHENTICATION" ]
    },
    "xml_ns0_sftpDuplicateFileNameMode" : {
      "type" : "string",
      "title" : "sftpDuplicateFileNameMode",
      "description" : "",
      "enum" : [ "OVERWRITE", "APPEND", "AUTO_GENERATE" ]
    },
    "xml_ns0_sftpProducerExchangePointBean" : {
      "title" : "sftpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "applyNegativeFiltering" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive, only files matching the pattern are consumed. If set to true it is exclusive,\r\nfiles matching the pattern are ignored, but all other files are consumed.\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "List with cipher suites."
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this if you want the server to delete files after they have been downloaded from it. This option should be\r\nenabled in most cases. If an external server automatically deletes files that have been downloaded, deselect this\r\noption.\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "duplicateFileNameMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "We recommend using this option to prevent the trading engine\r\nfrom attempting to retrieve partially written files.There may be some\r\nspecialized servers, typically running on mainframes, that support\r\nonly part of the FTP protocol (RFC 959). In such cases you may have to\r\ntake steps of your own to make sure collisions do not occur.\r\nFtp Duplicate File Name Options: <ul><li><b>Overwrite</b></p>\r\nIf duplicate file names are detected, the trading engine overwrites the existing file.</li>\r\n<li><b>Auto generate</b></p>Automatically generate unique filenames</li>\r\n<li><b>Append</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>",
            "$ref" : "#/definitions/xml_ns0_sftpDuplicateFileNameMode"
          },
          "enableFiltering" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "encodedHostPublicKey" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "SSH/SFTP server's public key"
          },
          "fileCollisionMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "It is recommended to use this option to prevent the trading engine from attempting to\r\nretrieve partially written files. There may be some specialized servers, typically\r\nrunning on mainframes, that support only part of the FTP protocol (RFC 959).\r\nIn such cases you may have to clear this check box and take steps of your own to make\r\nsure collisions do not occur. If connecting to a partner's Interchange embedded FTP\r\nserver, use <b>None</b>. This property will be ignored if the filename handling is in append mode.</p>\r\nOptions available:</p>\r\n<ul>\r\n<li><b>None</b></>Use this option if the partner's server is an Interchange embedded server. </li>\r\n<li><b>Use temp files with inbox</b><p>Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:\r\nc:\\data\\pickup\\inbox\r\nBut you can use the following because a period is the first character of the inbox directory name:\r\nc:\\data\\pickup\\.inbox</p>When this flag is used, the additional property <b>inboxPath</b> should be set.</li>\r\n<li><b>Use temp file extension</b></p>If you prefer not to use an inbox, select this option.\r\nWhile a file is being written to the pickup directory, a temporary extension is added\r\nso the system knows not to retrieve it because the file is only partially written.\r\nOnce fully written, the temporary extension goes away and the file can be retrieved.\r\n</p>When this flag is used, the additional property <b>tempFileExtension</b> should be set.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_sftpCollisionMode"
          },
          "filterPattern" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Insert the format of the file names you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names or\r\nextensions or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file-name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the SSH/SFTP server."
          },
          "hostBasedAuthentication" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Whether or not server requires the SFTP client to use host based authentication\r\nBy using this mechanism passwords no longer have to be transferred to the untrusted systems</p>\r\n<b>Note: </b> per-user SSH public keys can achieve similar effects; but maintaining\r\nper-user keys could be an unwanted administrative overhead"
          },
          "inboxPath" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:</br>\r\n&emsp;c:\\data\\pickup\\inbox<br>\r\nBut you can use the following because a period is the first character of the inbox directory name:</br>\r\n&emsp;c:\\data\\pickup\\.inbox"
          },
          "keyUserName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This user name applies to both public/private key pair and host-based authentication."
          },
          "maxBlockSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The maximum size of the packets that can be downloaded from an external SFTP server by the SFTP client within the trading engine.\r\nThe client downloads messages in a series of data packets. By default the maximum size is 32768  data packet units.\r\nThe default value is compatible with most SFTP servers. But when handling messages of a certain size (2-3 megabytes or larger),\r\nsome servers cannot process many packets of the default size and downloading hangs. If this occurs, reduce the packet size maximum.\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "metadataHierarchy" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set message attributes that correspond to the names of subdirectories.\r\nEach item in the selected attributes list represents another subdirectory level.\r\nFor example, add \"From routing ID\" and \"To routing ID\" to the selected attributes\r\nlist in that order. A message with attributes \"From routing ID\" set to \"ABC\"\r\nand \"To routing ID\" set to \"DEF\" would be delivered to the subdirectory ABC/DEF."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <b>true</b> a list of cipher suites should be provided."
          },
          "passwordAuthentication" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Whether or not server requires the SFTP client to authenticate using a password"
          },
          "pickupDirectory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Path of the directory on your server where messages are\r\npicked up. When the trading engine polls the server for files, it only looks in the pickup\r\ndirectory, not an inbox directory. If connecting to a partner's B2Bi embedded FTP server,\r\nuse mailbox if picking up. Leave the field blank if delivering."
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port on which the server listens for incoming connections.\r\nThe default is 22 (embedded SFTP default is for trading 4022/ for application 5022)."
          },
          "publicKeyAuthentication" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Whether or not server requires the SFTP client to use public key authentication"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection.\r\nThe default is 30 seconds."
          },
          "tempFileExtension" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you prefer to not use an inbox, select this option. When a file is being written to the\r\npickup directory, a temporary extension is added so that the system knows not\r\nto retrieve it because the file is only partially written. Once fully written, the\r\ntemporary extension goes away and the file can be retrieved."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The user name and its password to connect to the server.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "json_NachaAgreementBean" : {
      "title" : "NachaAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_jmsPollingExchangePointBean" : {
      "title" : "jmsPollingExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "jmsCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password for the JMS provider. The user name and password can be the same as your JNDI user name\r\nand password. This depends on your JMS provider and how it is configured.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          },
          "jmsQueue" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the queue. <p/>\r\nExample: <code>XMLQueue@router1</code>."
          },
          "jmsQueueConnFactory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The connection factory as defined within the JMS provider. This value can be either in the form\r\n<code>factoryname@routername</code> or the JNDI public symbol for the QueueConnectionFactory. This\r\ndepends on your JMS provider and how it is configured.\r\nExamples: <code>plainsocket@router1</code> or <code>QueueConnectionFactory22</code>."
          },
          "jndiCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password for the JNDI provider. The user name and password could be blank and are typically provided\r\nin the JNDI URL. This depends on the JNDI provider and how it is configured.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          },
          "jndiFactory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the JNDI service provider class. <p/>\r\nExample: <code>com.swiftmq.jndi.InitialContextFactoryImpl</code>."
          },
          "jndiUrl" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The network URL used to obtain access to the JNDI service provider for your JMS service.\r\nExample: <code>smqp://localhost:4001/timeout=10000</code>."
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This value specifies the maximum number of messages to be consumed over a single connection before the connection\r\nis closed and reopened on another processing node. As such, this setting effectively controls load balancing."
          },
          "queueUtilClass" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the Java class for implementing the connection to the message queue.\r\nA Java class for Oracle AQ is available. The class name is:\r\n<code>com.cyclonecommerce.tradingengine.transport.jms.OracleAQQueueUtil</code>.\r\nIf you want a Java class for a provider other than Oracle AQ, you need the help of a\r\nprofessional services consultant."
          },
          "queueUtilParameters" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "There are four parameters required for the Java class for Oracle AQ. These parameters must be in the following order:\r\n<ol><li>Host - the name of the computer running Oracle AQ</li>\r\n<li>Database name - the name of the database that contains the message queue</li>\r\n<li>Port - the port Oracle AQ uses to listen for messages</li>\r\n<li>Driver type - the type of JDBC driver for connecting to the provider. For Oracle AQ, the valid values are\r\n<code>thin</code> and <code>oci8</code>.</li><ol/>"
          },
          "receiveTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If your JMS provider is slow to respond to the request received from the trading engine, increase the response interval.\r\nThe default value of 0 is acceptable in the case of most JMS providers. However, if unacceptable for your\r\nJMS provider, use trial-and-error to determine a workable interval between 1 and 32767 seconds."
          },
          "useJndi" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the JMS provider requires a Java Naming and Directory Interface (JNDI) implementation.\r\nFor example, Oracle Advanced Queuing facility (Oracle AQ) does not use a JNDI provider."
          },
          "useTransactedQueue" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this option to <b>true</b> if the provider is Oracle AQ. Otherwise, set it to <b>false</b>."
          }
        }
      } ],
      "description" : ""
    },
    "json_HttpConsumerExchangePointBean" : {
      "title" : "HttpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits for a connection to the delivery exchange before the attempt times out.\r\nAlthough the default value is 30 seconds, this may be longer than the interval allowed by your operating system.\r\nFor example, Windows XP by default allows a maximum timeout of 20 seconds. The actual connect timeout interval\r\nis the lesser of the operating system timeout and the value set in the trading engine."
          },
          "responseTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits for the delivery exchange to respond to a request before terminating the\r\nconnection."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires the signing of messages using a message digest\r\nalgorithm. The choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Specify whether the cipher suites supported by the server are stated, in order for you select the level of\r\nsecurity that suits your needs and enables communicating with others who might have different security\r\nrequirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_passwordChangeBean" : {
      "title" : "passwordChangeBean",
      "allOf" : [ {
        "properties" : {
          "password" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_communityBean" : {
      "title" : "communityBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_partyBean"
      }, {
        "properties" : {
          "defaultEncryptionCertificateId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The default certificate id for encrypting documents used by the community"
          },
          "defaultPGPCertificateId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns the default PGP certificate of this partner."
          },
          "defaultSigningCertificateId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The default certificate id for signing documents used by the community"
          },
          "defaultSshKeyId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Default ssh key used by this community"
          },
          "defaultSslCertificateId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The default certificate id for use in authenticating SSL connections used by the community"
          }
        }
      } ],
      "description" : ""
    },
    "json_X12AgreementBean" : {
      "title" : "X12AgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, {
        "properties" : {
          "processingMode" : {
            "description" : "<p>\r\nProcessing mode to use for X12 message handling:\r\n</p>\r\n<ul>\r\n<li>ISA_AND_GS (default) <p> Select this option to enable the handling of complete X12 messages\r\n(including ISA headers).</p>\r\n</li>\r\n<li>GS_ONLY (X12 only) <p> Select this option to enable the handling of X12 messages without ISA headers.</p>\r\n</li>\r\n</ul>",
            "$ref" : "#/definitions/json_X12ProcessingMode"
          },
          "interchangeSenderIdQualifier" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe qualifier for designating the system or method of information code structure used to designate the sender ID element being qualified (ISA05).\r\nThis is an interchange envelope parameter.\r\n</p>"
          },
          "interchangeReceiverIdQualifier" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe qualifier for designating the system or method of information code structure to designate the receiver ID element being qualified (ISA07).\r\nThis is an interchange envelope parameter.\r\n</p>"
          },
          "interchangeSenderId" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe information code published by the sender for other parties to use as the receiver ID to route data to them (ISA06).\r\nWhen you are sending, the sender uses this as its sending ID. Other parties sending to you use this as a receiving ID route data to them.\r\nThis is an interchange envelope parameter.\r\n</p>"
          },
          "interchangeReceiverId" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe information code published by the receiver of the data (ISA08). This is an interchange envelope parameter.\r\nThis is an interchange envelope parameter.\r\n</p>"
          },
          "applicationSenderId" : {
            "type" : "string",
            "description" : "A code identifying the sender (GS02) of the message. The trading partners agree upon the codes to use. This is a functional group parameter."
          },
          "applicationReceiverId" : {
            "type" : "string",
            "description" : "A code identifying the receiver (GS03) of the message. The trading partners agree upon the codes to use. This is a functional group parameter."
          },
          "x12TestIndicator" : {
            "description" : "A code (T, I or P) indicating whether data in the interchange envelope is for testing or production\r\n(ISA15). This is an interchange envelope parameter.",
            "$ref" : "#/definitions/json_X12TestIndicator"
          },
          "groupAgreements" : {
            "type" : "string",
            "description" : "List with all functional groups for current agreement"
          }
        }
      } ],
      "description" : ""
    },
    "json_FtpConsumerExchangePointBean" : {
      "title" : "FtpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The name of the FTP server. <p/>"
          },
          "port" : {
            "type" : "number",
            "description" : "The port on which the server listens for incoming connections. The default is 21. <p/>"
          },
          "pickupDirectory" : {
            "type" : "string",
            "description" : "The path of the directory on your server where messages are picked up. When the trading engine polls the\r\nserver for files, it only looks in the pickup directory, not in an inbox directory. <p/>"
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits for a connection to the delivery exchange before the attempt times out.\r\nAlthough the default value is 30 seconds, this may be longer than the interval allowed by your operating\r\nsystem (OS) . The actual connect timeout interval is the lesser of the OS timeout and the value set in the trading\r\nengine.  <p/>"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection.\r\nThe default is 30 seconds.  <p/>"
          },
          "passive" : {
            "type" : "boolean",
            "description" : "If set to true, files are transmitted using passive mode. In this mode, during the connection, the server\r\nspecifies the port it will listen to for the data connection. If set to false, files are transmitted using\r\nactive mode.  <p/>"
          },
          "transferType" : {
            "description" : "Select the format of the files that are transmitted over this delivery: <p/><ul>\r\n<li>ASCII_AUTO_LF <p/>\r\nASCII - automatic line ending</li>\r\n<p/>\r\n<li>ASCII_CR_LF <p/>\r\nASCII - user CR/LF</li>\r\n<p/>\r\n<li>ASCII_CR_ONLY <p/>\r\nASCII - use CR only\r\n</li>\r\n<p/>\r\n<li>BINARY <p/>\r\nBinary (default). In most cases, use binary mode. Always trade packaged files (for example, AS2,\r\nAS3, Secure file) in binary mode.<p/>\r\n</li>\r\n<p/>\r\n</ul>\r\nIf the receiver requires a particular line-ender, select an ASCII option to have the trading engine translate\r\nthe line-ender based on what is required by the back-end system. The FTP specification requires the sender to\r\nalways use CRLF as the line-ender when transmitting files in ASCII mode. It is up to the receiver to translate\r\nthe line-ender to something else if desired. <p/>",
            "$ref" : "#/definitions/json_FtpType"
          },
          "commandSetConfigPath" : {
            "type" : "string",
            "description" : "The FTP command set file controls the commands sent to the FTP server for operations such as send, receive, delete.\r\nThe default command set file is ftpcommandset.xml. This field lets you specify a different command set file.  Changing\r\nthis is only for advanced FTP users with specialized needs. The  field value is the name of an entry in\r\nfilereg.xml in [install directory]\\conf that points to another file in the conf directory. <p/>"
          },
          "attemptRestarts" : {
            "type" : "boolean",
            "description" : "Indicates whether the system resumes transferring large files at the interruption point, when a connection is lost\r\nbefore a transfer is completed. If selected, the system resumes the processing of files that are at least as\r\nlarge as specified in the restartable minimum bytes field. This checkpoint-restart feature is worthwhile only for\r\nlarge documents. If this option is not used, the system starts a file transfer over when processing is interrupted. <p/>"
          },
          "restartableMinKiloBytes" : {
            "type" : "number",
            "description" : "If attempt restarts is selected, the minimum size of a file that triggers the system to continue the file transfer\r\nat the point interrupted before the connection was lost. The minimum size is in megabytes. The system only resumes\r\ntransfers of files that meet this minimum. The system starts over the transfer of smaller files whose processing is\r\ninterrupted. <p/>"
          },
          "tempFileHoursToLive" : {
            "type" : "number",
            "description" : "If attempt restarts is selected, how long the system retains a file whose transfer has been interrupted while\r\nwaiting for the connection to be restored. This temporary file enables the system to resume the transfer at the\r\npoint interrupted. <p/>"
          },
          "userCommands" : {
            "type" : "array",
            "description" : "Enter user commands such as SITE to be sent to the server after login. <p/>\r\nCommands must be entered in the exact case and format expected by the server. Consult RFC 959 for a list of standard\r\nFTP commands.  You can use FTP commands that do not make use of the FTP data connection. Commands that make use\r\nof the FTP data connection are not supported. <p/>\r\nIf any command fails, the remaining commands are not executed, and production to the FTP server fails. To avoid\r\npossible failures, preface any command with an \"at\" sign (@) to indicate that errors from that command should be\r\nignored, for example, \"@MKD test\". Preface any command with an asterisk to cause the entire line to be treated as\r\na comment, for example, \"*Create test directory\".  <p/>",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "fileCollisionMode" : {
            "description" : "Defines the use of temporary files to avoid read/write collisions. It is recommended to use\r\nUSE_TEMP_FILES_WITH_INBOX or USE_TEMP_FILE_EXTENSION to prevent the trading engine from attempting to retrieve\r\npartially written files. <p/><ul>\r\n<li>USE_USE_NONE <p/>\r\nTemporary files will not be used in order to avoid read/write collisions. </li>\r\n<p/>\r\n<li>USE_TEMP_FILES_WITH_INBOX <p/>\r\nUse separate directory for temporary files. When receiving files from a partner, we recommend that your partner\r\nwrite files to the inbox directory first and then move them to the pickup directory when they are ready to be\r\nretrieved. This process is automatic if your partner also uses Axway products B2Bi, Interchange or Activator.\r\nIf the partner uses other software to upload files to your server, the software should be configured to initially\r\nupload the files to the inbox directory and move them to the pickup directory when they are ready to be retrieved.\r\nThe trading engine writes to the inbox and then moves the message to the pickup directory. </li>\r\n<p/>\r\n<li>USE_TEMP_FILE_EXTENSION\t<p/>\r\nUse special extension in pickup directory for temporary files. If you prefer not to\r\nuse an inbox, select this option. While a file is being written to the pickup directory, a\r\ntemporary extension is added so the system knows not to retrieve it because the file is only\r\npartially written. Once fully written, the temporary extension goes away and the file can be\r\nretrieved. </li>\r\n<p/></ul>",
            "$ref" : "#/definitions/json_FtpCollisionMode"
          },
          "inboxPath" : {
            "type" : "string",
            "description" : "Type the full path of an inbox directory (for example, c:\\data\\inbox). Files are uploaded to this directory.\r\nWhen fully written, files are moved to the pickup directory for retrieval. <p/>"
          },
          "tempFileExtension" : {
            "type" : "string",
            "description" : "Used when File Collision Mode is set to USE_TEMP_FILE_EXTENSION. Specify a temporary extension to be added to the\r\nfile while it is being written to the pickup directory. Once fully written, the temporary extension goes away and\r\nthe file can be retrieved. <p/>"
          },
          "metadataHierarchy" : {
            "type" : "array",
            "description" : "You can use metadata hierarchy to avoid file name collisions by selecting message attributes that correspond to\r\nthe names of subdirectories. Each item added represents another subdirectory level. For example, add\r\n\"From routing ID\" and \"To routing ID\" to the selected attributes list in that order. Then, place a message in a\r\nsubdirectory named \"ABC/DEF\". The message will be assigned a \"From routing ID\" attribute set to \"ABC\" and a \"To\r\nrouting ID\" set to \"DEF\".  <p/>",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "List of cipher suites to be used. <p/>",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Select this option if you must connect to this server using SSL.<p/>"
          },
          "implicitSsl" : {
            "type" : "boolean",
            "description" : "Use implicit SSL. Select this if you want to use implicit SSL rather than explicit SSL, which is the default mode.\r\nFTP supports two methods to accomplish security through a sequence of commands passed between two computers.\r\nThe sequence is initiated with explicit (active) or implicit (passive) security. <p/><ul>\r\n<li> Explicit security. To establish the SSL link, explicit security requires the FTP client to issue a specific\r\ncommand to the FTP server after establishing a connection. The default FTP server  port is used.</li>\r\n<li> Implicit security. Implicit security begins with an SSL connection as soon as the FTP client connects to an\r\nFTP server. The FTP server defines a specific port for the client to be used for secure connections. </li>\r\n<p/></ul>"
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "description" : "Enable if you use host-based authentication with a Linux SFTP server. <p/>"
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Optionally, set to true in order to override the default cipher suites.  <p/>"
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "description" : "Select this if you want the server to delete files after they have been downloaded from it. This option should be\r\nenabled in most cases. If an external server automatically deletes files that have been downloaded, deselect this\r\noption.  <p/>"
          },
          "applyNegativeFiltering" : {
            "type" : "boolean",
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive, only files matching the pattern are consumed. If set to true it is exclusive,\r\nfiles matching the pattern are ignored, but all other files are consumed.  <p/>"
          },
          "enableFiltering" : {
            "type" : "boolean",
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names.  <p/>"
          },
          "filterPattern" : {
            "type" : "string",
            "description" : "Insert the format of the file names you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names or\r\nextensions or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file-name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>"
          },
          "usernamePasswordCredentials" : {
            "description" : "The username and the password required to connect to the server.  <p/>",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "sequenced" : {
            "type" : "boolean",
            "description" : "Set this option to true if you want all messages that are consumed by this pickup to be delivered in their\r\noriginal consumption order. <p/>"
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "description" : "Value of sequence timeout in seconds. <p/>"
          },
          "ftpProcessingMode" : {
            "description" : "Set the mode how the files are poll from the FTP server.",
            "$ref" : "#/definitions/json_FtpProcessingMode"
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "description" : "This value specifies the maximum number of messages to be consumed over a single connection before the connection\r\nis closed and reopened on another processing node. As such, this setting effectively controls load balancing. The\r\ndefault setting of 1 achieves optimal load balancing at the cost of greater overhead per message. Depending on your\r\nmessage volume and the load on each node, this value could be increased to avoid the overhead associated with\r\nreconnecting to the transport server, at the cost  of a less well-balanced cluster."
          }
        }
      } ],
      "description" : ""
    },
    "json_ImmutableServerSettingsBean" : {
      "title" : "ImmutableServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerSettingsBean"
      }, { } ],
      "description" : ""
    },
    "json_OutOfSequenceActionType_x12" : {
      "type" : "string",
      "title" : "OutOfSequenceActionType",
      "description" : "",
      "enum" : [ "WARN_AND_PROCESS", "FAIL_AND_PARK" ]
    },
    "json_UriBuilder" : {
      "type" : "object",
      "title" : "UriBuilder",
      "description" : ""
    },
    "xml_ns0_m3TriggerB2biConsumerExchangePointBean" : {
      "title" : "m3TriggerB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_InvalidRequestException" : {
      "title" : "InvalidRequestException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ApiException"
      }, { } ],
      "description" : "Exception that maps to HTTP 400 return code"
    },
    "xml_ns0_mllpProducerExchangePointBean" : {
      "title" : "mllpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires signing messages using a message digest\r\nalgorithm. But the choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits for a connection to the delivery exchange before the attempt times out."
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If TLS is enabled for connecting to the server, you can optionally select this additional security feature."
          },
          "endBlockCharacter" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The decimal byte value to use for the end block character. Start and stop block characters enclose the message\r\ndata that is sent or received in through MLLP messages. At runtime B2Bi converts this decimal value to hexadecimal.\r\nDefault = 28 (hexadecimal 1C). The default value is the customary MLLP value. You must use the same values for the\r\nclient and server sides of the MLLP exchange."
          },
          "expectAcknowledgement" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option to keep the connection with the MLLP server open while waiting for acknowledgement."
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The address of the MLLP server."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select the level of security that suits your need and enables communicating with others who might have different\r\nsecurity requirements. For example, when an SSL connection is established, the client and server exchange\r\ninformation about cipher suites they have in common. Then they communicate using the common cipher suite that\r\noffers the highest level of security. If they do not have a cipher suite in common, secure communication is\r\nnot possible. <p/>\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The server port for MLLP connections."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection."
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this to true if TLS is required for the client connection to the MLLP server."
          },
          "startBlockCharacter" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The decimal byte value to use for the start block character. Start and stop block characters enclose the message\r\ndata that is sent or received in through MLLP messages. At runtime B2Bi converts this decimal value to hexadecimal.\r\nDefault = 11 (hexadecimal B). The default value is the customary MLLP value. You must use the same values for the\r\nclient and server sides of the MLLP exchange."
          }
        }
      } ],
      "description" : ""
    },
    "json_WebTraderPasswordChangeFailure" : {
      "title" : "WebTraderPasswordChangeFailure",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PasswordChangeFailure"
      }, { } ],
      "description" : "Use this class to show information about the password policies"
    },
    "json_XmlInboundAgreementBean" : {
      "title" : "XmlInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_XmlAgreementBean"
      }, {
        "properties" : {
          "useTestFlag" : {
            "type" : "boolean",
            "description" : "If true, testFlag will be used for detection / matching."
          },
          "testFlag" : {
            "type" : "boolean",
            "description" : "Set this field to true if the agreement is for testing and not for production."
          },
          "useSenderIdentification" : {
            "type" : "boolean",
            "description" : "Enable sender identification for detection/matching. </br> This is a read-only field."
          },
          "useReceiverIdentification" : {
            "type" : "boolean",
            "description" : "Enable receiver identification for detection/matching. </br> This is a read-only field."
          },
          "documentAgreements" : {
            "type" : "string",
            "description" : "List with all document agreements for current agreement."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_processingSeverity" : {
      "type" : "string",
      "title" : "processingSeverity",
      "description" : "",
      "enum" : [ "ERROR", "FATAL", "WARNING" ]
    },
    "xml_ns0_tradacomsInboundAgreementBean" : {
      "title" : "tradacomsInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_tradacomsAgreementBean"
      }, {
        "properties" : {
          "recipientTransmisionReference" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Receiver Reference (<code>Out_ReceiverReference</code>). Transmission reference ID of the receiver."
          },
          "useApplicationReference" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable application reference for detection / matching."
          },
          "usePriorityCode" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable transmission priority code for detection / matching."
          },
          "useReceiverTransmissionCode" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver identification code for detection / matching."
          },
          "useReceiverTransmissionName" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver identification name for detection / matching."
          },
          "useSenderTransmissionCode" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender identification code for detection / matching."
          },
          "useSenderTransmissionName" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender identification name for detection / matching."
          },
          "useSyntaxRuleId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable syntax rule identification for detection / matching."
          },
          "useSyntaxRuleVersion" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable syntax rule version for detection / matching."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_mllpServerSettingsBean" : {
      "title" : "mllpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverSettingsBean"
      }, {
        "properties" : {
          "acknowledgementMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The option for sending acknowledgements. The following options are available for the acknowledgement mode:\r\n<ul>\r\n<li><b>NONE</b> - Select this option to implement MLLP connections without acknowledgements.</li>\r\n<li><b>MLLP</b> - Select this option to enable transport-level acknowledgements for connections to this MLLP server.</li>\r\n<li><b>SYNC_FROM_BACKEND</b> Select this option if you want connections to this MLLP server kept open until an application acknowledgement is generated in the back end.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_acknowledgementMode"
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires signing messages using a message digest\r\nalgorithm. But the choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm."
          },
          "enableClientAuthenticatedSsl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the partner’s certificate should be used for authentication when the partner connects to the\r\nserver using SSL. If this option is set to true, partners are required to present a certificate for identity\r\nverification trusted by the server before the delivery exchanges using this server allow the connection. You\r\nmust add an authentication certificate for the partner.\r\nIf this option is set to <code>false</code>, non-authenticated HTTPS is used."
          },
          "endBlockCharacter" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The decimal byte value used to identify the end block character.\r\nStart and stop block characters enclose the message data that is sent or received in through MLLP messages.\r\nAt runtime, B2Bi converts this decimal value to hexadecimal.\r\nThe default value is 28 (hexadecimal 1C).\r\nThe default value is the customary MLLP value.\r\nYou must use the same values for the client and server sides of the MLLP exchange."
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The TCP port on which the embedded server listens for connection requests."
          },
          "maxThreads" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The most threads the trading engine can dedicate to the server."
          },
          "minThreads" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The least number of threads the trading engine must dedicate to the server."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select the level of security that suits your need and enables communicating with others who might have different\r\nsecurity requirements. For example, when an SSL connection is established, the client and server exchange\r\ninformation about cipher suites they have in common. Then they communicate using the common cipher suite that\r\noffers the highest level of security. If they do not have a chipper suite in common, secure communication\r\nis not possible.  <p/>\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "startBlockCharacter" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The decimal byte value used to identify the start block character.\r\nStart and stop block characters enclose the message data that is sent or received in through MLLP messages.\r\nAt runtime, B2Bi converts this decimal value to hexadecimal. The default value is 11 (hexadecimal B).\r\nThe default value is the customary MLLP value.\r\nYou must use the same values for the client and server sides of the MLLP exchange."
          }
        }
      } ],
      "description" : ""
    },
    "json_PesitDataEncodingType" : {
      "type" : "string",
      "title" : "PesitDataEncodingType",
      "description" : "",
      "enum" : [ "BINARY", "TEXT" ]
    },
    "json_NachaInboundAgreementBean" : {
      "title" : "NachaInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_NachaAgreementBean"
      }, {
        "properties" : {
          "useNachaNameSender" : {
            "type" : "boolean",
            "description" : "use the sender's NACHA name"
          },
          "useNachaNameReceiver" : {
            "type" : "boolean",
            "description" : "use the receiver's NACHA name"
          },
          "useFileIdModifier" : {
            "type" : "boolean",
            "description" : "use the file id modifier field"
          },
          "fileIdModifier" : {
            "type" : "string",
            "description" : "The interchange file-id-modifier."
          },
          "useReferenceCode" : {
            "type" : "boolean",
            "description" : "use the reference code field"
          },
          "referenceCode" : {
            "type" : "string",
            "description" : "The interchange reference-code."
          },
          "customRejectionTypes" : {
            "type" : "string",
            "description" : "The custom rejection types field"
          },
          "fileRejectionRule" : {
            "description" : "The action to take when a file is rejected.",
            "$ref" : "#/definitions/json_FileRejectionRule"
          },
          "batchRejectionRule" : {
            "description" : "The action to take when the batch is rejected.",
            "$ref" : "#/definitions/json_BatchRejectionRule"
          },
          "documentAgreements" : {
            "type" : "string",
            "description" : "List with all document agreements for current agreement"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_managedPGPPublicKeyBean" : {
      "title" : "managedPGPPublicKeyBean",
      "allOf" : [ {
        "properties" : {
          "creationDate" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The date the public key was created."
          },
          "expireDate" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The date the public key expires."
          },
          "keyAlgorithm" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "An algorithm identifier that specifies the public key crypto system this key belongs to and any associated key parameters, such as key length <p/>"
          },
          "keyId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The keyId is string identifier for the Public Key."
          },
          "keyLength" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Key length indicates encryption strength, the larger the number the stronger the key. <p/>"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_VdaDocumentAgreementBean" : {
      "title" : "VdaDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "json_X12DocumentAgreementBean" : {
      "title" : "X12DocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "json_FileRejectionRule" : {
      "type" : "string",
      "title" : "FileRejectionRule",
      "description" : "",
      "enum" : [ "NONE", "ENTIRE", "WARNING" ]
    },
    "json_Hl7v2InboundAgreementBean" : {
      "title" : "Hl7v2InboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_Hl7v2AgreementBean"
      }, {
        "properties" : {
          "useSenderApplicationNamespaceId" : {
            "type" : "boolean",
            "description" : "Enable sender application namespace id for detection/matching </br> Read only field"
          },
          "useSenderApplicationUniversalId" : {
            "type" : "boolean",
            "description" : "Enable sender application universal id for detection/matching"
          },
          "useSenderApplicationUniversalIdType" : {
            "type" : "boolean",
            "description" : "Enable sender application universal id type for detection/matching"
          },
          "useSenderFacilityNamespaceId" : {
            "type" : "boolean",
            "description" : "Enable sender facility namespace id for detection/matching"
          },
          "useSenderFacilityUniversalId" : {
            "type" : "boolean",
            "description" : "Enable sender facility universal id for detection/matching"
          },
          "useSenderFacilityUniversalIdType" : {
            "type" : "boolean",
            "description" : "Enable sender facility universal id type for detection/matching"
          },
          "useReceiverApplicationNamespaceId" : {
            "type" : "boolean",
            "description" : "Enable receiver application namespace id for detection/matching </br> Read only field"
          },
          "useReceiverApplicationUniversalId" : {
            "type" : "boolean",
            "description" : "Enable receiver application universal id for detection/matching"
          },
          "useReceiverApplicationUniversalIdType" : {
            "type" : "boolean",
            "description" : "Enable receiver application universal id type for detection/matching"
          },
          "useReceiverFacilityNamespaceId" : {
            "type" : "boolean",
            "description" : "Enable receiver facility namespace id for detection/matching"
          },
          "useReceiverFacilityUniversalId" : {
            "type" : "boolean",
            "description" : "Enable receiver facility universal id for detection/matching"
          },
          "useReceiverFacilityUniversalIdType" : {
            "type" : "boolean",
            "description" : "Enable receiver facility universal id type for detection/matching"
          },
          "useProcessingId" : {
            "type" : "boolean",
            "description" : "Enable processing id for detection/matching"
          },
          "useProcessingMode" : {
            "type" : "boolean",
            "description" : "Enable processing mode for detection/matching"
          },
          "useCharacterSet" : {
            "type" : "boolean",
            "description" : "Enable character set for detection/matching"
          },
          "applicationAcknowledgement" : {
            "description" : "Option for returning acknowledgments to the application that sent the inbound message. </br>Possible\r\noptions:\r\n<ul>\r\n<li><b>AR</b> As requested</li>\r\n<li><b>AL</b> Always</li>\r\n<li><b>NE</b> Never</li>\r\n<li><b>ER</b> Error/Reject only</li>\r\n<li><b>SU</b> Successful completion only</li>\r\n</ul>",
            "$ref" : "#/definitions/json_GenerateAckRuleType_hl7v2"
          },
          "documentServiceId" : {
            "type" : "string",
            "description" : "The service used for acknowledgement processing. If there are not any services to select, configure the\r\nservice and pass it to this field."
          },
          "ackEnvelopingMode" : {
            "description" : "Select this option if you want to use either a specific outbound agreement to determine the\r\nacknowledgement processing or the interchange IDs and application IDs of the incoming Hl7v2 document as\r\nvalues (reversed) for the acknowledgement back to the sender. </br> Possible options:\r\n<ul>\r\n<li><b>DEFAULT</b> Select this option if you want B2Bi to use the message control ID of the incoming\r\ndocument.</li>\r\n<li><b>OUTBOUND_AGREEMENT</b> Select this option if you want to use a specific outbound agreement to\r\ndetermine the acknowledgement processing.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_AckEnvelopingMode"
          },
          "messageControlIdGenerator" : {
            "type" : "string",
            "description" : "Generator for message control counter. Default value is $MsgId:9$"
          },
          "outboundAgreementForAckEnvelopeId" : {
            "type" : "string",
            "description" : "If you selected Generate acknowledgement rule that generates acknowledgements, and if you selected to\r\nUse an Outbound Agreement for acknowledgement enveloping\" above, select an outbound agreement that\r\nprovides the enveloping. If there are not any outbound agreements to select, add one and pass it to\r\nthis field."
          },
          "overrideAckTransportReceiver" : {
            "type" : "boolean",
            "description" : "Select this option if you want to identify a specific party as the receiving party of the\r\nacknowledgement. Then use the Partner, Routing ID and Delivery fields to identify the partner and\r\nassociated delivery exchange."
          },
          "ackTransportReceiver" : {
            "type" : "string",
            "description" : "If you selected Generate acknowledgement rule that generates acknowledgements, and if you selected to\r\nUse alternate delivery partner, select a specific party as the receiving party of the acknowledgement."
          },
          "ackTransportReceiverRoutingId" : {
            "type" : "string",
            "description" : "If you selected Generate acknowledgement rule that generates acknowledgements, and if you selected to\r\nUse alternate delivery partner, select a specific Routing Id from the specific party selected as the\r\nreceiving party of the acknowledgement."
          },
          "ackDeliveryExchangeId" : {
            "type" : "string",
            "description" : "If you selected an acknowledgement rule that generates acknowledgements, and you have multiple delivery\r\nexchanges that are valid for this agreement, you can select a specific delivery exchange to handle the\r\ndelivery of the acknowledgements."
          },
          "rejectionRule" : {
            "description" : "The condition for rejecting interchanges, selected from a drop-down list. Interchanges are rejected\r\ndepending on where errors are found. For example, if there is an error in one transaction set, the\r\nwhole interchange is rejected. </br> Possible options:\r\n<ul>\r\n<li><b>NONE</b> (default)</li>\r\n<li><b>ENTIRE_BATCH</b> If any documents are stopped, reject entire batch</li>\r\n<li><b>SAME_TYPE</b> If any documents are stopped, reject documents of the same type</li>\r\n<li><b>CUSTOM_TYPE</b> If any documents are stopped, reject documents of the following types - If you\r\nselect this option you must enter the document types in the Custom rules field.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_RejectionRuleType_hl7v2"
          },
          "customRejectionRule" : {
            "type" : "string",
            "description" : "If <i>CUSTOM_TYPE</i> rejection rule is selected, specify the document types to be rejected."
          },
          "sequenceCheck" : {
            "type" : "boolean",
            "description" : "The interchange control number for inbound messages is verified to be in sequence. So, for example, if\r\nthe user sets the next expected interchange control number to 123456, the system validates that the\r\nnext inbound document has an interchange control number of 123456. If the validation succeeds the field\r\nis updated to 123457. If the validation fails, the out of sequence action is applied."
          },
          "outOfSeqAction" : {
            "description" : "Action to take in case sequenceCheck field is true. </br> Possible options:\r\n<ul>\r\n<li><b>WARN_AND_PROCESS</b> Allows an inbound document to be processed successfully, with a logged\r\nwarning.</li>\r\n<li><b>FAIL_AND_PARK</b> Processing is halted and an error is logged.</li>\r\n<li><b>IGNORE</b> No action.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_OutOfSequenceActionType_hl7v2"
          },
          "dupAction" : {
            "description" : "Sequence numbers are checked for duplicates by comparing to documents already received. If a duplicate\r\nis detected for an inbound document, the selected duplicate action is respected. </br> Possible\r\noptions:\r\n<ul>\r\n<li><b>WARN_AND_PROCESS</b> Allows an inbound document to be processed successfully, with a logged\r\nwarning.</li>\r\n<li><b>FAIL_AND_PARK</b> Processing is halted and an error is logged.</li>\r\n<li><b>IGNORE</b> No action.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_OutOfSequenceActionType_hl7v2"
          },
          "documentAgreements" : {
            "type" : "string",
            "description" : "List with all document agreements for current agreement"
          }
        }
      } ],
      "description" : ""
    },
    "json_HttpProxyBean" : {
      "type" : "object",
      "properties" : {
        "usernamePasswordCredentials" : {
          "description" : "The user name and password to connect to the server. Credentials are used if the proxy requires user name\r\nand password for basic authentication.",
          "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
        },
        "port" : {
          "type" : "number",
          "description" : "The port through which outbound HTTP traffic is routed."
        },
        "host" : {
          "type" : "string",
          "description" : "The fully qualified domain name or IP address of the HTTP proxy."
        }
      },
      "title" : "HttpProxyBean",
      "description" : ""
    },
    "xml_ns0_documentServiceOutputBean" : {
      "title" : "documentServiceOutputBean",
      "allOf" : [ {
        "properties" : {
          "deliveryMethod" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The delivery method for this service. You can use one of the following values:\r\n<ul>\r\n<li><b>DELIVER_TO_PARTNER</b> </br> Select this option if the message is to be sent to a trading partner. This option is\r\nthe default setting for the following document formats: MEC XML, XML, In-house and IDoc.</li>\r\n<li><b>RETURN_TO_SENDER</b> </br> Select this option if you are creating a service to support Web Services or MLLP trading,\r\nand the service requires a return exchange to the originating party.</li>\r\n<li><b>DELIVER_TO_APPLICATION</b> </br> Select this option if the delivery endpoint of the document exchange is a back-end\r\napplication. This option is the default setting for the following document formats: EDIFACT, X12, VDA and\r\nTRADACOMS. If you select this option, you must also provide the target application for the document delivery.</li>\r\n<li><b>CONTINUE_TO_NEXT_STEP</b> </br> Select this option if the message is to be sent to the next content-based\r\nprocessing after the processing steps specified in the service have been executed.</br>\r\n<b>Note:</b> This option is for metadata services only. </li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_deliveryMethod"
          },
          "exchangePointId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the Application Delivery used when <code>DELIVER_TO_APPLICATION</code> delivery method is selected."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique ID of this service output."
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the document service output."
          },
          "outputType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The format of the document output from the initial component of this service."
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_tcpNetworkSettingsBean" : {
      "title" : "tcpNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_networkSettingsBean"
      }, {
        "properties" : {
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The fully qualified domain name or IP address of the OFTP server."
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The TCP port on which the server listens for connection requests. This field does not apply to OFTP V1 X.25."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_oftpServerExchangePointBean" : {
      "title" : "oftpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverExchangePointBean"
      }, {
        "properties" : {
          "SSID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The start session identification (SSID) of the local or remote party. Trading partners exchange SSIDs to identify\r\neach other in the protocol handshake and session setup."
          },
          "backendGenerateReceipt" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the trading engine should pause before generating and sending EERPs (signed end-to-end responses)\r\nand NERPs (signed negative end responses). If this option is set to <code>true</code>, the trading engine waits\r\nfor a back-end system to submit messages containing the correct metadata for generating EERPs and NERPs. If this\r\noption is set to <code>false</code>, the trading engine synchronously generates and sends EERPs and NERPs without\r\nwaiting for the back-end system to respond."
          },
          "creditCounter" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The number of consecutive data exchange buffers sent by the speaker before it must wait for a credit (CDT)\r\ncommand from the listener. The credit value is only applied to data flow in the data transfer phase.\r\nThe speaker's available credit is initialized to SSIDCRED when it receives a start file positive answer (SFPA)\r\ncommand from the listener. It is zeroed by the end file (EFID) command. After negotiation, the smallest size must\r\nbe selected in the answer of the responder or a protocol error aborts the session."
          },
          "dataExchangeBuffer" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The length in octets of the largest acceptable data exchange buffer. The length includes the command octet,\r\nbut not the stream transmission header. After negotiation, the smallest size is selected. The value in this\r\nfield maps to the SSIDSDEB field in the SSID OFTP protocol command."
          },
          "networkSettings" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The network settings for the embedded server referred by this exchange point. The following types are supported:\r\n<ol><li><b>TCP</b>. Transmission Control Protocol is the basic communications protocol of the Internet.</li>\r\n<li>X.25. An ITU-T standard protocol suite for packet-switched wide area network communications.</li>\r\n<li>X.25 over ISDN (B-channel). Integrated Services Digital Network broadband channel\r\nsupports data transfers over telephone networks</li></ol>",
            "$ref" : "#/definitions/xml_ns0_networkSettingsBean"
          },
          "protocolVersion" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The protocol version being used (1.3 or 1.4 for OFTP V1 and 2.0 for OFTP V2).",
            "$ref" : "#/definitions/xml_ns0_protocolVersion"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The maximum number of seconds the server waits when reading data from a partner."
          },
          "sessionPassword" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "OFTP session password. If password verification is enabled before establishing a connection, this field is\r\nmandatory. The password can be no longer than eight alphanumeric characters and is case sensitive."
          },
          "useSessionPassword" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether a password verification is required before establishing the connection.\r\n<p/>\r\nIf this is an exchange for receiving messages from a partner, your community presents this\r\npassword to the partner. The password is compared to the one the partner has stored for your\r\ncommunity.\r\n<p/>\r\nIf this is an exchange for sending messages to a partner, the partner must present this password\r\nto your community. The password is compared to the one your community has stored for the\r\npartner.\r\n<p/>\r\nIn either case, the passwords must match to establish the connection."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_documentAgreementOutputPartnerBean" : {
      "title" : "documentAgreementOutputPartnerBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementOutputBean"
      }, {
        "properties" : {
          "deliveryId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the partner delivery to use as the delivery to the destination partner."
          },
          "partnerId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The destination partner name. This is used when <b>outputType</b> is set to USE_ALTERNATE_DELIVERY_PARTNER."
          },
          "routingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A Routing ID belonging to the destination partner."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_response" : {
      "title" : "response",
      "allOf" : [ { } ],
      "description" : ""
    },
    "xml_ns0_hl7v2InboundAgreementBean" : {
      "title" : "hl7v2InboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_hl7v2AgreementBean"
      }, {
        "properties" : {
          "ackDeliveryExchangeId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you selected an acknowledgement rule that generates acknowledgements, and you have multiple delivery\r\nexchanges that are valid for this agreement, you can select a specific delivery exchange to handle the\r\ndelivery of the acknowledgements."
          },
          "ackEnvelopingMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want to use either a specific outbound agreement to determine the\r\nacknowledgement processing or the interchange IDs and application IDs of the incoming Hl7v2 document as\r\nvalues (reversed) for the acknowledgement back to the sender. </br> Possible options:\r\n<ul>\r\n<li><b>DEFAULT</b> Select this option if you want B2Bi to use the message control ID of the incoming\r\ndocument.</li>\r\n<li><b>OUTBOUND_AGREEMENT</b> Select this option if you want to use a specific outbound agreement to\r\ndetermine the acknowledgement processing.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_ackEnvelopingMode"
          },
          "ackTransportReceiver" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you selected Generate acknowledgement rule that generates acknowledgements, and if you selected to\r\nUse alternate delivery partner, select a specific party as the receiving party of the acknowledgement."
          },
          "ackTransportReceiverRoutingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you selected Generate acknowledgement rule that generates acknowledgements, and if you selected to\r\nUse alternate delivery partner, select a specific Routing Id from the specific party selected as the\r\nreceiving party of the acknowledgement."
          },
          "applicationAcknowledgement" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Option for returning acknowledgments to the application that sent the inbound message. </br>Possible\r\noptions:\r\n<ul>\r\n<li><b>AR</b> As requested</li>\r\n<li><b>AL</b> Always</li>\r\n<li><b>NE</b> Never</li>\r\n<li><b>ER</b> Error/Reject only</li>\r\n<li><b>SU</b> Successful completion only</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_generateAckRuleType"
          },
          "customRejectionRule" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <i>CUSTOM_TYPE</i> rejection rule is selected, specify the document types to be rejected."
          },
          "documentServiceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The service used for acknowledgement processing. If there are not any services to select, configure the\r\nservice and pass it to this field."
          },
          "dupAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Sequence numbers are checked for duplicates by comparing to documents already received. If a duplicate\r\nis detected for an inbound document, the selected duplicate action is respected. </br> Possible\r\noptions:\r\n<ul>\r\n<li><b>WARN_AND_PROCESS</b> Allows an inbound document to be processed successfully, with a logged\r\nwarning.</li>\r\n<li><b>FAIL_AND_PARK</b> Processing is halted and an error is logged.</li>\r\n<li><b>IGNORE</b> No action.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_outOfSequenceActionType"
          },
          "messageControlIdGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Generator for message control counter. Default value is $MsgId:9$"
          },
          "outOfSeqAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Action to take in case sequenceCheck field is true. </br> Possible options:\r\n<ul>\r\n<li><b>WARN_AND_PROCESS</b> Allows an inbound document to be processed successfully, with a logged\r\nwarning.</li>\r\n<li><b>FAIL_AND_PARK</b> Processing is halted and an error is logged.</li>\r\n<li><b>IGNORE</b> No action.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_outOfSequenceActionType"
          },
          "outboundAgreementForAckEnvelopeId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you selected Generate acknowledgement rule that generates acknowledgements, and if you selected to\r\nUse an Outbound Agreement for acknowledgement enveloping\" above, select an outbound agreement that\r\nprovides the enveloping. If there are not any outbound agreements to select, add one and pass it to\r\nthis field."
          },
          "overrideAckTransportReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want to identify a specific party as the receiving party of the\r\nacknowledgement. Then use the Partner, Routing ID and Delivery fields to identify the partner and\r\nassociated delivery exchange."
          },
          "rejectionRule" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The condition for rejecting interchanges, selected from a drop-down list. Interchanges are rejected\r\ndepending on where errors are found. For example, if there is an error in one transaction set, the\r\nwhole interchange is rejected. </br> Possible options:\r\n<ul>\r\n<li><b>NONE</b> (default)</li>\r\n<li><b>ENTIRE_BATCH</b> If any documents are stopped, reject entire batch</li>\r\n<li><b>SAME_TYPE</b> If any documents are stopped, reject documents of the same type</li>\r\n<li><b>CUSTOM_TYPE</b> If any documents are stopped, reject documents of the following types - If you\r\nselect this option you must enter the document types in the Custom rules field.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_rejectionRuleType"
          },
          "sequenceCheck" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange control number for inbound messages is verified to be in sequence. So, for example, if\r\nthe user sets the next expected interchange control number to 123456, the system validates that the\r\nnext inbound document has an interchange control number of 123456. If the validation succeeds the field\r\nis updated to 123457. If the validation fails, the out of sequence action is applied."
          },
          "useCharacterSet" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable character set for detection/matching"
          },
          "useProcessingId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable processing id for detection/matching"
          },
          "useProcessingMode" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable processing mode for detection/matching"
          },
          "useReceiverApplicationNamespaceId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver application namespace id for detection/matching </br> Read only field"
          },
          "useReceiverApplicationUniversalId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver application universal id for detection/matching"
          },
          "useReceiverApplicationUniversalIdType" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver application universal id type for detection/matching"
          },
          "useReceiverFacilityNamespaceId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver facility namespace id for detection/matching"
          },
          "useReceiverFacilityUniversalId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver facility universal id for detection/matching"
          },
          "useReceiverFacilityUniversalIdType" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver facility universal id type for detection/matching"
          },
          "useSenderApplicationNamespaceId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender application namespace id for detection/matching </br> Read only field"
          },
          "useSenderApplicationUniversalId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender application universal id for detection/matching"
          },
          "useSenderApplicationUniversalIdType" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender application universal id type for detection/matching"
          },
          "useSenderFacilityNamespaceId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender facility namespace id for detection/matching"
          },
          "useSenderFacilityUniversalId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender facility universal id for detection/matching"
          },
          "useSenderFacilityUniversalIdType" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender facility universal id type for detection/matching"
          }
        }
      } ],
      "description" : ""
    },
    "json_PollingExchangePointBean" : {
      "title" : "PollingExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ConsumerExchangePointBean"
      }, {
        "properties" : {
          "usePreferredNodes" : {
            "type" : "boolean",
            "description" : "If there are one or more nodes for the trading engine, you can select one or more as the preferred\r\nnodes for consuming messages. If the preferred nodes are running, these are used to process messages.\r\nIf the preferred nodes are stopped, work is distributed among the remaining running available nodes.\r\nSelecting preferred nodes lets you manage work distribution among nodes.\r\n<p>\r\nThis option is available for integration pickup and trading delivery exchanges that poll for messages.\r\n</p>\r\n<p>\r\nIn general, this setting should not be used. Usually it is best to let the trading engine automatically\r\ndetermine which node should be responsible for initiating the polling of which exchange point. This\r\nsetting is useful if you have a cluster that spans geographical locations and each location has its own\r\nlocal transport servers. In this situation, you would use this setting to ensure the exchange points\r\nassociated with the transport servers are assigned to nodes in the vicinity of the transport servers.\r\n</p>"
          },
          "pollingIntervalSeconds" : {
            "type" : "number",
            "description" : "Returns the interval in seconds the trading engine waits before polling for messages to retrieve."
          },
          "maxMessagesPerPollingInterval" : {
            "type" : "number",
            "description" : "Returns the highest number of messages the system can retrieve each time it polls."
          },
          "preferredNodes" : {
            "type" : "array",
            "description" : "Get the preferred nodes used to process messages. See <code>usePreferredNodes</code>.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "delivery" : {
            "type" : "string",
            "description" : "Returns a link to the delivery exchange point which will be given to trading partners for sending messages."
          }
        }
      } ],
      "description" : ""
    },
    "json_DocumentServiceOutputBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the document service output."
        },
        "deliveryMethod" : {
          "description" : "The delivery method for this service. You can use one of the following values:\r\n<ul>\r\n<li><b>DELIVER_TO_PARTNER</b> </br> Select this option if the message is to be sent to a trading partner. This option is\r\nthe default setting for the following document formats: MEC XML, XML, In-house and IDoc.</li>\r\n<li><b>RETURN_TO_SENDER</b> </br> Select this option if you are creating a service to support Web Services or MLLP trading,\r\nand the service requires a return exchange to the originating party.</li>\r\n<li><b>DELIVER_TO_APPLICATION</b> </br> Select this option if the delivery endpoint of the document exchange is a back-end\r\napplication. This option is the default setting for the following document formats: EDIFACT, X12, VDA and\r\nTRADACOMS. If you select this option, you must also provide the target application for the document delivery.</li>\r\n<li><b>CONTINUE_TO_NEXT_STEP</b> </br> Select this option if the message is to be sent to the next content-based\r\nprocessing after the processing steps specified in the service have been executed.</br>\r\n<b>Note:</b> This option is for metadata services only. </li>\r\n</ul>",
          "$ref" : "#/definitions/json_DeliveryMethod"
        },
        "exchangePointId" : {
          "type" : "string",
          "description" : "The ID of the Application Delivery used when <code>DELIVER_TO_APPLICATION</code> delivery method is selected."
        },
        "exchangePoint" : {
          "type" : "string",
          "description" : "The Application Delivery used when DELIVER_TO_APPLICATION delivery method is selected."
        },
        "outputType" : {
          "type" : "string",
          "description" : "The format of the document output from the initial component of this service."
        },
        "components" : {
          "type" : "string",
          "description" : "Configuration for document, post enveloping and post transfer Components which specify steps in the processing sequence."
        }
      },
      "title" : "DocumentServiceOutputBean",
      "description" : ""
    },
    "json_XmlOutboundAgreementBean" : {
      "title" : "XmlOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_XmlAgreementBean"
      }, {
        "properties" : {
          "enveloperId" : {
            "type" : "string",
            "description" : "ID of the service to be used for enveloping outbound XML documents."
          },
          "enveloper" : {
            "type" : "string",
            "description" : "Reference to an enveloper registry object."
          },
          "testFlag" : {
            "type" : "boolean",
            "description" : "Set this field to true if the agreement is for testing and not for production."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_b2biComponentBean" : {
      "title" : "b2biComponentBean",
      "allOf" : [ {
        "properties" : {
          "resourceAbsFilePath" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The absolute file path for the resource that provides the functionality for this component."
          },
          "resourceName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the resource that provides the functionality for this component."
          },
          "resourceType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the resource that provides the functionality for this component."
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_DeliveryMethod" : {
      "type" : "string",
      "title" : "DeliveryMethod",
      "description" : "",
      "enum" : [ "CONTINUE_TO_NEXT_STEP", "DELIVER_TO_PARTNER", "RETURN_TO_SENDER", "DELIVER_TO_APPLICATION" ]
    },
    "xml_ns0_x12InboundFunctionalGroupBean" : {
      "title" : "x12InboundFunctionalGroupBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_functionalGroupBean"
      }, {
        "properties" : {
          "functionalGroupId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS 479) Identifies a group of application related transaction sets."
          },
          "identifierCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS480) Code indicating the version, release, sub-release, and industry identifier of the EDI standard being used,\r\nincluding the GS and GE segments. If code in DE455 in GS segment is X, then in DE 480 positions 1-3 are the version number;\r\npositions 4-6 are the release and subrelease, level of the version; and positions 7-12 are the industry\r\nor trade association identifiers (optionally assigned by user); if code in DE455 in GS segment is T, then other formats are allowed."
          },
          "receiverMessagingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS 124) Identifies the party receiving transmission. This code is agreed to by trading partners."
          },
          "responsibleAgencyCode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS 455) Identifies the issuer of the standard. This code is used in conjunction with GS 480 below.",
            "$ref" : "#/definitions/xml_ns0_x12IndustryIdentifier"
          },
          "senderMessagingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS 142) Identifies the party sending the transmission. This code is agreed to by trading partners."
          },
          "useFunctionalGroupId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want B2Bi to use a group of application related transaction sets at runtime."
          },
          "useIdentifierCode" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want that B2Bi to parse the version, release, sub-release, and industry identifier at runtime."
          },
          "useReceiverMessagingId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want that B2Bi to parse the interchange receiver id value at runtime."
          },
          "useResponsibleAgencyCode" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want that B2Bi to parse the issuer of the standard at runtime."
          },
          "useSenderMessagingId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want that B2Bi to parse the interchange sender id value at runtime."
          }
        }
      } ],
      "description" : "Author: srybak\r\nDate: 5/23/14"
    },
    "xml_ns0_secureTcpNetworkSettingsBean" : {
      "title" : "secureTcpNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_tcpNetworkSettingsBean"
      }, {
        "properties" : {
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires signing messages using a message digest\r\nalgorithm. But the choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm."
          },
          "enableClientAuthenticatedTls" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the partner's certificate should be used for authentication when the partner connects to the\r\nserver, when using TLS option is enabled. If this option is set to <code>true</code>, partners are required\r\nto present a certificate for identity verification."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the cipher suites supported by the server are stated, in order for you select the level of\r\nsecurity that suits your needs and enables communicating with others who might have different security\r\nrequirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          }
        }
      } ],
      "description" : ""
    },
    "json_ProcessingSeverity" : {
      "type" : "string",
      "title" : "ProcessingSeverity",
      "description" : "",
      "enum" : [ "ERROR", "FATAL", "WARNING" ]
    },
    "xml_ns0_pesitPriority" : {
      "type" : "string",
      "title" : "pesitPriority",
      "description" : "",
      "enum" : [ "LOW", "MEDIUM", "HIGH" ]
    },
    "xml_ns0_identifier" : {
      "type" : "string",
      "title" : "identifier",
      "description" : "",
      "enum" : [ "ISA13", "GS06", "_0020", "_0062", "MSH00010", "MSH00013", "SNRF", "FIELD05", "FIELD06", "UNG0048", "LATEST_TRANSMISSION_NUMBER", "NEXT_INTERCHANGE_CONTROL", "NEXT_GROUP_CONTROL", "NEXT_EXPECTED_SEQUENCE_NUMBER" ]
    },
    "xml_ns0_emailAuthenticationType" : {
      "type" : "string",
      "title" : "emailAuthenticationType",
      "description" : "",
      "enum" : [ "PARTNER_EMAIL_ACCOUNTS", "PD_EMAIL_ADDRESSES" ]
    },
    "json_CertificateUsage" : {
      "type" : "string",
      "title" : "CertificateUsage",
      "description" : "",
      "enum" : [ "ENCRYPTION", "VERIFICATION", "ANY", "OTHER", "NON_REPUDIATION", "DIGITAL_SIGNATURE" ]
    },
    "json_IdocInboundAgreementBean" : {
      "title" : "IdocInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_IdocAgreementBean"
      }, {
        "properties" : {
          "usePartnerNumberSender" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerNumberSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerNumberReceiver" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerNumberReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerPortSender" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerPortSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerPortReceiver" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerPortReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerTypeSender" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerTypeSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerTypeReceiver" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerTypeReceiver</code> field is used for matching/selection at runtime."
          },
          "useEdiVersion" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>ediVersion</code> field is used for matching/selection at runtime."
          },
          "useEdiStandardFlag" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>ediStandardFlag</code> field is used for matching/selection at runtime."
          },
          "useClient" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>client</code> field is used for matching/selection at runtime."
          },
          "useTestIndicator" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>testIndicator</code> field is used for matching/selection at runtime."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_x12InboundAgreementBean" : {
      "title" : "x12InboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_x12AgreementBean"
      }, {
        "properties" : {
          "ackDeliveryExchangeId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you selected an acknowledgement rule that generates acknowledgements, and you have multiple delivery exchanges\r\nthat are valid for this agreement, you can select a specific delivery exchange to handle the delivery of the\r\nacknowledgements."
          },
          "ackEnvelopingType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify the acknowledgement enveloping type. The accepted values are:\r\n<p/>\r\n<ul>\r\n<li><b>DEFAULT</b></li>\r\n<p>Select this option if you want B2Bi to use interchange IDs and application IDs of the incoming X12 document as values\r\n(reversed) for the acknowledgment back to the sender.</p>\r\n<li><b>OUTBOUND_AGREEMENT</b></li>\r\n<p>Select this option if you want to use a specific outbound agreement to determine the acknowledgment processing. </p>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_ackEnvelopingType"
          },
          "ackGroupCntrlNumberGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Assigned number originated and maintained by the sender (GS 06)."
          },
          "ackGroupTimeFormat" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select one of the following time formats:\r\n<ul>\r\n<li><b>HHMM</b></li>\r\n<li><b>HHMMSS</b></li>\r\n<li><b>HHMMSSD</b></li>\r\n<li><b>HHSSMMDD</b></li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_groupTimeFormatType"
          },
          "ackInterchangeCntrlNumberGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe data interchange information code control number. This is the starting value of unique identifiers for\r\noutbound messages. By default, the identifier increases by 1 for each additional message (ISA13). This is an\r\ninterchange envelope parameter.\r\n</p>"
          },
          "ackTransSetCntrlNumberGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> A control number assigned by the sender and stored in the transaction set header. The number must be unique\r\nin the functional group (ST02). </p>"
          },
          "ackTransportReceiverId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you selected an acknowledgement rule that generates acknowledgements, and <b>overrideAckTransportReceiver</b>\r\nis set to <code>true</code>, select a specific party as the receiving party of the acknowledgement."
          },
          "ackTransportReceiverRoutingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you selected an acknowledgement rule that generates acknowledgements, and <b>overrideAckTransportReceiver</b>\r\nis set to <code>true</code>, select a specific Routing ID from the specific party selected as the receiving party\r\nof the acknowledgement."
          },
          "bypassEdiProcessing" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <code>true</code>, all inbound processing options will be ignored. By default, this option is set to\r\n<code>false</code>. <p/> <p> This option improves the performance of B2Bi when handling large interchanges. If\r\nyou select this option, the trading engine handles incoming interchanges without unpacking the envelopes. The\r\ntrading engine reads only the interchange header and transaction set header segment (ST). The entire interchange\r\nis sent to the map as a single message. Regular EDI logic is not applied. For this reason, no acknowledgements\r\ncan be automatically generated and sent. </p>"
          },
          "checkControlNumbs" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange control number for inbound messages is verified to be in sequence. So, for example, if the user\r\nsets the next expected interchange control number to 123456, the system validates that the next inbound document\r\nhas an interchange control number of 123456. If the validation succeeds the field is updated to 123457. If the\r\nvalidation fails, the out of sequence action is applied."
          },
          "checkGroupControlNumbs" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The group control numbers for inbound messages is verified to be in sequence. So, for example, if the user\r\nsets the next expected group control number to 123456, the system validates that the next inbound document\r\nhas an group control number of 123456. If the validation succeeds the field is updated to 123457. If the\r\nvalidation fails, the out of sequence action is applied."
          },
          "compositeElementSeperator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for X12 <code>Group level processing</code> mode.\r\n<p/>\r\n<p>\r\nEnter the character to use as the composite element separator (ISA16). The field uses a colon as the\r\ndefault value. Alternately, you can use a hex code.\r\n</p>"
          },
          "customRejectionRule" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <code>\"If any documents are stopped, reject documents of the following types\"</code> rejection rule is\r\nselected, specify the document types to be rejected."
          },
          "dupAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The action to take for non-sequential interchange and group control numbers. Options are:\r\n<ul>\r\n<li><b>WARN_AND_PROCESS</b></li>\r\n<p>Allows an inbound interchange to be processed successfully, but a warning is posted.</p>\r\n<li><b>FAIL_AND_PARK</b></li>\r\n<p>Processing is halted and an error is posted.</p>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_outOfSequenceActionType"
          },
          "dupCheckControlNumbs" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Interchange control numbers are checked for duplicates, by comparing to interchanges already received. If a\r\nduplicate is detected for an inbound interchange, the duplicate action is respected."
          },
          "dupCheckGroupControlNumbs" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Group control numbers are checked for duplicates, by comparing to groups already received. If a duplicate is\r\ndetected for an inbound group, the duplicate action is respected."
          },
          "generateAckRule" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The condition for sending acknowledgments. Options are:\r\n<ul>\r\n<li><b>NO</b></li>\r\n<li><b>YES_NON_DETAILED</b></li>\r\n<li><b>YES_DETAILED</b></li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_generateAckRuleType"
          },
          "outOfSeqAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The action to take for non-sequential interchange and group control numbers. Options are:\r\n<ul>\r\n<li><b>WARN_AND_PROCESS</b></li>\r\n<p>Allows an inbound interchange to be processed successfully, but a warning is posted.</p>\r\n<li><b>FAIL_AND_PARK</b></li>\r\n<p>Processing is halted and an error is posted.</p>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_outOfSequenceActionType"
          },
          "outboundAgreementForAckEnvelopeId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you selected an acknowledgment rule that generates acknowledgements, and <b>ackEnvelopingType</b> is set to\r\n<code>OUTBOUND_AGREEMENT</code>, select an outbound agreement that provides the enveloping. If there are not any\r\noutbound agreements to select, a warning message will be returned."
          },
          "overrideAckTransportReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want to identify a specific party as the receiving party of the acknowledgement. Then\r\nuse <b>ackTransportReceiverId</b>, <b>ackTransportReceiverRoutingId</b> and <b>ackDeliveryExchangeId</b> to\r\nidentify the partner and the associated delivery exchange."
          },
          "rejectionRule" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The condition for rejecting interchange. Interchanges are rejected depending on\r\nwhere errors are found. For example, if there is an error in one transaction set, the whole interchange is\r\nrejected.",
            "$ref" : "#/definitions/xml_ns0_rejectionRuleType"
          },
          "serviceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The service used for acknowledgement processing. If there are not any services to select, configure the service\r\nand pass it to this field."
          },
          "useInterchangeReceiverId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want that B2Bi to parse the interchange receiver id value at runtime."
          },
          "useInterchangeReceiverIdQualifier" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want that B2Bi to parse the interchange receiver id qualifier value at runtime."
          },
          "useInterchangeSenderId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want that B2Bi to parse the interchange sender id value at runtime."
          },
          "useInterchangeSenderIdQualifier" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want that B2Bi to parse the interchange sender id qualifier value at runtime."
          },
          "useX12TestIndicator" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want that B2Bi to parse the X12 test indicator value at runtime."
          }
        }
      } ],
      "description" : ""
    },
    "json_BusinessProtocol" : {
      "type" : "string",
      "title" : "BusinessProtocol",
      "description" : "",
      "enum" : [ "AS1", "AS2", "AS3", "AS4", "SecureFile", "CXML", "Email", "OFTP_1_3", "OFTP_2_0", "PeSIT", "PGP", "Raw", "Swift" ]
    },
    "xml_ns0_attributeTemplateBean" : {
      "title" : "attributeTemplateBean",
      "allOf" : [ {
        "properties" : {
          "fieldStyle" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select whether to display a single value, a single selectable value or a list of selectable values.",
            "$ref" : "#/definitions/xml_ns0_fieldStyle"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique ID <code>String</code> for this attribute."
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A name for this attribute to identify it."
          },
          "possibleValues" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enter the value or values that are available to select. Available only if the attribute field style is\r\nSINGLESELECT or MULTISELECT."
          },
          "required" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if the attribute is to be included on all exchanges."
          },
          "usedForProcessing" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option to make this attribute available as a criteria for conditional message processing."
          },
          "usedForSearching" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this check box to make this attribute a valid search criteria."
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_httpProxyBean" : {
      "title" : "httpProxyBean",
      "allOf" : [ {
        "properties" : {
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The fully qualified domain name or IP address of the HTTP proxy."
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port through which outbound HTTP traffic is routed."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The user name and password to connect to the server. Credentials are used if the proxy requires user name\r\nand password for basic authentication.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_PesitProducerExchangePointBean" : {
      "title" : "PesitProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The IP address or the network name of the trading partner PeSIT server to connect to. This must be the fully\r\nqualified domain name or IP address of the PeSIT server your community connects to for sending messages.<p/>"
          },
          "port" : {
            "type" : "number",
            "description" : "The port on which the partner PeSIT server listens for connection requests.<p/>"
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "The maximum time in seconds to wait for a reply from the server before disconnecting."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the\r\nconnection.<p/>"
          },
          "overrideCommunitySettings" : {
            "type" : "boolean",
            "description" : "Controls whether to override the community settings in a Partner Delivery. For Application Delivery this value\r\nshould be false. <p/>"
          },
          "callerIdentification" : {
            "description" : "Holds the caller's protocol identity (P13) and password requirements. <p/>",
            "$ref" : "#/definitions/json_PesitIdentificationBean"
          },
          "serverIdentification" : {
            "description" : "Holds the partner server's protocol identity (PI4) and password requirements.  <p/>\r\nFor Application Delivery you must then enter a specific identifier for PI4 if finalDestinationEnabled flag is set to false. This value must\r\ncorrespond to the value used by the application to identify the server. <p/>",
            "$ref" : "#/definitions/json_PesitIdentificationBean"
          },
          "finalDestinationEnabled" : {
            "type" : "boolean",
            "description" : "Use the final destination ID from the message - Set to true on an Application Delivery to have the trading engine\r\nread pesit.finalDestinationId.out (which corresponds to PI62), and use it as PI4. When set to false on an Application\r\nDelivery, the Remote Identification should have restrictedToId set to true and an identifier set. <p/>\r\nThis value should be false for Partner Delivery."
          },
          "bufferSize" : {
            "type" : "number",
            "description" : "Max data unit size in bytes (PI25): The largest chunk of data, in bytes, to be transferred at one time. For\r\nhigh-speed networks, use the default 32700 bytes. This value is related to the client setting for record length.\r\n<p/>\r\nThe value of this field must be the same or larger than the value of the record length field."
          },
          "kbPerSyncPoint" : {
            "type" : "number",
            "description" : "Intervals between sync points (Kbytes): Each time an amount of data equal to this value has been sent, the\r\nclient is expected to ask the server to confirm whether data totaling this value has been received. This represents\r\na check point in the progress of a file transfer. If a connection is lost before a file transfer has been\r\ncompleted, the transfer resumes (upon restart of the transport) at the point of the last successful check point. <p/>\r\nThe default value is 1024 kilobytes (1 megabyte).  <p/>\r\nThis setting corresponds to the pacing setting in Axway Transfer CFT. <p/>"
          },
          "maxOutstandingSyncPoints" : {
            "type" : "number",
            "description" : "Sync acknowledgement window: The number of check-point cycles that the client waits for the server to respond\r\nto a request to confirm file-transfer progress. For example, if the value of Kb per sync point (pacing) is 1024\r\n(1 megabyte) and the value of this field is 1, the client stops sending data after 1024 kilobytes unless the\r\nserver responds, although the transfer remains active.  <p/>\r\nIf this value is 2, the client keeps sending until 2 megabytes (1024 x 2) of data  are sent, and so on. <p/>\r\nIf the client's value for this field is 0 (zero), the client does not ask the server to confirm at intervals the\r\namount of data received.  <p/>\r\nIf the server's value for this field is 0, the server does not send confirmations at intervals of data received.\r\nThe default value is 3. In most situation this is the correct value. <p/>\r\nThis setting corresponds to the chkw setting in Axway Transfer CFT."
          },
          "enableAcks" : {
            "type" : "boolean",
            "description" : "Expect acknowledgments - this should be true if you expect the remote application or partner to send a receipt to\r\nacknowledge receiving each message sent.  <p/>"
          },
          "supportNegativeAcknowledgement" : {
            "type" : "boolean",
            "description" : "If expect acknowledgements is enabled, set this to true to support negative acknowledgements. <p/>"
          },
          "fileName" : {
            "type" : "string",
            "description" : "File name (PI12) - Name of the file, forced to uppercase at runtime. Often, the real name of the file is delivered in\r\nin File label (customFilename)."
          },
          "customFilename" : {
            "type" : "string",
            "description" : "File label (PI37) - Logical name of the file. It is used when overwriteFileLabel is set to true. <p/>"
          },
          "serviceParam" : {
            "type" : "string",
            "description" : "Free text (PI99) - Any text string. Often it is used to transfer metadata. <p/>"
          },
          "fileType" : {
            "type" : "number",
            "description" : "The file type (PI11) - Some monitors use this. The default value is 0.  <p/>"
          },
          "dataEncoding" : {
            "description" : "Data encoding (PI16) <p/><ul>\r\n<li>TEXT <p/>\r\nUsed for ASCII files\r\n</li>\r\n<li>BINARY <p/>\r\nUsed for all other file types\r\n</li>\r\n</ul>",
            "$ref" : "#/definitions/json_PesitDataEncodingType"
          },
          "recordFormat" : {
            "description" : "Record format (PI31). Select one of the following: <p/><ul>\r\n<li>FIXED <p/>\r\nFor fixed length records</li>\r\n<li>VARIABLE <p/>\r\nFor variable length records</li>\r\n</ul>",
            "$ref" : "#/definitions/json_PesitRecordFormat"
          },
          "recordLength" : {
            "type" : "number",
            "description" : "Record length (PI32) - Record length for fixed records, or maximum record length for variable records.  <p/>"
          },
          "priority" : {
            "description" : "Priority (PI17) - Select an option: <p/><ul>\r\n<li>HIGH <p/>\r\nHighest priority</li>\r\n<li>MEDIUM <p/>\r\nDefault</li>\r\n<li>LOW <p/>\r\nLowest priority</li>\r\n</ul>",
            "$ref" : "#/definitions/json_PesitPriority"
          },
          "compressionType" : {
            "description" : "Compression (PI21) - Controls the compression of the file during the transfer (compression on the fly).\r\nSelect a compression method:  <p/><ul>\r\n<li>NONE <p/>\r\nNo compression. (default)</li>\r\n<li>HORIZONTAL <p/>\r\nCompresses the consecutive identical characters in the records.</li>\r\n<li>Vertical <p/>\r\nRecords are compared to one another and the consecutive identical columns are compressed.</li>\r\n<li>BOTH <p/>\r\nCombination of the above two compression methods.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_PesitCompressionType"
          },
          "connectionTimeoutSecs" : {
            "type" : "number",
            "description" : "PeSIT Tc timeout. The time the caller waits for a connection acknowledgment from the server. <p/>"
          },
          "transferTimeoutSecs" : {
            "type" : "number",
            "description" : "PeSIT Td timeout. The time the caller keeps the connection open, waiting for another message to send.  <p/>"
          },
          "networkTimeoutSecs" : {
            "type" : "number",
            "description" : "PeSIT Tr timeout. The time the caller waits for an expected and effective network disconnection, before forcing\r\nit. <p/>"
          },
          "protocolTimeoutSecs" : {
            "type" : "number",
            "description" : "PeSIT Tp timeout. The time the caller waits for the response of the remote, in the middle of a protocol action\r\n(such as a transfer). <p/>"
          },
          "allocationSizePercentage" : {
            "type" : "number",
            "description" : "Destination file size delta for transformed files (+/- in %) - If you configure an \"on the fly\" transformation,\r\nyou can use this setting to adjust the file size info sent with the PeSIT CREATE order. That is because the\r\n\"on the fly\" transformation changes the file size while sending. If no transformation is configured, this value\r\nis ignored.  <p/>"
          },
          "ssl" : {
            "type" : "boolean",
            "description" : ""
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : ""
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "cftCompattibilityEnabled" : {
            "type" : "boolean",
            "description" : ""
          },
          "hostNameVerificationEnabled" : {
            "type" : "boolean",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "json_IsdnClientNetworkSettingsBean" : {
      "title" : "IsdnClientNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_IsdnNetworkSettingsBean"
      }, {
        "properties" : {
          "remoteNumber" : {
            "type" : "string",
            "description" : "For ISDN, the partner’s ISDN number. If prefixes are required to access an external\r\nline or an international number, include those in the number."
          },
          "localNumber" : {
            "type" : "string",
            "description" : "The ISDN number identifying the caller (the instance of the trading engine).\r\nDepending on the telecom operator’s configuration, you must set this to your number\r\nor let the telecom equipment fill it in for you."
          },
          "remoteNUA" : {
            "type" : "string",
            "description" : "The X.121 address of the partner if the call is to be routed over X.25.\r\nIf the call is established directly to the partner’s ISDN number,\r\nthis number may be optional depending on its access control configuration."
          },
          "localNUA" : {
            "type" : "string",
            "description" : "The X.25 address identifying the caller (the instance of the trading engine).\r\nComplete this field if the call is routed over an X.25 network that requires\r\nit or if the remote partner uses X.25 access control based on the originating address."
          },
          "x25PacketSize" : {
            "type" : "number",
            "description" : "The size of the X.25 packets to be sent over the network.\r\nIf the value is blank the network’s default value is used."
          },
          "x25WindowSize" : {
            "type" : "number",
            "description" : "The number of X.25 packets that can be sent without acknowledgment.\r\nIf the value is blank the network’s default value is used."
          },
          "callUserData" : {
            "type" : "string",
            "description" : "This value is passed to the X.25 connection request.\r\nDepending on the configuration on the partner’s side,\r\nthis may be used to select the software responsible for answering the call."
          }
        }
      } ],
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "xml_ns0_vdaOutboundAgreementBean" : {
      "title" : "vdaOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_vdaAgreementBean"
      }, {
        "properties" : {
          "sequenceNumberGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Generator for previous document number. The default value is \"$TransNumber:5$\"."
          }
        }
      } ],
      "description" : ""
    },
    "json_EdifactDocumentAgreementBean" : {
      "title" : "EdifactDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementBean"
      }, {
        "properties" : {
          "detectBGMContent" : {
            "type" : "boolean",
            "description" : "Select this option if you want to use this document agreement only on a specific BGM content type."
          },
          "bgmDocNameCode" : {
            "type" : "string",
            "description" : "The BGM name code for which this document agreement is used. If <b>detectBGMContent</b> is <code>true</code>,\r\nthis identification field will be used for matching/selection."
          }
        }
      } ],
      "description" : ""
    },
    "json_SftpConsumerExchangePointBean" : {
      "title" : "SftpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "cipherSuites" : {
            "type" : "array",
            "description" : "List with cipher suites.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "host" : {
            "type" : "string",
            "description" : "The name of the SSH/SFTP server."
          },
          "port" : {
            "type" : "number",
            "description" : "The port on which the server listens for incoming connections.\r\nThe default port for the SFTP server is 22 (embedded SFTP default for trading is 4022; for application 5022)."
          },
          "passwordAuthentication" : {
            "type" : "boolean",
            "description" : "Whether or not server requires the SFTP client to authenticate using a password"
          },
          "publicKeyAuthentication" : {
            "type" : "boolean",
            "description" : "Whether or not server requires the SFTP client to use public key authentication.\r\n\r\n</p><p>If this exchange is for a community, add the private key to the community.\r\nIf this exchange is for a partner, add the public key to any community that will be trading with the partner.</p>"
          },
          "hostBasedAuthentication" : {
            "type" : "boolean",
            "description" : "Whether or not server requires the SFTP client to use host-based authentication.\r\nBy using this mechanism passwords no longer have to be transferred to the untrusted systems.</p>\r\n<b>Note: </b> per-user SSH public keys can achieve similar effects; but maintaining\r\nper-user keys could be an unwanted administrative overhead"
          },
          "keyUserName" : {
            "type" : "string",
            "description" : "This user name applies to both public/private key pair and host-based authentication."
          },
          "pickupDirectory" : {
            "type" : "string",
            "description" : "The path of the directory on your server where messages are picked up.\r\nWhen the trading engine polls the server for files, it only looks in the pickup directory, not an inbox directory."
          },
          "fileCollisionMode" : {
            "description" : "Use this option to prevent the trading engine from attempting to\r\nretrieve partially written files. There may be some specialized servers, typically\r\nrunning on mainframes, that support only part of the FTP protocol (RFC 959).\r\nIn such cases you may have to clear this check box and take steps of your own to make\r\nsure collisions do not occur. If connecting to a partner's B2Bi or Interchange embedded FTP\r\nserver, use <b>None</b>. This property will be ignored if the filename handling is in append mode.</p>\r\nOptions available:</p>\r\n<ul>\r\n<li><b>None</b> Use this option if the partner's server is B2Bi or Interchange embedded server. </li>\r\n<li><b>Use temp files with inbox</b><p>Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:\r\nc:\\data\\pickup\\inbox.\r\nBut you can use the following because a period is the first character of the inbox directory name:\r\nc:\\data\\pickup\\.inbox</p>When this flag is used, the additional property <b>inboxPath</b> should be set.</li>\r\n<li><b>Use temp file extension</b></p>If you prefer not to use an inbox, select this option.\r\nWhile a file is being written to the pickup directory, a temporary extension is added\r\nso the system knows not to retrieve it because the file is only partially written.\r\nOnce fully written, the temporary extension goes away and the file can be retrieved.\r\n</p>When this flag is used, the additional property <b>tempFileExtension</b> should be set.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_SftpCollisionMode"
          },
          "inboxPath" : {
            "type" : "string",
            "description" : "Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:</br>\r\n&emsp;c:\\data\\pickup\\inbox<br>\r\nBut you can use the following because a period is the first character of the inbox directory name:</br>\r\n&emsp;c:\\data\\pickup\\.inbox"
          },
          "tempFileExtension" : {
            "type" : "string",
            "description" : "If you prefer to not use an inbox, select this option. When a file is being written to the\r\npickup directory, a temporary extension is added so that the system knows not\r\nto retrieve it because the file is only partially written. Once fully written, the\r\ntemporary extension goes away and the file can be retrieved."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection.\r\nThe default is 30 seconds."
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "description" : "Select this if you want the server to delete files after they have been downloaded from it. This option should be\r\nenabled in most cases. If an external server automatically deletes files that have been downloaded, deselect this\r\noption."
          },
          "maxBlockSize" : {
            "type" : "number",
            "description" : "The maximum size of the packets that can be downloaded from an external SFTP server by the SFTP client within the trading engine.\r\nThe client downloads messages in a series of data packets. By default the maximum size is 32768  data packet units.\r\nThe default value is compatible with most SFTP servers. However, when handling messages of a certain size (2-3 megabytes or larger),\r\nsome servers cannot process many packets of the default size and downloading hangs. If this occurs, reduce the packet size maximum."
          },
          "enableFiltering" : {
            "type" : "boolean",
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names"
          },
          "filterPattern" : {
            "type" : "string",
            "description" : "Insert the format of the file names you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names,\r\nextensions, or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file-name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>"
          },
          "applyNegativeFiltering" : {
            "type" : "boolean",
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive; only files matching the pattern are consumed. If set to true it is exclusive;\r\nfiles matching the pattern are ignored, but all other files are consumed."
          },
          "sequenced" : {
            "type" : "boolean",
            "description" : "Specify whether all messages that are consumed by this pickup should be delivered in their original\r\nconsumption order.\r\n<p/>\r\nIn B2Bi message-handling, sequential delivery is the ability to deliver messages in the order they\r\nwere originally consumed on a specific pickup. This is sometimes referred to as first-in-first-out\r\n(FIFO) behavior.\r\n<p/>\r\nSequential message delivery is implemented only for trading engine pickups, not for integration\r\nengine pickups"
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds that the trading engine waits for missing messages of a sequence before taking the appropriate action.\r\nThis feature avoids the blocking of processing when a sequenced message is not available. Default value is of\r\n60 seconds."
          },
          "encodedHostPublicKey" : {
            "type" : "string",
            "description" : "SSH/SFTP server's public key.\r\nIf <i><retrieve></i> keyword is used, the key is automatically retrieved."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "If true, a list of cipher suites should be provided."
          },
          "metadataHierarchy" : {
            "type" : "array",
            "description" : "Set message attributes that correspond to the names of subdirectories.\r\nEach item in the selected attributes list represents another subdirectory level.\r\nFor example, add \"From routing ID\" and \"To routing ID\" to the selected attributes\r\nlist in that order. A message with attributes \"From routing ID\" set to \"ABC\"\r\nand \"To routing ID\" set to \"DEF\" would be delivered to the subdirectory ABC/DEF.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "description" : "This value specifies the maximum number of messages to be consumed over a single connection before the connection is\r\nclosed and reopened on another processing node. As such, this setting effectively controls load balancing.\r\nThe default setting of 1 achieves optimal load balancing at the cost of greater overhead per message.\r\nDepending on your message volume and the load on each node, this value could be increased to avoid the overhead associated\r\nwith reconnecting to the transport server, at the cost of a less well-balanced cluster.\r\n<p></p>This setting only applies to transports where a list of file names is not available. These include POP, JMS and (for Interchange stand-alone) the Synchrony\r\nIntegrator exchange point, which is based on JMS. Exchange points such as these are limited to one connection at a time to prevent concurrency problems.\r\n<p></p>This field is not applicable in a single node environment."
          },
          "usernamePasswordCredentials" : {
            "description" : "The user name and its password to connect to the server.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "privateKeyCredentials" : {
            "description" : "The user name, password and the private key used to connect to server.\r\nThis applies to both public/private key pair and host-based authentication",
            "$ref" : "#/definitions/json_PrivateKeyCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "json_AckEnvelopingMode" : {
      "type" : "string",
      "title" : "AckEnvelopingMode",
      "description" : "",
      "enum" : [ "DEFAULT", "OUTBOUND_AGREEMENT" ]
    },
    "json_PopConsumerExchangePointBean" : {
      "title" : "PopConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The name of the POP server that the trading engine polls for messages sent by your partner. This must be a fully\r\nqualified domain name or IP address."
          },
          "port" : {
            "type" : "number",
            "description" : "The POP server port. By default this is 110."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "Connect timeout (seconds) - Time in seconds the trading engine waits for a connection to the delivery exchange\r\nbefore the attempt times out. By default this is set to 30 seconds."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Read timeout (seconds) - The maximum number of seconds the server waits when reading data from a partner."
          },
          "authenticationType" : {
            "description" : "Authentication type; must be set to 'USER_PASS' or 'APOP'.",
            "$ref" : "#/definitions/json_PopAuthenticationType"
          },
          "senderIdentificationType" : {
            "description" : "Specify how the sender will be identified; must be set to 'PD_EMAIL_ADDRESSES' or\r\n'PARTNER_EMAIL_ACCOUNTS'.",
            "$ref" : "#/definitions/json_EmailAuthenticationType"
          },
          "usernamePasswordCredentials" : {
            "description" : "The user name and password required to connect to the server.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "description" : "Maximum number of messages to be consumed over a single connection before the connection\r\nis closed and reopened on another processing node."
          },
          "sequenced" : {
            "type" : "boolean",
            "description" : "Select this option if you want all messages that are consumed by this pickup to be delivered in their original\r\nconsumption order."
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time limit to wait for missing messages of a sequence before taking the appropriate action."
          },
          "emailUser" : {
            "type" : "string",
            "description" : ""
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "List with cipher suites.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Client use ssl to connect to this server ?."
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "description" : "SSL authentication.  If we're acting as the client, true means we should verify that the\r\nhostname for the certificate given to us by the server matches the host we connected to.\r\nIf we're acting as the server, true means we require the client to present its\r\ncertificate (\"client authentication\")."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "If <b>true</b>, a list of cipher suites should be provided."
          },
          "attachmentsOnly" : {
            "type" : "boolean",
            "description" : "If <b>true</b>, include attachments only."
          }
        }
      } ],
      "description" : ""
    },
    "json_VdaMessagingIdBean" : {
      "title" : "VdaMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MessagingIdBean"
      }, {
        "properties" : {
          "partnerCode" : {
            "type" : "string",
            "description" : "The partner code. For an outbound message, enter the sender ID. For an inbound message, enter the\r\nreceiver ID."
          }
        }
      } ],
      "description" : ""
    },
    "json_PickupGroupStatus" : {
      "type" : "string",
      "title" : "PickupGroupStatus",
      "description" : "",
      "enum" : [ "Allow", "Block" ]
    },
    "xml_ns0_sftpServerExchangePointBean" : {
      "title" : "sftpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverExchangePointBean"
      }, {
        "properties" : {
          "alwaysConsumeFromSubdirs" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify what to do when partners upload messages to subdirectories of the SFTP directories. If this option is\r\nset to <code>true</code>, the users are allowed to write files to any subdirectory under the root path.\r\nOtherwise, the users are allowed to write files to a subdirectory under the root path only when a message\r\nattribute is set up for each subdirectory level."
          },
          "defaultUser" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Default account for the SFTP server.",
            "$ref" : "#/definitions/xml_ns0_sshUserBean"
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The local port used by the embedded SFTP server to listen for incoming connections. The default values are 4022\r\nfor a trading server and 5022 for an application server."
          },
          "modifySftpServerDirectory" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether subdirectory management is enabled on the client side. When this option is set to\r\n<code>true</code>, SFTP clients are allowed to add or remove subdirectories."
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds that B2Bi waits for missing messages of a sequence before taking the appropriate action.\r\nThis feature avoids the blocking of processing when a sequenced message is not available. Default value is of\r\n60 seconds."
          },
          "sequenced" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether all messages that are consumed by this pickup should be delivered in their original\r\nconsumption order.\r\n<p/>\r\nIn B2Bi message-handling, sequential delivery is the ability to deliver messages in the order they\r\nwere originally consumed on a specific pickup. This is sometimes referred to as first-in-first-out\r\n(FIFO) behavior.\r\n<p/>\r\nSequential message delivery is implemented only for trading engine pickups, not for integration\r\nengine pickups"
          }
        }
      } ],
      "description" : ""
    },
    "json_OftpV2ProducerExchangePointBean" : {
      "title" : "OftpV2ProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_OftpProducerExchangePointBean"
      }, {
        "properties" : {
          "requiresSecureAuthentication" : {
            "type" : "boolean",
            "description" : "For OFTP V2 only, this is an extra layer of security to enable senders and receivers to validate each other as\r\ngenuine. There are two requirements to enable secure OFTP authentication: <p/><ul>\r\n<li> Both the sender and receiver must enable secure OFTP authentication. If one party turns it on and the other\r\nparty does not, a protocol error is generated and the session between the parties is disconnected. </li>\r\n<li> Both the sender and receiver must be using certificates. These are the normal certificates used by a community\r\nand its partners to securely exchange messages. These are not TLS certificates, which are additional certificates\r\nneeded if TLS is configured for a delivery exchange. </li></ul>\r\nThis is how the authentication works: The initiator of the connection uses the partner’s public key to encrypt and\r\nsend a short, random message to the partner. The partner decrypts the message with its private key and sends the\r\nmessage back. The initiator compares the response to the original message. If the messages match, the initiator\r\nhas authenticated the partner. The partner repeats the process to validate the initiator. <p/>"
          },
          "useDifferentAuthCertificate" : {
            "type" : "boolean",
            "description" : "Set this to true in order to select a partner certificate to use for secure authentication other than the default\r\ncertificate. <p/>"
          },
          "secureAuthCertificateId" : {
            "type" : "number",
            "description" : "The ID of the partner certificate used for secure authentication. This ID is shown only when another certificate\r\nthan the default one is used. <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_ftpUserBean" : {
      "title" : "ftpUserBean",
      "allOf" : [ {
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns if this FTP user is enabled."
          },
          "ftpSubDirectories" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The FTP subdirectories associated with the user. A specific combination of user and directory can be associated with only one exchange."
          },
          "hasCredentials" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns if this FTP user has credentials. The user may not have credentials if credentials should be read from an external source."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "password" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Get the user's password  to connect to the server."
          },
          "passwordPolicyName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Get the password policy to assign to the user."
          },
          "userName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the user."
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_aleB2biConsumerExchangePointBean" : {
      "title" : "aleB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_MetadataCondition" : {
      "type" : "string",
      "title" : "MetadataCondition",
      "description" : "",
      "enum" : [ "EQUALS", "NOT_EQUALS", "STARTS_WITH", "ENDS_WITH", "CONTAINS", "MATCHES" ]
    },
    "json_MllpProducerExchangePointBean" : {
      "title" : "MllpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The address of the MLLP server."
          },
          "port" : {
            "type" : "number",
            "description" : "The server port for MLLP connections."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits for a connection to the delivery exchange before the attempt times out."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection."
          },
          "startBlockCharacter" : {
            "type" : "number",
            "description" : "The decimal byte value to use for the start block character. Start and stop block characters enclose the message\r\ndata that is sent or received in through MLLP messages. At runtime B2Bi converts this decimal value to hexadecimal.\r\nDefault = 11 (hexadecimal B). The default value is the customary MLLP value. You must use the same values for the\r\nclient and server sides of the MLLP exchange."
          },
          "endBlockCharacter" : {
            "type" : "number",
            "description" : "The decimal byte value to use for the end block character. Start and stop block characters enclose the message\r\ndata that is sent or received in through MLLP messages. At runtime B2Bi converts this decimal value to hexadecimal.\r\nDefault = 28 (hexadecimal 1C). The default value is the customary MLLP value. You must use the same values for the\r\nclient and server sides of the MLLP exchange."
          },
          "expectAcknowledgement" : {
            "type" : "boolean",
            "description" : "Select this option to keep the connection with the MLLP server open while waiting for acknowledgement."
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Set this to true if TLS is required for the client connection to the MLLP server."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Select the level of security that suits your need and enables communicating with others who might have different\r\nsecurity requirements. For example, when an SSL connection is established, the client and server exchange\r\ninformation about cipher suites they have in common. Then they communicate using the common cipher suite that\r\noffers the highest level of security. If they do not have a cipher suite in common, secure communication is\r\nnot possible. <p/>\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires signing messages using a message digest\r\nalgorithm. But the choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "description" : "If TLS is enabled for connecting to the server, you can optionally select this additional security feature."
          }
        }
      } ],
      "description" : ""
    },
    "json_StackTraceElement" : {
      "type" : "object",
      "properties" : {
        "fileName" : {
          "type" : "string",
          "description" : ""
        },
        "className" : {
          "type" : "string",
          "description" : ""
        },
        "lineNumber" : {
          "type" : "number",
          "description" : ""
        },
        "methodName" : {
          "type" : "string",
          "description" : ""
        },
        "nativeMethod" : {
          "type" : "boolean",
          "description" : ""
        }
      },
      "title" : "StackTraceElement",
      "description" : ""
    },
    "json_ImmutableConsumerExchangePointBean" : {
      "title" : "ImmutableConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_HttpServerB2biProducerExchangePointBean" : {
      "title" : "HttpServerB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_documentServiceOutputComponentBean" : {
      "title" : "documentServiceOutputComponentBean",
      "allOf" : [ {
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique ID of this service output component."
          },
          "stepId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The current processing step to be configured."
          },
          "type" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the current processing step. This field can have one of the following four values:\r\n<ul>\r\n<li>Document</li>\r\n<li>Post enveloping</li>\r\n<li>Post transfer success</li>\r\n<li>Post transfer failed</li>\r\n</ul>"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_MqProducerExchangePointBean" : {
      "title" : "MqProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "clientModeEnabled" : {
            "type" : "boolean",
            "description" : "The MQSeries connection type. Two options are available:\r\n<ul><li><code>true</code> - select this option to use a channel connection on the local machine or via\r\nthe network, to connect to a queue manager. </li>\r\n<li><code>false</code> – select this option to use an API connection, via shared memory, to a local queue\r\nmanager. </li></ul>"
          },
          "mqHost" : {
            "type" : "string",
            "description" : "The MQSeries server name."
          },
          "multiInstanceEnabled" : {
            "type" : "boolean",
            "description" : "Select this option if the server has an MQSeries multi-instance queue manager."
          },
          "mqStandbyServer" : {
            "type" : "string",
            "description" : "Multi-instance standby server address."
          },
          "mqPort" : {
            "type" : "number",
            "description" : "The MQSeries port number."
          },
          "mqChannel" : {
            "type" : "string",
            "description" : "The MQSeries channel."
          },
          "mqQueueName" : {
            "type" : "string",
            "description" : "The name of the MQSeries queue."
          },
          "mqQueueManager" : {
            "type" : "string",
            "description" : "The MQSeries queue manager."
          },
          "convertUsingCCSID" : {
            "type" : "boolean",
            "description" : "Set to <code>true</code> if you want to enable data conversion."
          },
          "mqCharset" : {
            "type" : "number",
            "description" : "The character set for converting data."
          },
          "segmentationModeEnabled" : {
            "type" : "boolean",
            "description" : "Use message segmentation."
          },
          "segmentationType" : {
            "description" : "The message segmentation type:\r\n<ul><li>MQSeries</li>\r\n<li>Application segmentation</li></ul>",
            "$ref" : "#/definitions/json_MqSegmentationType"
          },
          "segmentationSize" : {
            "type" : "number",
            "description" : "The message segmentation size in bytes."
          },
          "useSsl" : {
            "type" : "boolean",
            "description" : "Use SSL to connect to the MQSeries server."
          },
          "sslCipherSuite" : {
            "description" : "The SSL cipher suite to use for SSL encryption.",
            "$ref" : "#/definitions/json_SslCipherSuite"
          },
          "persistenceMode" : {
            "description" : "The message persistence mode.",
            "$ref" : "#/definitions/json_PersistenceMode"
          },
          "usernamePasswordCredentials" : {
            "description" : "User name and password to connect to the server.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "json_ManagedPGPSignatureBean" : {
      "type" : "object",
      "properties" : {
        "keyId" : {
          "type" : "string",
          "description" : "The keyId is string identifier for the Public Key."
        },
        "level" : {
          "type" : "string",
          "description" : "A signer indicates a level of trust ranging from low to high.\r\nFor example, a self-signed certificate is by default signed\r\nby the community that generated the certificate within B2Bi.\r\nThe community gives the certificate a positive level, which\r\nis a high level of trust."
        },
        "userName" : {
          "type" : "string",
          "description" : "The username refers to Community name and email"
        }
      },
      "title" : "ManagedPGPSignatureBean",
      "description" : ""
    },
    "json_SftpServerExchangePointBean" : {
      "title" : "SftpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The local port used by the embedded SFTP server to listen for incoming connections. The default values are 4022\r\nfor a trading server and 5022 for an application server."
          },
          "subDirectories" : {
            "type" : "string",
            "description" : "Subdirectories associated to the SFTP exchange point. A specific combination of user\r\nand directory can be associated with only one exchange."
          },
          "alwaysConsumeFromSubdirs" : {
            "type" : "boolean",
            "description" : "Specify what to do when partners upload messages to subdirectories of the SFTP directories. If this option is\r\nset to <code>true</code>, the users are allowed to write files to any subdirectory under the root path.\r\nOtherwise, the users are allowed to write files to a subdirectory under the root path only when a message\r\nattribute is set up for each subdirectory level."
          },
          "modifySftpServerDirectory" : {
            "type" : "boolean",
            "description" : "Specify whether subdirectory management is enabled on the client side. When this option is set to\r\n<code>true</code>, SFTP clients are allowed to add or remove subdirectories."
          },
          "sequenced" : {
            "type" : "boolean",
            "description" : "Specify whether all messages that are consumed by this pickup should be delivered in their original\r\nconsumption order.\r\n<p/>\r\nIn B2Bi message-handling, sequential delivery is the ability to deliver messages in the order they\r\nwere originally consumed on a specific pickup. This is sometimes referred to as first-in-first-out\r\n(FIFO) behavior.\r\n<p/>\r\nSequential message delivery is implemented only for trading engine pickups, not for integration\r\nengine pickups"
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds that B2Bi waits for missing messages of a sequence before taking the appropriate action.\r\nThis feature avoids the blocking of processing when a sequenced message is not available. Default value is of\r\n60 seconds."
          },
          "defaultUser" : {
            "description" : "Default account for the SFTP server.",
            "$ref" : "#/definitions/json_SshUserBean"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_addressingRuleAction" : {
      "type" : "string",
      "title" : "addressingRuleAction",
      "description" : "",
      "enum" : [ "USE_FIXED_PARTY", "USE_METADATA_OR_PROTOCOL_ADDRESS", "USE_PROTOCOL_ADDRESS", "ALWAYS_PARSE" ]
    },
    "json_MetadataConditionBean" : {
      "title" : "MetadataConditionBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_CriteriaBean"
      }, {
        "properties" : {
          "metadataName" : {
            "type" : "string",
            "description" : "The name of the message attribute used for attaching metadata to the messages the trading engine picks up\r\nfrom applications or receives from partners.\r\n<p/>\r\nAttributes are name-value pairs whose values are extracted from messages through parsing or have\r\nfixed values. The trading engine can parse only XML messages, but attributes with fixed values can\r\napply to EDI, XML or binary documents.\r\nFor example, you can have the system parse certain XML messages for values of an attribute named\r\nPOAmount. Or, you can instruct the system to apply an attribute named SupplyChain with a fixed\r\nvalue of Retail to certain messages."
          },
          "compareOperator" : {
            "description" : "Operator which specifies the relationship between the attribute name (<code>metadataName</code>) and the provided\r\nvalue (<code>metadataValue</code>). You can define attributes to be active only when certain conditions occur.\r\nThis lets you customize attributes to a high degree of specificity. You can choose one of the following operators:\r\n<ul>\r\n<li><b>EQUALS</b> - the operator tests whether an attribute exists and has a specific value</li>\r\n<li><b>NOT_EQUALS</b> - the operator tests whether an attribute exists, but does not match a specific value</li>\r\n</ul>\r\nConditions cause payloads to be delivered to the appropriate application delivery. If a payload does not satisfy\r\nthe delivery criteria for any application delivery, then the first available application delivery is used.\r\nAn application delivery with no criteria is used only if it is the first one available.",
            "$ref" : "#/definitions/json_CompareOperator"
          },
          "metadataValue" : {
            "type" : "string",
            "description" : "The value of the message attribute used for attaching metadata to the messages the trading engine picks up\r\nfrom applications or receives from partners."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_vdaMessagingIdBean" : {
      "title" : "vdaMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_messagingIdBean"
      }, {
        "properties" : {
          "partnerCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The partner code. For an outbound message, enter the sender ID. For an inbound message, enter the\r\nreceiver ID."
          }
        }
      } ],
      "description" : ""
    },
    "json_B2biComponentBean" : {
      "type" : "object",
      "properties" : {
        "resourceName" : {
          "type" : "string",
          "description" : "The name of the resource that provides the functionality for this component."
        },
        "resourceAbsFilePath" : {
          "type" : "string",
          "description" : "The absolute file path for the resource that provides the functionality for this component."
        },
        "resourceType" : {
          "type" : "string",
          "description" : "The type of the resource that provides the functionality for this component."
        }
      },
      "title" : "B2biComponentBean",
      "description" : ""
    },
    "json_X12InboundAgreementBean" : {
      "title" : "X12InboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_X12AgreementBean"
      }, {
        "properties" : {
          "useInterchangeSenderIdQualifier" : {
            "type" : "boolean",
            "description" : "Select this option if you want that B2Bi to parse the interchange sender id qualifier value at runtime."
          },
          "useInterchangeReceiverIdQualifier" : {
            "type" : "boolean",
            "description" : "Select this option if you want that B2Bi to parse the interchange receiver id qualifier value at runtime."
          },
          "useInterchangeSenderId" : {
            "type" : "boolean",
            "description" : "Select this option if you want that B2Bi to parse the interchange sender id value at runtime."
          },
          "useInterchangeReceiverId" : {
            "type" : "boolean",
            "description" : "Select this option if you want that B2Bi to parse the interchange receiver id value at runtime."
          },
          "bypassEdiProcessing" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, all inbound processing options will be ignored. By default, this option is set to\r\n<code>false</code>. <p/> <p> This option improves the performance of B2Bi when handling large interchanges. If\r\nyou select this option, the trading engine handles incoming interchanges without unpacking the envelopes. The\r\ntrading engine reads only the interchange header and transaction set header segment (ST). The entire interchange\r\nis sent to the map as a single message. Regular EDI logic is not applied. For this reason, no acknowledgements\r\ncan be automatically generated and sent. </p>"
          },
          "generateAckRule" : {
            "description" : "The condition for sending acknowledgments. Options are:\r\n<ul>\r\n<li><b>NO</b></li>\r\n<li><b>YES_NON_DETAILED</b></li>\r\n<li><b>YES_DETAILED</b></li>\r\n</ul>",
            "$ref" : "#/definitions/json_GenerateAckRuleType_x12"
          },
          "serviceId" : {
            "type" : "string",
            "description" : "The service used for acknowledgement processing. If there are not any services to select, configure the service\r\nand pass it to this field."
          },
          "ackEnvelopingType" : {
            "description" : "Specify the acknowledgement enveloping type. The accepted values are:\r\n<p/>\r\n<ul>\r\n<li><b>DEFAULT</b></li>\r\n<p>Select this option if you want B2Bi to use interchange IDs and application IDs of the incoming X12 document as values\r\n(reversed) for the acknowledgment back to the sender.</p>\r\n<li><b>OUTBOUND_AGREEMENT</b></li>\r\n<p>Select this option if you want to use a specific outbound agreement to determine the acknowledgment processing. </p>\r\n</ul>",
            "$ref" : "#/definitions/json_AckEnvelopingType"
          },
          "outboundAgreementForAckEnvelopeId" : {
            "type" : "string",
            "description" : "If you selected an acknowledgment rule that generates acknowledgements, and <b>ackEnvelopingType</b> is set to\r\n<code>OUTBOUND_AGREEMENT</code>, select an outbound agreement that provides the enveloping. If there are not any\r\noutbound agreements to select, a warning message will be returned."
          },
          "ackDeliveryExchangeId" : {
            "type" : "string",
            "description" : "If you selected an acknowledgement rule that generates acknowledgements, and you have multiple delivery exchanges\r\nthat are valid for this agreement, you can select a specific delivery exchange to handle the delivery of the\r\nacknowledgements."
          },
          "overrideAckTransportReceiver" : {
            "type" : "boolean",
            "description" : "Select this option if you want to identify a specific party as the receiving party of the acknowledgement. Then\r\nuse <b>ackTransportReceiverId</b>, <b>ackTransportReceiverRoutingId</b> and <b>ackDeliveryExchangeId</b> to\r\nidentify the partner and the associated delivery exchange."
          },
          "ackTransportReceiverId" : {
            "type" : "string",
            "description" : "If you selected an acknowledgement rule that generates acknowledgements, and <b>overrideAckTransportReceiver</b>\r\nis set to <code>true</code>, select a specific party as the receiving party of the acknowledgement."
          },
          "ackTransportReceiverRoutingId" : {
            "type" : "string",
            "description" : "If you selected an acknowledgement rule that generates acknowledgements, and <b>overrideAckTransportReceiver</b>\r\nis set to <code>true</code>, select a specific Routing ID from the specific party selected as the receiving party\r\nof the acknowledgement."
          },
          "ackInterchangeCntrlNumberGenerator" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe data interchange information code control number. This is the starting value of unique identifiers for\r\noutbound messages. By default, the identifier increases by 1 for each additional message (ISA13). This is an\r\ninterchange envelope parameter.\r\n</p>"
          },
          "ackGroupCntrlNumberGenerator" : {
            "type" : "string",
            "description" : "Assigned number originated and maintained by the sender (GS 06)."
          },
          "ackTransSetCntrlNumberGenerator" : {
            "type" : "string",
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> A control number assigned by the sender and stored in the transaction set header. The number must be unique\r\nin the functional group (ST02). </p>"
          },
          "ackGroupTimeFormat" : {
            "description" : "Select one of the following time formats:\r\n<ul>\r\n<li><b>HHMM</b></li>\r\n<li><b>HHMMSS</b></li>\r\n<li><b>HHMMSSD</b></li>\r\n<li><b>HHSSMMDD</b></li>\r\n</ul>",
            "$ref" : "#/definitions/json_GroupTimeFormatType"
          },
          "rejectionRule" : {
            "description" : "The condition for rejecting interchange. Interchanges are rejected depending on\r\nwhere errors are found. For example, if there is an error in one transaction set, the whole interchange is\r\nrejected.",
            "$ref" : "#/definitions/json_RejectionRuleType_x12"
          },
          "customRejectionRule" : {
            "type" : "string",
            "description" : "If <code>\"If any documents are stopped, reject documents of the following types\"</code> rejection rule is\r\nselected, specify the document types to be rejected."
          },
          "checkControlNumbs" : {
            "type" : "boolean",
            "description" : "The interchange control number for inbound messages is verified to be in sequence. So, for example, if the user\r\nsets the next expected interchange control number to 123456, the system validates that the next inbound document\r\nhas an interchange control number of 123456. If the validation succeeds the field is updated to 123457. If the\r\nvalidation fails, the out of sequence action is applied."
          },
          "checkGroupControlNumbs" : {
            "type" : "boolean",
            "description" : "The group control numbers for inbound messages is verified to be in sequence. So, for example, if the user\r\nsets the next expected group control number to 123456, the system validates that the next inbound document\r\nhas an group control number of 123456. If the validation succeeds the field is updated to 123457. If the\r\nvalidation fails, the out of sequence action is applied."
          },
          "outOfSeqAction" : {
            "description" : "The action to take for non-sequential interchange and group control numbers. Options are:\r\n<ul>\r\n<li><b>WARN_AND_PROCESS</b></li>\r\n<p>Allows an inbound interchange to be processed successfully, but a warning is posted.</p>\r\n<li><b>FAIL_AND_PARK</b></li>\r\n<p>Processing is halted and an error is posted.</p>\r\n</ul>",
            "$ref" : "#/definitions/json_OutOfSequenceActionType_x12"
          },
          "dupCheckControlNumbs" : {
            "type" : "boolean",
            "description" : "Interchange control numbers are checked for duplicates, by comparing to interchanges already received. If a\r\nduplicate is detected for an inbound interchange, the duplicate action is respected."
          },
          "dupCheckGroupControlNumbs" : {
            "type" : "boolean",
            "description" : "Group control numbers are checked for duplicates, by comparing to groups already received. If a duplicate is\r\ndetected for an inbound group, the duplicate action is respected."
          },
          "dupAction" : {
            "description" : "The action to take for non-sequential interchange and group control numbers. Options are:\r\n<ul>\r\n<li><b>WARN_AND_PROCESS</b></li>\r\n<p>Allows an inbound interchange to be processed successfully, but a warning is posted.</p>\r\n<li><b>FAIL_AND_PARK</b></li>\r\n<p>Processing is halted and an error is posted.</p>\r\n</ul>",
            "$ref" : "#/definitions/json_OutOfSequenceActionType_x12"
          },
          "compositeElementSeperator" : {
            "type" : "string",
            "description" : "Enabled for X12 <code>Group level processing</code> mode.\r\n<p/>\r\n<p>\r\nEnter the character to use as the composite element separator (ISA16). The field uses a colon as the\r\ndefault value. Alternately, you can use a hex code.\r\n</p>"
          },
          "useX12TestIndicator" : {
            "type" : "boolean",
            "description" : "Select this option if you want that B2Bi to parse the X12 test indicator value at runtime."
          },
          "documentAgreements" : {
            "type" : "string",
            "description" : "List with all document agreements for current agreement"
          }
        }
      } ],
      "description" : ""
    },
    "json_NachaMessagingIdBean" : {
      "title" : "NachaMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MessagingIdBean"
      }, {
        "properties" : {
          "nachaIdentifier" : {
            "type" : "string",
            "description" : "Position 04-13 (Immediate Destination) or 14-23 (Immediate Origin) of the NACHA file header record."
          },
          "nachaName" : {
            "type" : "string",
            "description" : "Position 41-63 (Immediate Destination Name) or 64-86 (Immediate Origin Name) of the NACHA file header record."
          }
        }
      } ],
      "description" : ""
    },
    "json_M3TriggerB2biConsumerExchangePointBean" : {
      "title" : "M3TriggerB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_HttpResponseB2biConsumerExchangePointBean" : {
      "title" : "HttpResponseB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_oftpConsumerExchangePointBean" : {
      "title" : "oftpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "remoteOftpExchangePoint" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The URL of the server being polled for messages."
          },
          "remoteOftpExchangePointToPollId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The id of a partner's OFTP exchange point whom community polls for inbound messages.\r\nThe version (V1 or V2) must match and at most one community can poll a partner's server"
          }
        }
      } ],
      "description" : ""
    },
    "json_GroupTimeoutActionType_x12" : {
      "type" : "string",
      "title" : "GroupTimeoutActionType",
      "description" : "",
      "enum" : [ "SEND_AND_WARN", "SEND", "STOP" ]
    },
    "json_PesitIdentificationBean" : {
      "type" : "object",
      "properties" : {
        "routingIdentifier" : {
          "type" : "string",
          "description" : "The Routing Id belonging to a partner or a community. For Application Delivery, use PesitReceiverID instead.</br>\r\n<b>Note:</b> If missing, allow any valid routing Id to be used.  <p/>"
        },
        "password" : {
          "type" : "string",
          "description" : "Password to be used. This should be the password expected from the partner on a remote identification and\r\nthe password the partner expects for the local identification. </br>\r\n<b>Note:</b> This field is used only on trading part. <p/>"
        },
        "overridePasswordSettings" : {
          "type" : "boolean",
          "description" : "Set to true to specify a password. <p/>"
        }
      },
      "title" : "PesitIdentificationBean",
      "description" : ""
    },
    "xml_ns0_popConsumerExchangePointBean" : {
      "title" : "popConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "attachmentsOnly" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <b>true</b>, include attachments only."
          },
          "authenticationType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Authentication type; must be set to 'USER_PASS' or 'APOP'.",
            "$ref" : "#/definitions/xml_ns0_popAuthenticationType"
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "List with cipher suites."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Connect timeout (seconds) - Time in seconds the trading engine waits for a connection to the delivery exchange\r\nbefore the attempt times out. By default this is set to 30 seconds."
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "SSL authentication.  If we're acting as the client, true means we should verify that the\r\nhostname for the certificate given to us by the server matches the host we connected to.\r\nIf we're acting as the server, true means we require the client to present its\r\ncertificate (\"client authentication\")."
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the POP server that the trading engine polls for messages sent by your partner. This must be a fully\r\nqualified domain name or IP address."
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Maximum number of messages to be consumed over a single connection before the connection\r\nis closed and reopened on another processing node."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <b>true</b>, a list of cipher suites should be provided."
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The POP server port. By default this is 110."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Read timeout (seconds) - The maximum number of seconds the server waits when reading data from a partner."
          },
          "senderIdentificationType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify how the sender will be identified; must be set to 'PD_EMAIL_ADDRESSES' or\r\n'PARTNER_EMAIL_ACCOUNTS'.",
            "$ref" : "#/definitions/xml_ns0_emailAuthenticationType"
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time limit to wait for missing messages of a sequence before taking the appropriate action."
          },
          "sequenced" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want all messages that are consumed by this pickup to be delivered in their original\r\nconsumption order."
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Client use ssl to connect to this server ?."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The user name and password required to connect to the server.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_serverSettingsBean" : {
      "title" : "serverSettingsBean",
      "allOf" : [ {
        "properties" : {
          "bindAddresses" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The DMZ hosts for the machines in the cluster."
          },
          "forwardingEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether connections to this server should be proxied through DMZ nodes.\r\nIf this option is set to <code>true</code>, the external firewall or load balancer sends inbound connections to\r\nSecure Relay DMZ nodes rather than directly to embedded servers in the protected network."
          },
          "forwardingPorts" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Ports for DMZ forwarding. In the simplest case, there is one DMZ port with the same value as the corresponding\r\nembedded server port in the protected network. If you add a machine to your cluster, another DMZ port\r\nis automatically added in sequence. This happens because every machine in the cluster that can host the embedded\r\nserver must be assigned a unique corresponding port in the DMZ.\r\n<p/>\r\nFor example, if the server port is 4080 and there are two cluster machines, two ports would be exposed on every\r\nDMZ node, e.g. 4080 and 4081. If you add machines to the cluster, you should update your firewall or load\r\nbalancer configuration accordingly."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique ID of the transport server."
          },
          "ipAddressCheckEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the trading engine should check partners' IP addresses against a whitelist of authorized IP\r\naddresses. Connections from unknown IP addresses are not allowed."
          },
          "ipAddressPartnerMatchEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "When IP address checking is enabled, specify whether the router agent should check if the partner is registered\r\nto the IP address. If this option is set to <code>false</code>, the agent only checks the user's credentials.\r\n<p/>\r\nThis control is not available to all types of servers."
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the transport server, used to distinguish it from other embedded servers."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The maximum number of seconds the server waits when reading data from a partner. Default value is 30 seconds."
          },
          "securityTerminationEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether various security functions should be performed in the DMZ. If connections are via SSL, the secure\r\nconnection is terminated at the router agent in the DMZ. For delivery exchanges that require a user name and\r\npassword to connect (for example, FTP, SFTP or WebDAV), the router agent authenticates the user."
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_AttributeValueBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "A name for this attribute to identify it.</br> <b>Note:</b> it is read only"
        },
        "usedForSearching" : {
          "type" : "boolean",
          "description" : "If true, this attribute is used for searching at runtime.</br> <b>Note:</b> it is read only"
        },
        "usedForProcessing" : {
          "type" : "boolean",
          "description" : "If true, this attribute is used for processing at runtime.</br> <b>Note:</b> it is read only"
        },
        "clearedAtRuntime" : {
          "type" : "boolean",
          "description" : "Set this attribute to true in order to clear it from documents at runtime."
        },
        "values" : {
          "type" : "array",
          "description" : "Set the value/values in case of MULTISELECT.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "title" : "AttributeValueBean",
      "description" : ""
    },
    "json_InHouseMessagingIdBean" : {
      "title" : "InHouseMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MessagingIdBean"
      }, {
        "properties" : {
          "identification" : {
            "type" : "string",
            "description" : "Unique identification string used for partner identification at the message level to help control\r\nmessage processing. For an outbound message, this is the sender's ID. For an inbound message,\r\nthis is the receiver's ID."
          }
        }
      } ],
      "description" : ""
    },
    "json_EmailAuthenticationType" : {
      "type" : "string",
      "title" : "EmailAuthenticationType",
      "description" : "",
      "enum" : [ "PARTNER_EMAIL_ACCOUNTS", "PD_EMAIL_ADDRESSES" ]
    },
    "json_OftpSharedProducerExchangePointBean" : {
      "title" : "OftpSharedProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "sharedOftpExchangePointToPollId" : {
            "type" : "string",
            "description" : "Select the partner delivery exchange to share, if any are available. The available choices are OFTP V1\r\nor OFTP V2 delivery exchanges for other partners. The user interface only allows selecting delivery\r\nexchanges of the same type being added. For example, if you are adding an OFTP V1 exchange, only OFTP\r\nV1 selections are available."
          }
        }
      } ],
      "description" : ""
    },
    "json_SftpSubDirectoryBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "sftpUserName" : {
          "type" : "string",
          "description" : "The user name to connect to the server. The name is used not only for connection, but also represents\r\nthe home directory for the SFTP account."
        },
        "subDirectory" : {
          "type" : "string",
          "description" : "Subdirectory associated to the SFTP account where messages will be stored. A specific combination of user\r\nand directory can be associated with only one exchange."
        }
      },
      "title" : "SftpSubDirectoryBean",
      "description" : ""
    },
    "xml_ns0_documentAgreementBean" : {
      "title" : "documentAgreementBean",
      "allOf" : [ {
        "properties" : {
          "documentFormat" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The message standard or format this document is based on. This is the format of the Agreement which\r\nowns this Document Agreement. The field cannot be modified."
          },
          "documentName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Name of the Document Agreement. Once the Document Agreement has been created, the name cannot be\r\nchanged."
          },
          "documentServiceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the Document Service that specifies the processing for this agreement."
          },
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies if this Document Agreement is enabled."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "ID of the Document Agreement."
          },
          "owningAgreementId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "processingStep" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the initial processing step for the document service"
          },
          "type" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the document you are exchanging with the current agreement."
          },
          "version" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The document format you are exchanging with the current agreement."
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_TradacomDocumentAgreementBean" : {
      "title" : "TradacomDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "json_MetadataProfileBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "enabled" : {
          "type" : "boolean",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : ""
        },
        "serviceId" : {
          "type" : "string",
          "description" : ""
        },
        "metadataRules" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_MetadataProfileConditionBean"
            }
          }
        },
        "outputs" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "MetadataProfileBean",
      "description" : ""
    },
    "xml_ns0_groupTimeFormatType" : {
      "type" : "string",
      "title" : "groupTimeFormatType",
      "description" : "",
      "enum" : [ "HHMM", "HHMMSS", "HHMMSSD", "HHMMSSDD" ]
    },
    "xml_ns0_inHouseMessagingIdBean" : {
      "title" : "inHouseMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_messagingIdBean"
      }, {
        "properties" : {
          "identification" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Unique identification string used for partner identification at the message level to help control\r\nmessage processing. For an outbound message, this is the sender's ID. For an inbound message,\r\nthis is the receiver's ID."
          }
        }
      } ],
      "description" : ""
    },
    "json_SmtpServerDefinitionBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "host" : {
          "type" : "string",
          "description" : "Fully qualified domain name or IP address for the global external server, which is used by default for sending e-mail messages.\r\n<b>Required.</b>"
        },
        "port" : {
          "type" : "number",
          "description" : "The port used by the global external server. The default values is 25. <b>Required.</b>"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name for the global external server. <b>Read-only.</b>"
        },
        "usernamePasswordCredentials" : {
          "description" : "User name and password to connect to the server. Usually, SMTP servers do not require user names and passwords for sending messages.",
          "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
        },
        "ssl" : {
          "type" : "boolean",
          "description" : "Regular or secured channel with authentication."
        }
      },
      "title" : "SmtpServerDefinitionBean",
      "description" : ""
    },
    "json_PluggableServerExchangePointBean" : {
      "title" : "PluggableServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ConsumerExchangePointBean"
      }, {
        "properties" : {
          "serverName" : {
            "type" : "string",
            "description" : "The name of the transport server, used to distinguish it from other embedded servers."
          },
          "className" : {
            "type" : "string",
            "description" : "The server class of the pluggable server."
          },
          "settings" : {
            "description" : "Enter name/value pairs as custom parameters.",
            "$ref" : "#/definitions/json_MapType"
          },
          "pollingIntervalSeconds" : {
            "type" : "number",
            "description" : "Returns the interval in seconds the trading engine waits before polling for messages to retrieve."
          },
          "maxMessagesPerPollingInterval" : {
            "type" : "number",
            "description" : "Returns the highest number of messages the system can retrieve each time it polls."
          }
        }
      } ],
      "description" : ""
    },
    "json_B2biConsumerExchangePointBean" : {
      "title" : "B2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ConsumerExchangePointBean"
      }, {
        "properties" : {
          "parameters" : {
            "description" : "Define the parameter string to be passed for a specific type of B2Bi exchange point. For more information about the\r\nspecific parameters to be passed for each type of B2Bi exchange point, please see the admin guide.",
            "$ref" : "#/definitions/json_MapType"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the B2Bi exchange point."
          }
        }
      } ],
      "description" : ""
    },
    "json_ProcessingBean" : {
      "type" : "object",
      "properties" : {
        "severity" : {
          "description" : "The severity of the log event",
          "$ref" : "#/definitions/json_ProcessingSeverity"
        },
        "coreId" : {
          "type" : "string",
          "description" : "The parent core id of the message"
        },
        "message" : {
          "type" : "string",
          "description" : "The description of the log event"
        },
        "loggerId" : {
          "type" : "string",
          "description" : "The logger id of the message"
        },
        "timestamp" : {
          "type" : "number",
          "description" : "The timestamp of the log event"
        }
      },
      "title" : "ProcessingBean",
      "description" : ""
    },
    "xml_ns0_businessProtocol" : {
      "type" : "string",
      "title" : "businessProtocol",
      "description" : "",
      "enum" : [ "AS1", "AS2", "AS3", "AS4", "SecureFile", "CXML", "Email", "OFTP_1_3", "OFTP_2_0", "PeSIT", "PGP", "Raw", "Swift" ]
    },
    "json_RecipientRefPasswordQualifier" : {
      "type" : "string",
      "title" : "RecipientRefPasswordQualifier",
      "description" : "",
      "enum" : [ "AA", "BB" ]
    },
    "xml_ns0_sftpCollisionMode" : {
      "type" : "string",
      "title" : "sftpCollisionMode",
      "description" : "",
      "enum" : [ "USE_USE_NONE", "USE_TEMP_FILES_WITH_INBOX", "USE_TEMP_FILE_EXTENSION" ]
    },
    "json_SinkB2biProducerExchangePointBean" : {
      "title" : "SinkB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_mimeEmailB2biProducerExchangePointBean" : {
      "title" : "mimeEmailB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_idocMessagingIdBean" : {
      "title" : "idocMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_messagingIdBean"
      }, {
        "properties" : {
          "partnerNumber" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The partner number of the sender (SNDPRN) or the receiver (RCVPRN)"
          },
          "partnerPort" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port of the sender (SNDPOR) or the receiver (RCVPOR)"
          },
          "partnerType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The partner type of the sender (SNDPRT) or the receiver (RCVPRT)"
          }
        }
      } ],
      "description" : ""
    },
    "json_OftpServerSettingsBean" : {
      "title" : "OftpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerSettingsBean"
      }, {
        "properties" : {
          "networkSettings" : {
            "description" : "The network settings for this server. The following types are supported:\r\n<ol><li><b>TCP</b>. Transmission Control Protocol is the basic communications protocol of the Internet.</li>\r\n<li>X.25. An ITU-T standard protocol suite for packet-switched wide area network communications.</li>\r\n<li>X.25 over ISDN (B-channel). Integrated Services Digital Network broadband channel\r\nsupports data transfers over telephone networks</li></ol>",
            "$ref" : "#/definitions/json_NetworkSettingsBean"
          },
          "minThreads" : {
            "type" : "number",
            "description" : "The least number of threads the trading engine must dedicate to the server."
          },
          "maxThreads" : {
            "type" : "number",
            "description" : "The most threads the trading engine can dedicate to the server."
          },
          "certificate" : {
            "type" : "string",
            "description" : "Path to get the certificate for this server. <p/>"
          },
          "shouldSubmitCertificate" : {
            "type" : "boolean",
            "description" : "Used for hiding the SSL server certificate URI; true if the entity was newly persisted and false otherwise"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_sequenceNumberBean" : {
      "title" : "sequenceNumberBean",
      "allOf" : [ {
        "properties" : {
          "identifier" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the generator for which the value will be considered. Possible values are:<p/>\r\n\r\n<ul><li>_0020 - Interchange control reference generator. Valid for Edifact Outbound Agreement.</li>\r\n<li>_0062  - Message reference number generator. Valid for Edifact Outbound Agreement.</li>\r\n<li>UNG0048 - Reference Number Generator. Valid for Edifact Outbound  Functional Group Agreement.</li>\r\n<li>SNRF - Sender transmission reference generator. Valid for Tradacoms Outbound Agreement.</li>\r\n<li>FIELD05 - Transmission number old. Valid for VDA Inbound Agreement.</li>\r\n<li>FIELD06 - Transmission number new generator. Valid for VDA Outbound Agreement.</li>\r\n<li>LATEST_TRANSMISSION_NUMBER - Latest transmission number new. Valid for VDA Outbound Agreement.</li>\r\n<li>NEXT_GROUP_CONTROL - Next expected group control. Valid for Edifact Inbound Agreement, X12 Inbound Agreement.</li>\r\n<li>NEXT_INTERCHANGE_CONTROL - Next expected interchange control. Valid for Edifact Inbound Agreement, X12 Inbound Agreement.</li>\r\n<li>MSH00010 - Message control ID. Valid for HL7v2 Inbound Agreement, HL7v2 Outbound Agreement.</li>\r\n<li>MSH00013 - Sequence number generator. Valid for HL7v2 Outbound Agreement.</li>\r\n<li>NEXT_INTERCHANGE_SEQUENCE_NUMBER - Next expected sequence number. Valid for HL7v2 Inbound Agreement.</li>\r\n<li>ISA13 - Interchange control number generator. Valid for X12 Inbound Agreement, X12 Outbound Agreement.</li>\r\n<li>GS06 -  Group control number generator. Valid for X12 Inbound Agreement, X12 Outbound Functional Group Agreement.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_identifier"
          },
          "value" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The counter value for the specific generator described by the identifier."
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_edifactOutboundFunctionalGroupBean" : {
      "title" : "edifactOutboundFunctionalGroupBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_functionalGroupBean"
      }, {
        "properties" : {
          "applicationPassword" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 0058) Application password."
          },
          "controlNumberGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This value describes how to generate the message reference number (0062 generator)."
          },
          "functionalGroupId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 0038) Message group identification."
          },
          "recipientApplicationId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 007 0044) Identifies the party receiving the transmission. This code is agreed by the trading\r\npartners."
          },
          "recipientCodeQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 007 0007) Qualifier referring to the source of codes for the identifiers of interchanging\r\npartners."
          },
          "senderApplicationId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 006 0040) Identifies the party sending the transmission. This code is agreed to by trading\r\npartners."
          },
          "senderCodeQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 006 0007) Qualifier referring to the source of codes for the identifiers of interchanging\r\npartners."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_metadataCondition" : {
      "type" : "string",
      "title" : "metadataCondition",
      "description" : "",
      "enum" : [ "EQUALS", "NOT_EQUALS", "STARTS_WITH", "ENDS_WITH", "CONTAINS", "MATCHES" ]
    },
    "xml_ns0_nachaMessagingIdBean" : {
      "title" : "nachaMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_messagingIdBean"
      }, {
        "properties" : {
          "nachaIdentifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Position 04-13 (Immediate Destination) or 14-23 (Immediate Origin) of the NACHA file header record."
          },
          "nachaName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Position 41-63 (Immediate Destination Name) or 64-86 (Immediate Origin Name) of the NACHA file header record."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_deliveryMethod" : {
      "type" : "string",
      "title" : "deliveryMethod",
      "description" : "",
      "enum" : [ "CONTINUE_TO_NEXT_STEP", "DELIVER_TO_PARTNER", "RETURN_TO_SENDER", "DELIVER_TO_APPLICATION" ]
    },
    "xml_ns0_pollingExchangePointBean" : {
      "title" : "pollingExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_consumerExchangePointBean"
      }, {
        "properties" : {
          "deliverTransportId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The id of the exchange point."
          },
          "maxMessagesPerPollingInterval" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns the highest number of messages the system can retrieve each time it polls."
          },
          "pollingIntervalSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns the interval in seconds the trading engine waits before polling for messages to retrieve."
          },
          "preferredNodes" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Get the preferred nodes used to process messages. See <code>usePreferredNodes</code>."
          },
          "usePreferredNodes" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If there are one or more nodes for the trading engine, you can select one or more as the preferred\r\nnodes for consuming messages. If the preferred nodes are running, these are used to process messages.\r\nIf the preferred nodes are stopped, work is distributed among the remaining running available nodes.\r\nSelecting preferred nodes lets you manage work distribution among nodes.\r\n<p>\r\nThis option is available for integration pickup and trading delivery exchanges that poll for messages.\r\n</p>\r\n<p>\r\nIn general, this setting should not be used. Usually it is best to let the trading engine automatically\r\ndetermine which node should be responsible for initiating the polling of which exchange point. This\r\nsetting is useful if you have a cluster that spans geographical locations and each location has its own\r\nlocal transport servers. In this situation, you would use this setting to ensure the exchange points\r\nassociated with the transport servers are assigned to nodes in the vicinity of the transport servers.\r\n</p>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_tradacomsOutboundAgreementBean" : {
      "title" : "tradacomsOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_tradacomsAgreementBean"
      }, {
        "properties" : {
          "recipientTransmissionReference" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The reference for the transmission to the sender, if known."
          },
          "senderTransmissionReferenceGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Generator for reference number. Default value is $TransRef:9$."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_pluggableProducerExchangePointBean" : {
      "title" : "pluggableProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "definitionName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Name to be displayed in the UI wizard for selecting a transport.\r\nThis name will be displayed along with built-in transport names such as \"Ftp\", \"File system\", etc.\r\nFor consistency with existing names, use an initial capital letter, and no period at the end."
          },
          "settings" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Defines setting string to be passed to the implementation class when a pluggable transport is created",
            "$ref" : "#/definitions/xml_ns0_mapType"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_ftpServerSettingsBean" : {
      "title" : "ftpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverSettingsBean"
      }, {
        "properties" : {
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "List with cipher suites."
          },
          "implicitSsl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want to use implicit SSL rather than explicit SSL, which is the default mode. FTP supports two methods to accomplish security through a sequence of commands passed between two computers. The sequence is initiated with explicit (active) or implicit (passive) security.\r\n<ul>\r\n<li><b>Explicit security.</b> To establish the SSL link, explicit security requires the FTP client to issue\r\na specific command to the FTP server after establishing a connection. The default FTP server\r\nport is used.</li>\r\n<li><b>Implicit security.</b> Implicit security begins with an SSL connection as soon as the FTP client\r\nconnects to an FTP server. The FTP server defines a specific port for the client to be used for\r\nsecure connections.</li>\r\n</ul>\r\n<b>FTP over SSL Implicit has been deprecated and should no longer be used.</b>"
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port on which the embedded server listens for connection requests."
          },
          "maxConnections" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The number of total open connections the trading engine server can make to a partner.\r\nIf you are operating in a cluster environment, this is the total number across the entire cluster, no matter how many JVM nodes are running."
          },
          "onlyPassiveMode" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <b>true</b>, a list of cipher suites should be provided. If no override cipher suites are provided, all cipher suites are supported by default."
          },
          "passivePorts" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Ports for inbound passive data connections from FTP clients. You can enter multiple ports.\r\nSeparate individual port numbers by a comma. Alternatively, you can specify a range of ports.\r\nThe following example uses both comma-separated port numbers and a range of ports: <b>50000,50001,50010-50020</b>"
          },
          "remoteHost" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The fully qualified domain name or IP address that a community’s partners must use to connect to this embedded server.\r\nThe trading engine supplies a value based on the name of the host computer.\r\nIn many cases you must change this to the external name used by your network firewall or load balancer.\r\nContact your network administrator if you need help with this field."
          },
          "remotePort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port number that a community’s partners must use to connect to this embedded server.\r\nContact your network administrator if you need help with this field."
          }
        }
      } ],
      "description" : ""
    },
    "json_UnAuthorizedException" : {
      "title" : "UnAuthorizedException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AbstractPasswordInfoException"
      }, { } ],
      "description" : "Exception that maps to HTTP 401 return code"
    },
    "xml_ns0_messageType" : {
      "type" : "string",
      "title" : "messageType",
      "description" : "",
      "enum" : [ "BYTES", "TEXT" ]
    },
    "json_RuntimeException" : {
      "title" : "RuntimeException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_Exception"
      }, { } ],
      "description" : ""
    },
    "json_EdifactMessagingIdBean" : {
      "title" : "EdifactMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MessagingIdBean"
      }, {
        "properties" : {
          "interchangePartnerId" : {
            "type" : "string",
            "description" : "Interchange partner ID - The interchange sender's identification (S002 0004) or the interchange recipient's\r\nidentification (S003 0010). <p/>"
          },
          "idCodeQualifier" : {
            "type" : "string",
            "description" : "Identification code qualifier - The interchange sender's partner identification code qualifier (S002 0007) or\r\nthe interchange recipient's partner identification code qualifier (S003 0007). <p/>"
          },
          "interchangeInternalId" : {
            "type" : "string",
            "description" : "Interchange internal identification - The interchange sender's address for reverse routing (S002 0008) or the\r\nrecipient's routing address (S003 0014). <p/>"
          },
          "interchangeInternalSubId" : {
            "type" : "string",
            "description" : "Interchange internal sub-identification - The interchange sender's interchange sender internal sub-identification\r\n(S002 0042) or the recipient's interchange recipient internal sub-identification (S003 0046). <p/>"
          },
          "syntaxGroup" : {
            "description" : "Syntax group - The appropriate syntax to use for messages. <p/>",
            "$ref" : "#/definitions/json_EdifactSyntaxGroup"
          }
        }
      } ],
      "description" : ""
    },
    "json_PesitCompressionType" : {
      "type" : "string",
      "title" : "PesitCompressionType",
      "description" : "",
      "enum" : [ "NONE", "HORIZONTAL", "VERTICAL", "BOTH" ]
    },
    "xml_ns0_x25ServerNetworkSettingsBean" : {
      "title" : "x25ServerNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_x25NetworkSettingsBean"
      }, {
        "properties" : {
          "localNUA" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The Server network user address to wait for an incoming call via OFTP V1 X.25"
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "For each inbound X.25 connection the X.25 router uses the recall port to make a TCP connection\r\nto a trading engine processing node. If the recall port value is 0 or blank, the trading engine server,\r\nupon startup, selects a port at random. If there is a firewall between the trading engine and the router,\r\nadd this port as an exception in the firewall."
          }
        }
      } ],
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "xml_ns0_serverExchangePointBean" : {
      "title" : "serverExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_consumerExchangePointBean"
      }, {
        "properties" : {
          "remoteUrl" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "URL that should be exported and placed in the community's partner profile. This is the URL that is\r\nexposed on the public side of a reverse proxy or firewall. This method is really only useful for\r\nembedded server exchanges on the trading side like HTTP and FTP.\r\n<p/>\r\nIn the case of HTTP an actual value is stored in the db because the load balancer could have a\r\ndifferent external vs. internal path for every exchange point. In the case of FTP there is no need to\r\nstore a per-exchange point external URL, so it overrides this method and dynamically returns a URL\r\nbuilt from other sources.\r\n<p/>\r\nWorst case, this method will return url if remoteUrl is null."
          },
          "serverSettingsId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "ID of the embedded server used by this exchange point."
          }
        }
      } ],
      "description" : ""
    },
    "json_MetadataTemplatePolicy" : {
      "type" : "string",
      "title" : "MetadataTemplatePolicy",
      "description" : "",
      "enum" : [ "ALWAYS", "IF_KNOWN", "NEVER" ]
    },
    "json_ResponseMessage" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : ""
        },
        "level" : {
          "description" : "",
          "$ref" : "#/definitions/json_Level"
        },
        "arguments" : {
          "description" : "",
          "$ref" : "#/definitions/json_MapType"
        },
        "description" : {
          "type" : "string",
          "description" : ""
        },
        "childMessages" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_ResponseMessage"
            }
          }
        }
      },
      "title" : "ResponseMessage",
      "description" : ""
    },
    "json_ServerProducerExchangePointBean" : {
      "title" : "ServerProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "serverSettings" : {
            "type" : "string",
            "description" : "Embedded server settings of the embedded exchange point."
          }
        }
      } ],
      "description" : ""
    },
    "json_ComponentBeanMixIn" : {
      "type" : "object",
      "title" : "ComponentBeanMixIn",
      "description" : "Author: srybak\r\nDate: 4/8/14"
    },
    "xml_ns0_fileSystemConsumerExchangePointBean" : {
      "title" : "fileSystemConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "directory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The full path for a unique directory where the trading engine picks up messages. If the directory does not exist,\r\nthe trading engine creates it for you.\r\n<p/>\r\nYou must specify a unique directory name. You may want to give the directory a name that indicates that the transport\r\nis being used for integration or receiving messages from partners."
          },
          "filterConditions" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Insert the formats of the files you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names or\r\nextensions or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>"
          },
          "filterOption" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names  <p/>"
          },
          "metadataHierarchy" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "You can use metadata hierarchy to avoid file name collisions by selecting message attributes that\r\ncorrespond to the names of subdirectories. <p/>\r\nEach item added represents another subdirectory level. For example, add \"From routing ID\" and \"To\r\nrouting ID\" to the selected attributes list in that order. Then, place a message in a subdirectory\r\nnamed \"ABC/DEF\". The message will be assigned a \"From routing ID\" attribute set to \"ABC\" and a\r\n\"To routing ID\" set to \"DEF\"."
          },
          "negativeFilterOption" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive: only files matching the pattern are consumed. If set to true it is exclusive:\r\nfiles matching the pattern are ignored, but all other files are consumed."
          }
        }
      } ],
      "description" : ""
    },
    "json_ServerSettingsBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "bindAddresses" : {
          "type" : "array",
          "description" : "The DMZ hosts for the machines in the cluster.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "forwardingEnabled" : {
          "type" : "boolean",
          "description" : "Specify whether connections to this server should be proxied through DMZ nodes.\r\nIf this option is set to <code>true</code>, the external firewall or load balancer sends inbound connections to\r\nSecure Relay DMZ nodes rather than directly to embedded servers in the protected network."
        },
        "forwardingPorts" : {
          "type" : "array",
          "description" : "Ports for DMZ forwarding. In the simplest case, there is one DMZ port with the same value as the corresponding\r\nembedded server port in the protected network. If you add a machine to your cluster, another DMZ port\r\nis automatically added in sequence. This happens because every machine in the cluster that can host the embedded\r\nserver must be assigned a unique corresponding port in the DMZ.\r\n<p/>\r\nFor example, if the server port is 4080 and there are two cluster machines, two ports would be exposed on every\r\nDMZ node, e.g. 4080 and 4081. If you add machines to the cluster, you should update your firewall or load\r\nbalancer configuration accordingly.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        },
        "ipAddressCheckEnabled" : {
          "type" : "boolean",
          "description" : "Specify whether the trading engine should check partners' IP addresses against a whitelist of authorized IP\r\naddresses. Connections from unknown IP addresses are not allowed."
        },
        "ipAddressPartnerMatchEnabled" : {
          "type" : "boolean",
          "description" : "When IP address checking is enabled, specify whether the router agent should check if the partner is registered\r\nto the IP address. If this option is set to <code>false</code>, the agent only checks the user's credentials.\r\n<p/>\r\nThis control is not available to all types of servers."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the transport server, used to distinguish it from other embedded servers."
        },
        "readTimeoutSeconds" : {
          "type" : "number",
          "description" : "The maximum number of seconds the server waits when reading data from a partner. Default value is 30 seconds."
        },
        "securityTerminationEnabled" : {
          "type" : "boolean",
          "description" : "Specify whether various security functions should be performed in the DMZ. If connections are via SSL, the secure\r\nconnection is terminated at the router agent in the DMZ. For delivery exchanges that require a user name and\r\npassword to connect (for example, FTP, SFTP or WebDAV), the router agent authenticates the user."
        }
      },
      "title" : "ServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_messagingIdBean" : {
      "title" : "messagingIdBean",
      "allOf" : [ {
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether this messaging id is enabled."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Identification string for this messaging id."
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the messaging id."
          },
          "primary" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether this messaging id is used as default for identifying the associated partner at message level.\r\nA default messaging id can be configured for each message standard that can be exchanged by a specific partner."
          },
          "routingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "RoutingId derived from this MessagingId.  Used for display purposes and by Integrator/pmServer."
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_SequenceNumberBean" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "number",
          "description" : "The counter value for the specific generator described by the identifier."
        },
        "identifier" : {
          "description" : "The name of the generator for which the value will be considered. Possible values are:<p/>\r\n\r\n<ul><li>_0020 - Interchange control reference generator. Valid for Edifact Outbound Agreement.</li>\r\n<li>_0062  - Message reference number generator. Valid for Edifact Outbound Agreement.</li>\r\n<li>UNG0048 - Reference Number Generator. Valid for Edifact Outbound  Functional Group Agreement.</li>\r\n<li>SNRF - Sender transmission reference generator. Valid for Tradacoms Outbound Agreement.</li>\r\n<li>FIELD05 - Transmission number old. Valid for VDA Inbound Agreement.</li>\r\n<li>FIELD06 - Transmission number new generator. Valid for VDA Outbound Agreement.</li>\r\n<li>LATEST_TRANSMISSION_NUMBER - Latest transmission number new. Valid for VDA Outbound Agreement.</li>\r\n<li>NEXT_GROUP_CONTROL - Next expected group control. Valid for Edifact Inbound Agreement, X12 Inbound Agreement.</li>\r\n<li>NEXT_INTERCHANGE_CONTROL - Next expected interchange control. Valid for Edifact Inbound Agreement, X12 Inbound Agreement.</li>\r\n<li>MSH00010 - Message control ID. Valid for HL7v2 Inbound Agreement, HL7v2 Outbound Agreement.</li>\r\n<li>MSH00013 - Sequence number generator. Valid for HL7v2 Outbound Agreement.</li>\r\n<li>NEXT_INTERCHANGE_SEQUENCE_NUMBER - Next expected sequence number. Valid for HL7v2 Inbound Agreement.</li>\r\n<li>ISA13 - Interchange control number generator. Valid for X12 Inbound Agreement, X12 Outbound Agreement.</li>\r\n<li>GS06 -  Group control number generator. Valid for X12 Inbound Agreement, X12 Outbound Functional Group Agreement.</li>\r\n</ul>",
          "$ref" : "#/definitions/json_Identifier"
        }
      },
      "title" : "SequenceNumberBean",
      "description" : ""
    },
    "xml_ns0_processing" : {
      "type" : "string",
      "title" : "processing",
      "description" : "",
      "enum" : [ "P", "D", "T" ]
    },
    "xml_ns0_addressingRuleBean" : {
      "title" : "addressingRuleBean",
      "allOf" : [ {
        "properties" : {
          "addressingAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Determine how a pickup will compute the sender/receiver's address</p>\r\n<b>Values for addressing rule action</b>\r\n<ul>\r\n<li><b>USE_METADATA_OR_PROTOCOL_ADDRESS</b> Address must be determined by either message attribute configuration or by protocol address only.</li>\r\n<li><b>USE_FIXED_PARTY</b> Specify the address. Always use a fixed address.</br>\r\nSpecifies that the trading engine should always use a fixed address for the sender or receiver. The \"from\" or \"to\" party must be set up as a community or partner.</br>\r\n<b>Note</b> When this value is chosen, <i>fixedPartyId</i> should also be set</li>\r\n<li><b>USE_PROTOCOL_ADDRESS</b> Use the protocol address but if protocol address is missing, parse the document for the address.</br>\r\nIf you select this option, you must configure the address parsing rule. See Address parsing rule options below.</li>\r\n<li><b>ALWAYS_PARSE</b> Always parse for the address. Regardless whether the message protocol provides the address, always parse the document for the address..</br>\r\nSelect this option to specify that the trading engine should always parse the message for the sender or receiver address.\r\nFor messages from partners, however, the trading engine still checks the protocol header for the sender and receiver.\r\nA message with an unknown sender or receiver in the header is rejected. The always parse option for inbound messages is\r\nfor finding the identity of true senders or true receivers.For messages picked up from applications,\r\nthe always parse option tells the trading engine to find the sender or receiver in the message body.\r\nMessages from integration do not have protocol headers.If you select this option, you must configure the address parsing rule.\r\nSee Address parsing rule options below.\r\n</ul>\r\n</p>\r\n<b>Address parsing rule options</b>\r\n<ul>\r\n<li><b>If the document is EDI, parse for the address</b> - If an EDI document is picked up, use the \"to\" and \"from\" addresses specified within it.\r\nProperly formatted EDI documents contain this information.</li>\r\n<li><b>If the document is XML, use XPaths to locate the address</b> - If an XML document is picked up, use the \"to\" and \"from\"\r\naddresses specified by the XPaths within it. XML Path Language or XPath is a language for addressing parts of an XML document.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_addressingRuleAction"
          },
          "edifactUseInternal" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "<b>Perform enhanced EDI parsing to match partner messaging IDs</b> - This setting applies to X12, EDIFACT, and TRADACOMS.\r\nIf your user license supports Axway B2Bi, this option is selected by default.If selected, the trading engine performs\r\nadditional parsing of the header information to create routing IDs with a colon separator between values.</br>\r\nFor example, information from an EDIFACT file would be parsed in the following format:</br>\r\n<i> ID:interchange ID:internal ID:sub-internal ID </i></br>\r\n<b>When this parsing option is elected,</b> communities and partners must have matching routing IDs in the same format.</br>\r\nFor example, if the \"from\" address in a parsed message is <i>ID:interchange ID:value3:value4</i>, the partner must have the same routing ID.</br>\r\n<b>When this option is not selected,</b> \"to\" and \"from\" addresses in messages are parsed only for the trading engineID and ID values.</br>\r\nFor example, <i>1:partner</i> is parsed as the sender and rendered as partner1 in the user interface.</br>\r\n<b>Note</b> that TRADACOMS only has two, optional values that can be parsed. They must match one of the following patterns:</br>\r\nA: </br>\r\n:B </br>\r\nA:B</br>"
          },
          "fixedPartyId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Community or partner friendly name"
          },
          "parseEdi" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "<b>If the document is EDI, parse for the address</b> - If an EDI document is picked up, use the \"to\" and \"from\" addresses specified within it.\r\nProperly formatted EDI documents contain this information."
          },
          "parseXml" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "<b>If the document is XML, use XPaths to locate the address</b> - If an XML document is picked up, use the \"to\" and \"from\"\r\naddresses specified by the XPaths within it. XML Path Language or XPath is a language for addressing parts of an XML document.</li>"
          },
          "xpaths" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field is for specifying the XPaths of the message sender or receiver.<br>\r\n<b>Note</b> Using the XPath requires knowledge of XML."
          }
        }
      }, { } ],
      "description" : "Use this class to specify sender and receiver rules for consumed files"
    },
    "xml_ns0_ftpDeliveryFilenameMode" : {
      "type" : "string",
      "title" : "ftpDeliveryFilenameMode",
      "description" : "",
      "enum" : [ "PRESERVE_ORIGINAL", "AUTO_GENERATE", "CUSTOM_GENERATE" ]
    },
    "json_SecureTcpNetworkSettingsBean" : {
      "title" : "SecureTcpNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_TcpNetworkSettingsBean"
      }, {
        "properties" : {
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Specify whether the cipher suites supported by the server are stated, in order for you select the level of\r\nsecurity that suits your needs and enables communicating with others who might have different security\r\nrequirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires signing messages using a message digest\r\nalgorithm. But the choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "enableClientAuthenticatedTls" : {
            "type" : "boolean",
            "description" : "Specify whether the partner's certificate should be used for authentication when the partner connects to the\r\nserver, when using TLS option is enabled. If this option is set to <code>true</code>, partners are required\r\nto present a certificate for identity verification."
          }
        }
      } ],
      "description" : ""
    },
    "json_X12OutboundAgreementBean" : {
      "title" : "X12OutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_X12AgreementBean"
      }, {
        "properties" : {
          "authCodeQualifier" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p> A code identifying the type of information in the authorization information (ISA01). This is an interchange\r\nenvelope parameter. </p>"
          },
          "authCode" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>A value representing additional identification or authorization of the interchange sender or the data in the\r\ninterchange (ISA02). This is an interchange envelope parameter. The type of information is set by the\r\n<b>Authorization code qualifier</b> (ISA01).\r\n<p/>"
          },
          "securityCodeQualifier" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n</p>\r\n<p> A code identifying the type of\r\ninformation in the security information (ISA03). This is an interchange envelope parameter. </p>"
          },
          "securityCode" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> Security information about the\r\ninterchange sender or the data in the interchange (ISA04). This is an interchange envelope parameter. The type of\r\ninformation is set by the <b>Security code qualifier</b> (ISA03). </p>"
          },
          "repetitionSeperator" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> The repetition separator\r\ncharacter for the repeating element (ISA11). This is an interchange envelope parameter. </p>"
          },
          "interchangeControlVersion" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> The information code version\r\nnumber. This covers all current interchange control segments (ISA12). This is an interchange envelope parameter.\r\n</p>"
          },
          "interchangeControlNumberGenerator" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> The data interchange information\r\ncode control number. This is the starting value of unique identifiers for outbound messages. By default, the\r\nidentifier increases by 1 for each additional message (ISA13). This is an interchange envelope parameter. </p>"
          },
          "requestTa1Acks" : {
            "type" : "boolean",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> Select this option to request an\r\ninterchange acknowledgment (TA1) (ISA14). This is an interchange envelope parameter. </p>"
          },
          "compositeElementSeperator" : {
            "type" : "string",
            "description" : "Enabled for both X12 processing modes. <p/> <p> Enter the character to use as the composite element separator\r\n(ISA16). The field uses a colon as the default value. Alternately, you can use a hex code. </p>"
          },
          "elementSeperator" : {
            "type" : "string",
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> Enter the character to use as the element separator. The field uses an asterisk as the default value.\r\nAlternately, you can use a hex code. </p>"
          },
          "segmentSeperator" : {
            "type" : "string",
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> Enter the character to use as the segment separator. The field uses the hex code <code>\\H0A</code> as the default\r\nvalue. </p>"
          },
          "acceptGroups" : {
            "type" : "boolean",
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> Select this option if you want to accept group segments. </p>"
          },
          "groupTimeout" : {
            "type" : "string",
            "description" : "When <b>acceptGroups</b> is <code>true</code>, specify the time limit in hours and minutes before groups time out. The 24-hour\r\nformat is <b>HH:MM</b>."
          },
          "groupTimeoutAction" : {
            "description" : "When <b>acceptGroups</b> is <code>true</code>, specify the action to perform if group messages are missing. The accepted values are:\r\n<ul>\r\n<li><b>SEND_AND_WARN</b></li>\r\n<li><b>SEND</b></li>\r\n<li><b>STOP</b></li>\r\n</ul>",
            "$ref" : "#/definitions/json_GroupTimeoutActionType_x12"
          },
          "maxNumbDocs" : {
            "type" : "string",
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> The largest number of documents the envelope can contain. </p>"
          },
          "envelopeTimeout" : {
            "type" : "string",
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> The envelope timeout in hours and minutes. The 24-hour format is HH:MM, where HH is from 00 to 23 and MM is\r\nfrom 00 to 59. </p>"
          },
          "groupAckWaitTime" : {
            "type" : "string",
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> The time in hours and minutes to wait for receiving acknowledgments. If not received within this time, the\r\ntransmission is regarded as faulty. The 24-hour format is HH:MM, where HH is from 00 to 23 and MM is from 00 to\r\n59. </p>"
          },
          "transSetControlNumbGenerator" : {
            "type" : "string",
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> A control number assigned by the sender and stored in the transaction set header. The number must be unique\r\nin the functional group (ST02). </p>"
          },
          "request997Acks" : {
            "type" : "boolean",
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> Select this option if the an acknowledgement to the outbound message is required. </p>"
          }
        }
      } ],
      "description" : ""
    },
    "json_ComponentInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : ""
        },
        "version" : {
          "type" : "string",
          "description" : ""
        },
        "build" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "ComponentInfo",
      "description" : ""
    },
    "json_WebTraderUnAuthorizedException" : {
      "title" : "WebTraderUnAuthorizedException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_UnAuthorizedException"
      }, { } ],
      "description" : "Exception that maps to HTTP 401 return code"
    },
    "json_UserPasswordChangeBean" : {
      "type" : "object",
      "properties" : {
        "newPassword" : {
          "type" : "string",
          "description" : ""
        },
        "oldPassword" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "UserPasswordChangeBean",
      "description" : ""
    },
    "json_EmailB2biConsumerExchangePointBean" : {
      "title" : "EmailB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_smtpServerSettingsBean" : {
      "title" : "smtpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverSettingsBean"
      }, {
        "properties" : {
          "backlogSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The number of connections that the server puts 'on hold' while it is busy. Once this number is reached,\r\nconnections are refused. <b>Required.</b>"
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port that the embedded server uses to listen for connection requests. <b>Required.</b>"
          },
          "remoteHost" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The host used by a partner to connect to this embedded server. The trading engine supplies a value based on the\r\nname of the host computer. <b>Required.</b>"
          },
          "remotePort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port used by a remote partner to connect to this embedded server. <b>Required.</b>"
          }
        }
      } ],
      "description" : ""
    },
    "json_SmtpProducerExchangePointBean" : {
      "title" : "SmtpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The SMTP server for sending messages to the specified partner. You must provide a fully qualified domain name or IP\r\naddress for the server. If you leave this field blank, the system inserts its external SMTP server."
          },
          "port" : {
            "type" : "number",
            "description" : "The port used for sending messages to the specified partner. The default values is 25."
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "The email address for sending messages to a partner."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits for a connection to\t the delivery exchange before the attempt times out.\r\nThe default value is 30 seconds. <b>Required.</b>"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection.\r\n<b>Required.</b>"
          },
          "useGlobalSmtp" : {
            "type" : "boolean",
            "description" : "Specify whether the system's external SMTP server is used to send messages to the partner.\r\nOtherwise, you can specify a different external SMTP server to send messages to the partner."
          },
          "usernamePasswordCredentials" : {
            "description" : "User name and password to connect to the server. Usually, SMTP servers do not require user names and passwords for sending messages.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "globalExternalServer" : {
            "type" : "string",
            "description" : "The system's external SMTP server."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "List with cipher suites.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "client use ssl to connect to this server ?"
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "description" : "SSL authentication.  If we're acting as the client, true means we should verify that the\r\nhostname for the certificate given to us by the server matches the host we connected to.\r\nIf we're acting as the server, true means we require the client to present its\r\ncertificate (\"client authentication\")."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "If <b>true</b>, a list of cipher suites should be provided."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_httpProducerExchangePointBean" : {
      "title" : "httpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires the signing of messages using a message digest\r\nalgorithm. The choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits for a connection to the delivery exchange before the attempt times out.\r\n<p/>\r\nAlthough the default value is 30 seconds, this may be longer than the interval allowed by your operating\r\nsystem. For example, Windows XP by default allows a maximum timeout of 20 seconds. The actual connect timeout\r\ninterval is the lesser of the operating system timeout and the value set in the trading engine."
          },
          "enable102Processing" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether 102-processing is enabled. If this option is set to <code>true</code>, it is ensured that the\r\nconnection between the client and server does not become idle and fail while message processing is in progress.\r\n<p/>\r\nFor example, this makes sure the connection remains active when the client is sending a multi-gigabyte message.\r\nMost often this setting is useful when the client requests a synchronous receipt, but is also\r\nrecommended in some cases for an asynchronous receipt.\r\nBefore selecting this option, make sure the server supports 102 responses."
          },
          "enableChunking" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether chunking messages is enabled. A chunked message is a large message broken into smaller\r\npieces for sending to a partner over the Internet or to back-end integration.\r\n<p/>\r\nAlthough primarily used for handling large messages, chunking can also be enabled for small messages.\r\nYou should perform tests to determine whether a partner's server can handle chunked messages."
          },
          "enableHostNameVerification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "enableRestarts" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether checkpoint-restart is enabled. A checkpoint is information saved to disk that is a\r\nrecovery point in the event of a transport failure.\r\n<p/>\r\nThe restart program uses the last saved checkpoint and\r\nstarts again, ensuring no loss of data. To reduce unnecessary overhead when processing small files,\r\ncheckpoint files are only created for messages that are at least 100 KB in size."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the cipher suites supported by the server are stated, to enable communication with\r\npartners who might have different security requirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "proxy" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether you must pass through a proxy to reach the delivery exchange server. For partner exchanges,\r\nthe proxy is located between the trading engine and the partner's HTTP server.",
            "$ref" : "#/definitions/xml_ns0_httpProxyBean"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating\r\nthe connection."
          },
          "responseTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits for the delivery exchange to respond to a request\r\nbefore terminating the connection."
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password to connect to the server.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_ackEnvelopingType" : {
      "type" : "string",
      "title" : "ackEnvelopingType",
      "description" : "",
      "enum" : [ "DEFAULT", "OUTBOUND_AGREEMENT" ]
    },
    "xml_ns0_messageBean" : {
      "title" : "messageBean",
      "allOf" : [ {
        "properties" : {
          "coreId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Gets the Message core Id"
          },
          "currentStateType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Gets the Message current state"
          },
          "documentClass" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "the Message document class"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Gets the Message identifier"
          },
          "receiverPartyID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Gets the Message receiver party Id"
          },
          "receiverRoutingID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Gets the Message receiver routing Id"
          },
          "senderPartyID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Gets the Message sender party Id"
          },
          "senderRoutingID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Gets the Message sender routing Id"
          },
          "integrationID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "currentMessageID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "senderRoutingIDType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "receiverRoutingIdType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "contentMimeType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "ediControlID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "consumptionFilename" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "productionFilename" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "consumptionExchangePointOID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "originationTime" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "deliveredTime" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "direction" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "consumptionURL" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "productionURL" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "dmzZone" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_WebApplicationException" : {
      "title" : "WebApplicationException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_RuntimeException"
      }, {
        "properties" : {
          "response" : {
            "description" : "",
            "$ref" : "#/definitions/json_Response"
          }
        }
      } ],
      "description" : ""
    },
    "json_JmsListeningExchangePointBean" : {
      "title" : "JmsListeningExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ConsumerExchangePointBean"
      }, {
        "properties" : {
          "jmsQueueConnFactory" : {
            "type" : "string",
            "description" : "The connection factory as defined within the JMS provider. This value can be either in the form\r\n<code>factoryname@routername</code> or the JNDI public symbol for the QueueConnectionFactory. This\r\ndepends on your JMS provider and how it is configured.\r\nExamples: <code>plainsocket@router1</code> or <code>QueueConnectionFactory22</code>."
          },
          "jmsQueue" : {
            "type" : "string",
            "description" : "The name of the queue. <p/>\r\nExample: <code>XMLQueue@router1</code>."
          },
          "jmsCredentials" : {
            "description" : "User name and password for the JMS provider. The user name and password can be the same as your JNDI user name\r\nand password. This depends on your JMS provider and how it is configured.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "useJndi" : {
            "type" : "boolean",
            "description" : "Specify whether the JMS provider requires a Java Naming and Directory Interface (JNDI) implementation.\r\nFor example, Oracle Advanced Queuing facility (Oracle AQ) does not use a JNDI provider."
          },
          "jndiUrl" : {
            "type" : "string",
            "description" : "The network URL used to obtain access to the JNDI service provider for your JMS service.\r\nExample: <code>smqp://localhost:4001/timeout=10000</code>."
          },
          "jndiFactory" : {
            "type" : "string",
            "description" : "The name of the JNDI service provider class. <p/>\r\nExample: <code>com.swiftmq.jndi.InitialContextFactoryImpl</code>."
          },
          "jndiCredentials" : {
            "description" : "User name and password for the JNDI provider. The user name and password could be blank and are typically provided\r\nin the JNDI URL. This depends on the JNDI provider and how it is configured.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "queueUtilClass" : {
            "type" : "string",
            "description" : "The name of the Java class for implementing the connection to the message queue.\r\nA Java class for Oracle AQ is available. The class name is:\r\n<code>com.cyclonecommerce.tradingengine.transport.jms.OracleAQQueueUtil</code>.\r\nIf you want a Java class for a provider other than Oracle AQ, you need the help of a\r\nprofessional services consultant."
          },
          "queueUtilParameters" : {
            "type" : "array",
            "description" : "There are four parameters required for the Java class for Oracle AQ. These parameters must be in the following order:\r\n<ol><li>Host - the name of the computer running Oracle AQ</li>\r\n<li>Database name - the name of the database that contains the message queue</li>\r\n<li>Port - the port Oracle AQ uses to listen for messages</li>\r\n<li>Driver type - the type of JDBC driver for connecting to the provider. For Oracle AQ, the valid values are\r\n<code>thin</code> and <code>oci8</code>.</li><ol/>",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "receiveTimeoutSeconds" : {
            "type" : "number",
            "description" : "If your JMS provider is slow to respond to the request received from the trading engine, increase the response interval.\r\nThe default value of 0 is acceptable in the case of most JMS providers. However, if unacceptable for your\r\nJMS provider, use trial-and-error to determine a workable interval between 1 and 32767 seconds."
          },
          "serverReconnectIntervalSeconds" : {
            "type" : "number",
            "description" : "The interval in seconds to wait between reconnect attempts."
          },
          "usePreferredNodes" : {
            "type" : "boolean",
            "description" : "If there are one or more nodes for the trading engine, you can select one or more as the preferred\r\nnodes for consuming messages. If the preferred nodes are running, these are used to process messages.\r\nIf the preferred nodes are stopped, work is distributed among the remaining running available nodes.\r\nSelecting preferred nodes lets you manage work distribution among nodes.\r\n<p>\r\nThis option is available for integration pickup and trading delivery exchanges that poll for messages.\r\n</p>\r\n<p>\r\nIn general, this setting should not be used. Usually it is best to let the trading engine automatically\r\ndetermine which node should be responsible for initiating the polling of which exchange point. This\r\nsetting is useful if you have a cluster that spans geographical locations and each location has its own\r\nlocal transport servers. In this situation, you would use this setting to ensure the exchange points\r\nassociated with the transport servers are assigned to nodes in the vicinity of the transport servers.\r\n</p>"
          },
          "preferredNodes" : {
            "type" : "array",
            "description" : "Get the preferred nodes used to process messages. See <code>usePreferredNodes</code>.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "delivery" : {
            "type" : "string",
            "description" : "Returns a link to the delivery exchange point which will be given to trading partners for sending messages."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_idocOutboundAgreementBean" : {
      "title" : "idocOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_idocAgreementBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_certificateState" : {
      "type" : "string",
      "title" : "certificateState",
      "description" : "",
      "enum" : [ "PENDING", "OPERATIONAL", "EXPIRED", "FAILED", "REVOKED", "UNKNOWN" ]
    },
    "xml_ns0_integrationDeliverySettingsBean" : {
      "title" : "integrationDeliverySettingsBean",
      "allOf" : [ {
        "properties" : {
          "applicationDeliveryId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the Application Delivery used by this Delivery Setting.  <p/>"
          },
          "deliveryCriteria" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use this to define the conditions that cause payloads to be delivered to the appropriate application delivery.\r\nIf a payload does not satisfy the delivery criteria for any application delivery, then the first available\r\napplication delivery is used. An application delivery with no criteria is used only if it is the first one\r\navailable. <p/>",
            "$ref" : "#/definitions/xml_ns0_criteriaBean"
          },
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies whether or not this Delivery Setting is enabled. <p/>"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of this Delivery Setting. <p/>"
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_ftpB2biProducerExchangePointBean" : {
      "title" : "ftpB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_WSUserBean" : {
      "title" : "WSUserBean",
      "allOf" : [ {
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The status of this user."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique <code>String</code> ID for this user."
          },
          "password" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The password of this Web Services user."
          },
          "policy" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The password policy assigned to this user."
          },
          "user" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The username of this Web Services user. Once the user is created, the username cannot be changed."
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_ftpProcessingMode" : {
      "type" : "string",
      "title" : "ftpProcessingMode",
      "description" : "",
      "enum" : [ "USE_DEFAULT", "USE_TIMESTAMP_POLLING" ]
    },
    "xml_ns0_ftpServerExchangePointBean" : {
      "title" : "ftpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverExchangePointBean"
      }, {
        "properties" : {
          "defaultUser" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The default ftp account used by the FTP embedded server.",
            "$ref" : "#/definitions/xml_ns0_ftpUserBean"
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The local port used by the embedded FTP server to listen for incoming connections.\r\nThe default value is 4021 for the trading server and 5021 for the application server."
          },
          "modifyFtpServerDirectory" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable subdirectory management on the client side."
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds that B2Bi waits for missing messages of a sequence before taking the appropriate action.\r\nThis feature avoids the blocking of processing when a sequenced message is not available. Default value is of\r\n60 seconds."
          },
          "sequenced" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether all messages that are consumed by this pickup should be delivered in their original\r\nconsumption order.\r\n<p/>\r\nIn B2Bi message-handling, sequential delivery is the ability to deliver messages in the order they\r\nwere originally consumed on a specific pickup. This is sometimes referred to as first-in-first-out\r\n(FIFO) behavior.\r\n<p/>\r\nSequential message delivery is implemented only for trading engine pickups, not for integration\r\nengine pickups"
          }
        }
      } ],
      "description" : ""
    },
    "json_SshServerSettingsBean" : {
      "title" : "SshServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerSettingsBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The port on which the embedded server listens for connection requests."
          },
          "remoteHost" : {
            "type" : "string",
            "description" : "The fully qualified domain name or IP address your partners use to pick up messages from this exchange. <p/>"
          },
          "remotePort" : {
            "type" : "number",
            "description" : "The port number that a community's partners must use to connect to this embedded server.<p/>"
          },
          "maxConnections" : {
            "type" : "number",
            "description" : "The number of total open connections the trading engine server can make to a partner. If you are operating in a\r\ncluster environment, this is the total number across the entire cluster, no matter how many JVM nodes are\r\nrunning. <p/>"
          },
          "maxAuthentications" : {
            "type" : "number",
            "description" : "The number of failed authentication attempts the server allows before disconnecting the user. <p/>"
          },
          "clientSessionTimeoutSeconds" : {
            "type" : "number",
            "description" : "The number of seconds the server waits before disconnecting an inactive logged-on user.<p/>"
          },
          "authenticationMode" : {
            "description" : "The authentication type this server requires. Select one of the following: <p/><ul>\r\n<li>PASSWORD_AUTHENTICATION <p/>\r\nThis server requires the SFTP client to authenticate using a password. Select this in order to require your\r\npartner to submit a password to connect to your embedded SFTP server.\r\n</li>\r\n<li>PUBLIC_KEY_AUTHENTICATION <p/>\r\nThis server requires the SFTP client to authenticate using a public/private key pair. Select this in order\r\nto require your partner to use a private key to encrypt an authentication message and pass it to the server\r\nto decrypt with the matching public key.\r\n</li>\r\n<li>BOTH_PUBLIC_KEY_PASSWORD_AUTHENTICATION <p/>\r\nThis server requires the SFTP client to authenticate using both a password and a public/private key pair.\r\n</li>\r\n<li>EITHER_PUBLIC_KEY_PASSWORD_AUTHENTICATION <p/>\r\nThis server allows the SFTP client to authenticate using either a password or a public/private key pair.\r\n</li>\r\n</ul><p/>",
            "$ref" : "#/definitions/json_SshServerAuthenticationMode"
          },
          "hostBasedAuthentication" : {
            "type" : "boolean",
            "description" : "Host based authentication."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Set this to true if you want to select the specific ciphers supported for the server. If set to false, all ciphers\r\nare supported by default. The default is less secure than specifying only certain ciphers.<p/>"
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "Specific SSH ciphers supported by this server. <p/>",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "rsaKeyType" : {
            "type" : "string",
            "description" : "The type of the RSA key found on this server. <p/>"
          },
          "rsaKey" : {
            "type" : "string",
            "description" : "Path to the RSA SSH key."
          },
          "dsaKey" : {
            "type" : "string",
            "description" : "Path to the DSA SSH key."
          },
          "dsaKeyType" : {
            "type" : "string",
            "description" : "The type of the DSA key found on this server. <p/>"
          },
          "dsaKeyLength" : {
            "type" : "number",
            "description" : "The length of the DSA key. <p/>"
          },
          "rsaKeyLength" : {
            "type" : "number",
            "description" : "The length of the RSA key. <p/>"
          },
          "allowUploadOnDelExchange" : {
            "type" : "boolean",
            "description" : "Select this option to allow documents to be uploaded to application deliveries or partner deliveries. By default,\r\ndocument uploads are not allowed for deliveries. This setting does not impact pickups. <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_addressingRulesBean" : {
      "title" : "addressingRulesBean",
      "allOf" : [ {
        "properties" : {
          "fromAddress" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Used to configure how the system determines who is sending the message.",
            "$ref" : "#/definitions/xml_ns0_addressingRuleBean"
          },
          "toAddress" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Used to configure how the system determines to whom the message is being sent",
            "$ref" : "#/definitions/xml_ns0_addressingRuleBean"
          }
        }
      }, { } ],
      "description" : "Used to configure how the system determines who is sending/receiving the message."
    },
    "xml_ns0_x12OutboundFunctionalGroupBean" : {
      "title" : "x12OutboundFunctionalGroupBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_functionalGroupBean"
      }, {
        "properties" : {
          "controlNumberGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe data interchange information code control number. This is the starting value of unique identifiers\r\nfor outbound messages. By default, the identifier increases by 1 for each additional message (ISA13).\r\nThis is an interchange envelope parameter.\r\n</p>"
          },
          "functionalGroupId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS 479) Identifies a group of application related transaction sets."
          },
          "identifierCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS480) Code indicating the version, release, sub-release, and industry identifier of the EDI standard\r\nbeing used, including the GS and GE segments. If code in DE455 in GS segment is X, then in DE 480\r\npositions 1-3 are the version number; positions 4-6 are the release and subrelease, level of the\r\nversion; and positions 7-12 are the industry or trade association identifiers (optionally assigned by\r\nuser); if code in DE455 in GS segment is T, then other formats are allowed."
          },
          "receiverMessagingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS 124) Identifies the party receiving transmission. This code is agreed to by trading partners."
          },
          "responsibleAgencyCode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS 455) Identifies the issuer of the standard. This code is used in conjunction with GS 480 below.",
            "$ref" : "#/definitions/xml_ns0_x12IndustryIdentifier"
          },
          "senderMessagingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(GS 142) Identifies the party sending the transmission. This code is agreed to by trading partners."
          },
          "timeFormat" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select one of the following time formats:\r\n<ul>\r\n<li><b>HHMM</b></li>\r\n<li><b>HHMMSS</b></li>\r\n<li><b>HHMMSSD</b></li>\r\n<li><b>HHSSMMDD</b></li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_groupTimeFormatType"
          }
        }
      } ],
      "description" : "Author: srybak\r\nDate: 5/23/14"
    },
    "xml_ns0_httpB2biConsumerExchangePointBean" : {
      "title" : "httpB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_GroupTimeoutActionType" : {
      "type" : "string",
      "title" : "GroupTimeoutActionType",
      "description" : "",
      "enum" : [ "SEND_AND_WARN", "SEND", "STOP" ]
    },
    "json_PopAuthenticationType" : {
      "type" : "string",
      "title" : "PopAuthenticationType",
      "description" : "",
      "enum" : [ "USER_PASS", "APOP" ]
    },
    "xml_ns0_metadataProfileConditionBean" : {
      "title" : "metadataProfileConditionBean",
      "allOf" : [ {
        "properties" : {
          "condition" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_metadataCondition"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "metadata" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "value" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_vdaAgreementBean" : {
      "title" : "vdaAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_agreementBean"
      }, {
        "properties" : {
          "receiverIdentification" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The \"Partner Code\" identification defined in the receiver's Messaging ID. </br> This is a read-only field."
          },
          "receiverVdaRole" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The VDA role of the receiving partner. </br> This is a read-only field.",
            "$ref" : "#/definitions/xml_ns0_vdaRole"
          },
          "senderIdentification" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The \"Partner Code\" identification defined in the sender's Messaging ID. </br> This is a read-only field."
          },
          "senderVdaRole" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The VDA role of the sending partner.",
            "$ref" : "#/definitions/xml_ns0_vdaRole"
          }
        }
      } ],
      "description" : ""
    },
    "json_FtpDeliveryFilenameMode" : {
      "type" : "string",
      "title" : "FtpDeliveryFilenameMode",
      "description" : "",
      "enum" : [ "PRESERVE_ORIGINAL", "AUTO_GENERATE", "CUSTOM_GENERATE" ]
    },
    "json_NetworkSettingsBean" : {
      "type" : "object",
      "title" : "NetworkSettingsBean",
      "description" : ""
    },
    "xml_ns0_mqProducerExchangePointBean" : {
      "title" : "mqProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "clientModeEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries connection type. Two options are available:\r\n<ul><li><code>true</code> - select this option to use a channel connection on the local machine or via\r\nthe network, to connect to a queue manager. </li>\r\n<li><code>false</code> – select this option to use an API connection, via shared memory, to a local queue\r\nmanager. </li></ul>"
          },
          "convertUsingCCSID" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set to <code>true</code> if you want to enable data conversion."
          },
          "mqChannel" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries channel."
          },
          "mqCharset" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The character set for converting data."
          },
          "mqHost" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries server name."
          },
          "mqPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries port number."
          },
          "mqQueueManager" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries queue manager."
          },
          "mqQueueName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the MQSeries queue."
          },
          "mqStandbyServer" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Multi-instance standby server address."
          },
          "multiInstanceEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if the server has an MQSeries multi-instance queue manager."
          },
          "persistenceMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The message persistence mode.",
            "$ref" : "#/definitions/xml_ns0_persistenceMode"
          },
          "segmentationModeEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use message segmentation."
          },
          "segmentationSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The message segmentation size in bytes."
          },
          "segmentationType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The message segmentation type:\r\n<ul><li>MQSeries</li>\r\n<li>Application segmentation</li></ul>",
            "$ref" : "#/definitions/xml_ns0_mqSegmentationType"
          },
          "sslCipherSuite" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The SSL cipher suite to use for SSL encryption.",
            "$ref" : "#/definitions/xml_ns0_sslCipherSuite"
          },
          "useSsl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use SSL to connect to the MQSeries server."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password to connect to the server.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "json_GenerateAckRuleType" : {
      "type" : "string",
      "title" : "GenerateAckRuleType",
      "description" : "",
      "enum" : [ "ALWAYS", "NEVER", "ON_REQUEST", "IF_ERRORS" ]
    },
    "json_MetadataProfileOutputToNextStepBean" : {
      "title" : "MetadataProfileOutputToNextStepBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MetadataProfileOutputBean"
      }, {
        "properties" : {
          "attributeMap" : {
            "description" : "",
            "$ref" : "#/definitions/json_MapType"
          },
          "overrideDocumentDetection" : {
            "type" : "boolean",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_nachaOutboundAgreementBean" : {
      "title" : "nachaOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_nachaAgreementBean"
      }, {
        "properties" : {
          "acceptGroups" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether group segments are accepted."
          },
          "companyEntryDescription" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The company entry description."
          },
          "companyName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The company name."
          },
          "envelopeTimeout" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The envelope timeout in hours and minutes. The 24-hour format is <code>HH:MM</code>."
          },
          "fileIdModifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange file-id-modifier."
          },
          "formatCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The format code."
          },
          "groupTimeout" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The time limit in hours and minutes before groups time out (when group segments are accepted).\r\nThe 24-hour format is <code>HH:MM</code>."
          },
          "groupTimeoutAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The action to perform if group messages are missing (when group segments are accepted).\r\nThe available options are:\r\n<ul>\r\n<li>SEND_AND_WARN</li>\r\n<li>SEND</li>\r\n<li>STOP</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_groupTimeoutActionType"
          },
          "maxNumbDocs" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The largest number of entries the envelope can contain."
          },
          "originatingDFIId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The originating DFT ID."
          },
          "priorityCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The priority code."
          },
          "referenceCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange reference-code."
          },
          "scheduleTimeToEnvelope" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The envelope time schedule."
          },
          "stdEntryClassCode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The standard entry class code.",
            "$ref" : "#/definitions/xml_ns0_stdEntryClassCode"
          },
          "useTriggerMessage" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The use-trigger-message checkbox value."
          }
        }
      } ],
      "description" : ""
    },
    "json_InHouseAgreementBean" : {
      "title" : "InHouseAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, {
        "properties" : {
          "senderIdentification" : {
            "type" : "string",
            "description" : "The sender partner's messaging ID. </br> This is a read-only field."
          },
          "receiverIdentification" : {
            "type" : "string",
            "description" : "The receiver partner's messaging ID. </br> This is a read-only field."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_ftpSubDirectoryBean" : {
      "title" : "ftpSubDirectoryBean",
      "allOf" : [ {
        "properties" : {
          "ftpUserName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Get the name of the FTP user."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "subDirectory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "User's subdirectory where the messages will be written.\r\nThe user subdirectories for each exchange are different."
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_CertificateState" : {
      "type" : "string",
      "title" : "CertificateState",
      "description" : "",
      "enum" : [ "PENDING", "OPERATIONAL", "EXPIRED", "FAILED", "REVOKED", "UNKNOWN" ]
    },
    "xml_ns0_sshServerSettingsBean" : {
      "title" : "sshServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverSettingsBean"
      }, {
        "properties" : {
          "allowUploadOnDelExchange" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option to allow documents to be uploaded to application deliveries or partner deliveries. By default,\r\ndocument uploads are not allowed for deliveries. This setting does not impact pickups. <p/>"
          },
          "authenticationMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The authentication type this server requires. Select one of the following: <p/><ul>\r\n<li>PASSWORD_AUTHENTICATION <p/>\r\nThis server requires the SFTP client to authenticate using a password. Select this in order to require your\r\npartner to submit a password to connect to your embedded SFTP server.\r\n</li>\r\n<li>PUBLIC_KEY_AUTHENTICATION <p/>\r\nThis server requires the SFTP client to authenticate using a public/private key pair. Select this in order\r\nto require your partner to use a private key to encrypt an authentication message and pass it to the server\r\nto decrypt with the matching public key.\r\n</li>\r\n<li>BOTH_PUBLIC_KEY_PASSWORD_AUTHENTICATION <p/>\r\nThis server requires the SFTP client to authenticate using both a password and a public/private key pair.\r\n</li>\r\n<li>EITHER_PUBLIC_KEY_PASSWORD_AUTHENTICATION <p/>\r\nThis server allows the SFTP client to authenticate using either a password or a public/private key pair.\r\n</li>\r\n</ul><p/>",
            "$ref" : "#/definitions/xml_ns0_sshServerAuthenticationMode"
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specific SSH ciphers supported by this server. <p/>"
          },
          "clientSessionTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The number of seconds the server waits before disconnecting an inactive logged-on user.<p/>"
          },
          "dsaKeyLength" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The length of the DSA key. <p/>"
          },
          "dsaKeyType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the DSA key found on this server. <p/>"
          },
          "hostBasedAuthentication" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Host based authentication."
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port on which the embedded server listens for connection requests."
          },
          "maxAuthentications" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The number of failed authentication attempts the server allows before disconnecting the user. <p/>"
          },
          "maxConnections" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The number of total open connections the trading engine server can make to a partner. If you are operating in a\r\ncluster environment, this is the total number across the entire cluster, no matter how many JVM nodes are\r\nrunning. <p/>"
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this to true if you want to select the specific ciphers supported for the server. If set to false, all ciphers\r\nare supported by default. The default is less secure than specifying only certain ciphers.<p/>"
          },
          "remoteHost" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The fully qualified domain name or IP address your partners use to pick up messages from this exchange. <p/>"
          },
          "remotePort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port number that a community's partners must use to connect to this embedded server.<p/>"
          },
          "rsaKeyLength" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The length of the RSA key. <p/>"
          },
          "rsaKeyType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the RSA key found on this server. <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "json_PartnerDocumentServiceBean" : {
      "title" : "PartnerDocumentServiceBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentServiceBean"
      }, {
        "properties" : {
          "documentFormat" : {
            "type" : "string",
            "description" : "The documentStandard or format that applies to the document that is to be exchanged between partners."
          },
          "documentVersion" : {
            "type" : "string",
            "description" : "The documentVersion of the document that is to be exchanged between partners."
          },
          "documentType" : {
            "type" : "string",
            "description" : "The type of document that is to be exchanged between partners."
          },
          "postDetectionComponent" : {
            "type" : "string",
            "description" : "The component which provides post detection processing to the messages handled by this service.\r\nThis processing is executed after detection and before any other processing (such as splitting or  mapping) is done."
          },
          "postDetectionComponentId" : {
            "type" : "string",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_documentAgreementOutputAgreementBean" : {
      "title" : "documentAgreementOutputAgreementBean",
      "allOf" : [ {
        "properties" : {
          "agreementId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the outbound agreement to be used for enveloping."
          },
          "deliveryExchangeId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Delivery belonging to the alternate delivery partner to be used. This must be a complete and enabled partner delivery."
          },
          "overrideTransportReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this to <b>true</b> in order to use an alternate delivery partner."
          },
          "receiverId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the receiver partner for the outbound agreement or null for [ANY]."
          },
          "senderId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the sender partner or null for [ANY]."
          },
          "transportReceiverId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The partner to be used as alternate delivery partner."
          },
          "transportReceiverRoutingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Routing ID belonging to the alternate delivery partner to be used."
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_ConjunctorBean" : {
      "title" : "ConjunctorBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_CriteriaBean"
      }, {
        "properties" : {
          "conjunctor" : {
            "description" : "",
            "$ref" : "#/definitions/json_ConjunctorType"
          },
          "children" : {
            "type" : "array",
            "description" : "",
            "items" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/json_CriteriaBean"
              }
            }
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_documentAgreementOutputType" : {
      "type" : "string",
      "title" : "documentAgreementOutputType",
      "description" : "",
      "enum" : [ "USE_INBOUND_RECEIVER", "USE_ALTERNATE_DELIVERY_PARTNER", "USE_OUTBOUND_AGREEMENT", "USE_NONE" ]
    },
    "json_ActionResult" : {
      "type" : "object",
      "properties" : {
        "bean" : {
          "type" : "string",
          "description" : ""
        },
        "messages" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_ResponseMessage"
            }
          }
        }
      },
      "title" : "ActionResult",
      "description" : ""
    },
    "json_EdifactInboundAgreementBean" : {
      "title" : "EdifactInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_EdifactAgreementBean"
      }, {
        "properties" : {
          "useSyntaxVersion" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>syntaxVersion</code> field is used for matching/selection at runtime."
          },
          "useSyntaxIdentifier" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>syntaxIdentifier</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdSender" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerIdSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdReceiver" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerIdReceiver</code> field is used for matching/selection at runtime."
          },
          "useIdCodeQualifierSender" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>idCodeQualifierSender</code> field is used for matching/selection at runtime."
          },
          "useIdCodeQualifierReceiver" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>idCodeQualifierReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdInternalIdSender" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerIdInternalIdSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdInternalIdReceiver" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerIdInternalIdReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdInternalSubIdSender" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerIdInternalSubIdSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdInternalSubIdReceiver" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>partnerIdInternalSubIdReceiver</code> field is used for matching/selection at runtime."
          },
          "useApplicationReference" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>applicationReference</code> field is used for matching/selection at runtime."
          },
          "useCommunicationAgreementId" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>communicationAgreementId</code> field is used for matching/selection at runtime."
          },
          "useTestIndicator" : {
            "type" : "boolean",
            "description" : "Specify whether the <code>testIndicator</code> field is used for matching/selection at runtime."
          },
          "bypassEdiProcessing" : {
            "type" : "boolean",
            "description" : "Specify whether all other inbound processing options are unavailable.\r\nIf this option is set to <code>true</code>,\r\nthe performance of B2Bi is improved when handling large interchanges.\r\nThe trading engine handles incoming interchanges without unpacking the envelopes.\r\nThe trading engine reads only the interchange header and transaction set header segment (ST).\r\nThe entire interchange is sent to the map as a single message. Regular EDI logic is not applied.\r\nFor this reason, no acknowledgements can be automatically generated and sent.\r\nIt is not required to have a map in the service attached to this agreement. This enables the trading engine to\r\npass an entire interchange to the next application without modification.\r\nIf the service that is attached to the agreement contains a map, the documents contained\r\nin the interchange must all be of the same type and same version."
          },
          "generateAckRule" : {
            "description" : "The condition for sending acknowledgments. The available options are:\r\n<ul>\r\n<li>NEVER (default) - no acknowledgement is generated</li>\r\n<li>ON_REQUEST - acknowledgments must be requested when an integration is set up.</li>\r\n<li>ALWAYS - acknowledgments are always sent.</li>\r\n<li>IF_ERRORS - acknowledgements are sent only when errors are detected</li>\r\n</ul>",
            "$ref" : "#/definitions/json_GenerateAckRuleType"
          },
          "generateAckType" : {
            "description" : "The type of the EDIFACT acknowledgement. This information is needed when an acknowledgement rule that generates\r\nacknowledgements is selected. The following options are available:\r\n<ul>\r\n<li><b>CONTROL_EANCOM_D93A</b></li>\r\n<li><b>CONTROL_EANCOM_D96A</b></li>\r\n<li><b>CONTROL_UN_EDIEL_2</b></li>\r\n<li><b>CONTROL_UN_2</b></li>\r\n<li><b>CONTROL_UN_2_1</b></li>\r\n<li><b>CONTROL_UN_2_2</b></li>\r\n<li><b>CONTROL_UN_3</b></li>\r\n<li><b>CONTROL_UN_4</b></li>\r\n<li><b>CONTROL_EDIG_S_3_2</b></li>\r\n<li><b>CONTROL_EDIG_S_4</b></li>\r\n</ul>",
            "$ref" : "#/definitions/json_EdifactAckType"
          },
          "documentServiceId" : {
            "type" : "string",
            "description" : "The ID of the Service used for generating acknowledgements. This information is needed when an\r\nacknowledgement rule that generates acknowledgements is selected."
          },
          "outboundAgreementForAckEnvelopeId" : {
            "type" : "string",
            "description" : "The ID of the outbound agreement used for enveloping the acknowledgement. This information is needed when an\r\nacknowledgement rule that generates acknowledgements is selected."
          },
          "overrideAckTransportReceiver" : {
            "type" : "boolean",
            "description" : "Specify whether you want to identify a specific party as the receiving party of the acknowledgement. If this\r\noption is set to <code>false</code>, the receiver that is specified in the selected outbound agreement is used\r\nas the receiving delivery partner of the acknowledgement. This information is needed when an\r\nacknowledgement rule that generates acknowledgements is selected."
          },
          "ackDeliveryExchangeId" : {
            "type" : "string",
            "description" : "The ID of the delivery exchange used for handling the delivery of the acknowledgements. This information is\r\nneeded when an acknowledgement rule that generates acknowledgements is selected."
          },
          "ackTransportReceiverId" : {
            "type" : "string",
            "description" : "The ID of the partner selected as the receiving party of the acknowledgement. This information is\r\nneeded when an acknowledgement rule that generates acknowledgements is selected and the\r\n<code>overrideAckTransportReceiver</code> field is set to <code>true</code>."
          },
          "ackTransportReceiverRoutingId" : {
            "type" : "string",
            "description" : "The ID of the Routing Id of the partner selected as the receiving party of the acknowledgement. This information\r\nis needed when an acknowledgement rule that generates acknowledgements is selected and the\r\n<code>overrideAckTransportReceiver</code> field is set to <code>true</code>."
          },
          "rejectionRule" : {
            "description" : "The condition for rejecting interchanges. Interchanges are rejected depending on where errors are found.\r\nFor example, if there is an error in one transaction set, the whole interchange is rejected.\r\nThe available options are:\r\n<ul>\r\n<li>NONE</li>\r\n<li>ENTIRE_INTERCHANGE</li>\r\n<li>SAME_TYPE</li>\r\n<li>CUSTOM_TYPE</li>\r\n</ul>",
            "$ref" : "#/definitions/json_RejectionRuleType"
          },
          "customRejectionTypes" : {
            "type" : "string",
            "description" : ""
          },
          "seqCheckControlNumbs" : {
            "type" : "boolean",
            "description" : "Specify whether the interchange control number for inbound messages is verified to be in sequence.\r\nFor example, if the user sets the next expected interchange control number to 123456, the system validates the\r\nnext inbound document has an interchange control number of 123456. If the validation succeeds, the field is\r\nupdated to 123457. If the validation fails, the <code>outOfSequence</code> action is respected."
          },
          "outOfSeqAction" : {
            "description" : "The action to take for non-sequential numbers, when the <code>seqCheckControlNumbs</code> field is set to\r\n<code>true</code>. The following options are available:\r\n<ul>\r\n<li>WARN_AND_PROCESS - allows an inbound interchange to be processed successfully, with a logged warning</li>\r\n<li>FAIL_AND_PARK - processing is halted and an error is logged</li>\r\n</ul>",
            "$ref" : "#/definitions/json_OutOfSequenceActionType"
          },
          "dupCheckControlNumbs" : {
            "type" : "boolean",
            "description" : "Specify whether the interchange control numbers are checked for duplicates by comparing to interchanges already\r\nreceived. If a duplicate is detected for an inbound interchange, the <code>dupAction</code> is respected."
          },
          "dupAction" : {
            "description" : "The action to take for duplicate numbers, when the <code>dupCheckControlNumbs</code> field is set to\r\n<code>true</code>. The following options are available:\r\n<ul>\r\n<li>WARN_AND_PROCESS - allows an inbound interchange to be processed successfully, with a logged warning</li>\r\n<li>FAIL_AND_PARK - processing is halted and an error is logged</li>\r\n</ul>",
            "$ref" : "#/definitions/json_OutOfSequenceActionType"
          },
          "seqCheckGroupControlNumbs" : {
            "type" : "boolean",
            "description" : "Specify whether the interchange group control number for inbound messages is verified to be in sequence.\r\nFor example, if the user sets the next expected interchange group control number to 123456, the system validates the\r\nnext inbound document has an interchange control number of 123456. If the validation succeeds, the field is\r\nupdated to 123457. If the validation fails, the <code>outOfSeqAction</code> is respected."
          },
          "dupCheckGroupControlNumbs" : {
            "type" : "boolean",
            "description" : "Specify whether the interchange group control numbers are checked for duplicates by comparing to interchanges already\r\nreceived. If a duplicate is detected for an inbound interchange group , the <code>dupAction</code> is respected."
          },
          "documentAgreements" : {
            "type" : "string",
            "description" : "List with all document agreements for current agreement"
          }
        }
      } ],
      "description" : ""
    },
    "json_MetadataProfileOutputBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : "The ID of the metadata profile output bean. Read-only field."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the metadata profile output."
        },
        "useOutboundAgreement" : {
          "type" : "boolean",
          "description" : "Set this to <b>true</b> to deliver using defined outbound agreement(s)."
        },
        "outboundAgreements" : {
          "type" : "array",
          "description" : "The outbound agreement configuration to use for output delivery.",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_MetadataOutboundAgreementBean"
            }
          }
        }
      },
      "title" : "MetadataProfileOutputBean",
      "description" : ""
    },
    "xml_ns0_routingIdBean" : {
      "title" : "routingIdBean",
      "allOf" : [ {
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique ID <code>String</code> for routing ID"
          },
          "routingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The value of the Routing ID. A routing ID can be in any format or length (up to 255 characters),\r\nincluding standard EDI or custom formats that include special characters or spaces."
          },
          "type" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of this Routing ID.\r\n<ul>\r\n<li>For ebXML traders only, enter an ebXML party ID type only if the routing ID you enter is not a URI.\r\n</li>\r\n<li>For cXML traders only, enter the matching cXML credential domain type</li>\r\n</ul>"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_CharacterSet" : {
      "type" : "string",
      "title" : "CharacterSet",
      "description" : "",
      "enum" : [ "ASCII", "ISO8859_1", "ISO8859_2", "ISO8859_3", "ISO8859_4", "ISO8859_5", "ISO8859_6", "ISO8859_7", "ISO8859_8", "ISO8859_9", "ISO8859_15", "ISOIR14", "ISOIR87", "ISOIR159" ]
    },
    "xml_ns0_mapEntry" : {
      "title" : "mapEntry",
      "allOf" : [ {
        "properties" : {
          "key" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_mapType"
          },
          "value" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_mapType"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_MetadataProfileConditionBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : "The ID of this metadata profile condition."
        },
        "metadata" : {
          "type" : "string",
          "description" : "The metadata rule that applies to the metadata profile."
        },
        "condition" : {
          "description" : "The condition defined for the metadata rule.",
          "$ref" : "#/definitions/json_MetadataCondition"
        },
        "value" : {
          "type" : "string",
          "description" : "The value defined for the metadata rule."
        }
      },
      "title" : "MetadataProfileConditionBean",
      "description" : ""
    },
    "json_SftpCollisionMode" : {
      "type" : "string",
      "title" : "SftpCollisionMode",
      "description" : "",
      "enum" : [ "USE_USE_NONE", "USE_TEMP_FILES_WITH_INBOX", "USE_TEMP_FILE_EXTENSION" ]
    },
    "json_OftpV1SharedProducerExchangePointBean" : {
      "title" : "OftpV1SharedProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_OftpSharedProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_tradacomDocumentAgreementBean" : {
      "title" : "tradacomDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_sftpConsumerExchangePointBean" : {
      "title" : "sftpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "applyNegativeFiltering" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive; only files matching the pattern are consumed. If set to true it is exclusive;\r\nfiles matching the pattern are ignored, but all other files are consumed."
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "List with cipher suites."
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this if you want the server to delete files after they have been downloaded from it. This option should be\r\nenabled in most cases. If an external server automatically deletes files that have been downloaded, deselect this\r\noption."
          },
          "enableFiltering" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names"
          },
          "encodedHostPublicKey" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "SSH/SFTP server's public key.\r\nIf <i><retrieve></i> keyword is used, the key is automatically retrieved."
          },
          "fileCollisionMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use this option to prevent the trading engine from attempting to\r\nretrieve partially written files. There may be some specialized servers, typically\r\nrunning on mainframes, that support only part of the FTP protocol (RFC 959).\r\nIn such cases you may have to clear this check box and take steps of your own to make\r\nsure collisions do not occur. If connecting to a partner's B2Bi or Interchange embedded FTP\r\nserver, use <b>None</b>. This property will be ignored if the filename handling is in append mode.</p>\r\nOptions available:</p>\r\n<ul>\r\n<li><b>None</b> Use this option if the partner's server is B2Bi or Interchange embedded server. </li>\r\n<li><b>Use temp files with inbox</b><p>Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:\r\nc:\\data\\pickup\\inbox.\r\nBut you can use the following because a period is the first character of the inbox directory name:\r\nc:\\data\\pickup\\.inbox</p>When this flag is used, the additional property <b>inboxPath</b> should be set.</li>\r\n<li><b>Use temp file extension</b></p>If you prefer not to use an inbox, select this option.\r\nWhile a file is being written to the pickup directory, a temporary extension is added\r\nso the system knows not to retrieve it because the file is only partially written.\r\nOnce fully written, the temporary extension goes away and the file can be retrieved.\r\n</p>When this flag is used, the additional property <b>tempFileExtension</b> should be set.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_sftpCollisionMode"
          },
          "filterPattern" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Insert the format of the file names you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names,\r\nextensions, or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file-name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>"
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the SSH/SFTP server."
          },
          "hostBasedAuthentication" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Whether or not server requires the SFTP client to use host-based authentication.\r\nBy using this mechanism passwords no longer have to be transferred to the untrusted systems.</p>\r\n<b>Note: </b> per-user SSH public keys can achieve similar effects; but maintaining\r\nper-user keys could be an unwanted administrative overhead"
          },
          "inboxPath" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:</br>\r\n&emsp;c:\\data\\pickup\\inbox<br>\r\nBut you can use the following because a period is the first character of the inbox directory name:</br>\r\n&emsp;c:\\data\\pickup\\.inbox"
          },
          "keyUserName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This user name applies to both public/private key pair and host-based authentication."
          },
          "maxBlockSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The maximum size of the packets that can be downloaded from an external SFTP server by the SFTP client within the trading engine.\r\nThe client downloads messages in a series of data packets. By default the maximum size is 32768  data packet units.\r\nThe default value is compatible with most SFTP servers. However, when handling messages of a certain size (2-3 megabytes or larger),\r\nsome servers cannot process many packets of the default size and downloading hangs. If this occurs, reduce the packet size maximum."
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This value specifies the maximum number of messages to be consumed over a single connection before the connection is\r\nclosed and reopened on another processing node. As such, this setting effectively controls load balancing.\r\nThe default setting of 1 achieves optimal load balancing at the cost of greater overhead per message.\r\nDepending on your message volume and the load on each node, this value could be increased to avoid the overhead associated\r\nwith reconnecting to the transport server, at the cost of a less well-balanced cluster.\r\n<p></p>This setting only applies to transports where a list of file names is not available. These include POP, JMS and (for Interchange stand-alone) the Synchrony\r\nIntegrator exchange point, which is based on JMS. Exchange points such as these are limited to one connection at a time to prevent concurrency problems.\r\n<p></p>This field is not applicable in a single node environment."
          },
          "metadataHierarchy" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set message attributes that correspond to the names of subdirectories.\r\nEach item in the selected attributes list represents another subdirectory level.\r\nFor example, add \"From routing ID\" and \"To routing ID\" to the selected attributes\r\nlist in that order. A message with attributes \"From routing ID\" set to \"ABC\"\r\nand \"To routing ID\" set to \"DEF\" would be delivered to the subdirectory ABC/DEF."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If true, a list of cipher suites should be provided."
          },
          "passwordAuthentication" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Whether or not server requires the SFTP client to authenticate using a password"
          },
          "pickupDirectory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The path of the directory on your server where messages are picked up.\r\nWhen the trading engine polls the server for files, it only looks in the pickup directory, not an inbox directory."
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port on which the server listens for incoming connections.\r\nThe default port for the SFTP server is 22 (embedded SFTP default for trading is 4022; for application 5022)."
          },
          "privateKeyCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The user name, password and the private key used to connect to server.\r\nThis applies to both public/private key pair and host-based authentication",
            "$ref" : "#/definitions/xml_ns0_privateKeyCredentialsBean"
          },
          "publicKeyAuthentication" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Whether or not server requires the SFTP client to use public key authentication.\r\n\r\n</p><p>If this exchange is for a community, add the private key to the community.\r\nIf this exchange is for a partner, add the public key to any community that will be trading with the partner.</p>"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection.\r\nThe default is 30 seconds."
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds that the trading engine waits for missing messages of a sequence before taking the appropriate action.\r\nThis feature avoids the blocking of processing when a sequenced message is not available. Default value is of\r\n60 seconds."
          },
          "sequenced" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether all messages that are consumed by this pickup should be delivered in their original\r\nconsumption order.\r\n<p/>\r\nIn B2Bi message-handling, sequential delivery is the ability to deliver messages in the order they\r\nwere originally consumed on a specific pickup. This is sometimes referred to as first-in-first-out\r\n(FIFO) behavior.\r\n<p/>\r\nSequential message delivery is implemented only for trading engine pickups, not for integration\r\nengine pickups"
          },
          "tempFileExtension" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you prefer to not use an inbox, select this option. When a file is being written to the\r\npickup directory, a temporary extension is added so that the system knows not\r\nto retrieve it because the file is only partially written. Once fully written, the\r\ntemporary extension goes away and the file can be retrieved."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The user name and its password to connect to the server.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_userPasswordChangeBean" : {
      "title" : "userPasswordChangeBean",
      "allOf" : [ {
        "properties" : {
          "newPassword" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "oldPassword" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_OftpV1ServerExchangePointBean" : {
      "title" : "OftpV1ServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_OftpServerExchangePointBean"
      }, {
        "properties" : {
          "useRFC2204" : {
            "type" : "boolean",
            "description" : "For OFTP V1 only when protocol version is 1.3, this check box tells the trading engine the protocol release level\r\n(SSIDLEV) to use for the trading partner. If this option is <code>true</code>, the partner uses the RFC 2204\r\nimplementation. This means the SSIDLEV field in the start session (SSID) command has a value of 1. Set this\r\noption to <code>false</code> if the partner uses the RFC 5024 implementation. This means the SSIDLEV field in the\r\nSSID command has a value of 2. Note that in either case the exchange point is being defined for OFTP protocol\r\nrevision level 1.3."
          }
        }
      } ],
      "description" : ""
    },
    "json_IdocOutboundAgreementBean" : {
      "title" : "IdocOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_IdocAgreementBean"
      }, { } ],
      "description" : ""
    },
    "json_PersistenceMode" : {
      "type" : "string",
      "title" : "PersistenceMode",
      "description" : "",
      "enum" : [ "NON_PERSISTED", "PERSISTED", "AS_DEFINED_BY_QUEUE" ]
    },
    "json_VdaInboundAgreementBean" : {
      "title" : "VdaInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_VdaAgreementBean"
      }, {
        "properties" : {
          "oldTransactionNumberValid" : {
            "type" : "boolean",
            "description" : "Set to true to validate the latest document number (field 05 in the VDA header). Validation means that\r\nB2Bi will validate the number which is referenced in the incoming transmission against what B2Bi has\r\nstored internally as the last processed transmission for this partner (customer / supplier)\r\ncombination."
          },
          "documentAgreements" : {
            "type" : "string",
            "description" : "List with all document agreements for current agreement"
          },
          "useSenderIdentification" : {
            "type" : "boolean",
            "description" : "Specifies if \"Partner Code\" identification defined in the sender�s VDA Messaging ID will be used for\r\ndetection / matching. The field cannot be modified."
          },
          "useReceiverIdentification" : {
            "type" : "boolean",
            "description" : "Specifies if \"Partner Code\" identification defined in the receiver�s VDA Messaging ID will be used for\r\ndetection / matching. The field cannot be modified."
          },
          "useSenderVdaRole" : {
            "type" : "boolean",
            "description" : "Specifies if the sender VDA role will be used for detection / matching. The field cannot be modified."
          },
          "useReceiverVdaRole" : {
            "type" : "boolean",
            "description" : "Specifies if the receiver VDA role will be used for detection / matching. The field cannot be modified."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_tradacomsAgreementBean" : {
      "title" : "tradacomsAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_agreementBean"
      }, {
        "properties" : {
          "applicationReference" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Identifies whether the transmission contains data for an import application,\r\nan export application, an accounting application. The application reference also\r\ncan be used to indicate the status of a transmission (live or test)."
          },
          "priorityCode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The transmission priority code. Values are A, B and C.\r\nThis can be used for internal handling purposes, but otherwise is used rarely.",
            "$ref" : "#/definitions/xml_ns0_priorityCode"
          },
          "receiverTransmissionCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "An EAN location number (GLN) identifying the transmission receiver (UNTO code).\r\nThe interchange parties can agree upon the code.\r\nThe value must be 14 or fewer alphanumeric characters."
          },
          "receiverTransmissionName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Identifies in plain language the transmission receiver (UNTO name).\r\nThe interchange parties can agree upon the name.\r\nThis value must be 35 or fewer alphanumeric characters."
          },
          "senderTransmissionCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "An EAN location number (GLN) identifying the transmission sender (FROM code).\r\nThe interchange parties can agree upon the code.\r\nThe value must be 14 or fewer alphanumeric characters."
          },
          "senderTransmissionName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Identifies in plain language the transmission sender (FROM name).\r\nThe interchange parties can agree upon the name.\r\nThis value must be 35 or fewer alphanumeric characters."
          },
          "syntaxRuleId" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The syntax rule identifier (STDS). Value can be ANA or ANAA (if reconciliation facility is used).",
            "$ref" : "#/definitions/xml_ns0_syntaxRule"
          },
          "syntaxRuleVersion" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The syntax rule version. Value is 1."
          }
        }
      } ],
      "description" : ""
    },
    "json_OftpV2SharedProducerExchangePointBean" : {
      "title" : "OftpV2SharedProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_OftpSharedProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_x12AgreementBean" : {
      "title" : "x12AgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_agreementBean"
      }, {
        "properties" : {
          "applicationReceiverId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A code identifying the receiver (GS03) of the message. The trading partners agree upon the codes to use. This is a functional group parameter."
          },
          "applicationSenderId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A code identifying the sender (GS02) of the message. The trading partners agree upon the codes to use. This is a functional group parameter."
          },
          "interchangeReceiverId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe information code published by the receiver of the data (ISA08). This is an interchange envelope parameter.\r\nThis is an interchange envelope parameter.\r\n</p>"
          },
          "interchangeReceiverIdQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe qualifier for designating the system or method of information code structure to designate the receiver ID element being qualified (ISA07).\r\nThis is an interchange envelope parameter.\r\n</p>"
          },
          "interchangeSenderId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe information code published by the sender for other parties to use as the receiver ID to route data to them (ISA06).\r\nWhen you are sending, the sender uses this as its sending ID. Other parties sending to you use this as a receiving ID route data to them.\r\nThis is an interchange envelope parameter.\r\n</p>"
          },
          "interchangeSenderIdQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe qualifier for designating the system or method of information code structure used to designate the sender ID element being qualified (ISA05).\r\nThis is an interchange envelope parameter.\r\n</p>"
          },
          "processingMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "<p>\r\nProcessing mode to use for X12 message handling:\r\n</p>\r\n<ul>\r\n<li>ISA_AND_GS (default) <p> Select this option to enable the handling of complete X12 messages\r\n(including ISA headers).</p>\r\n</li>\r\n<li>GS_ONLY (X12 only) <p> Select this option to enable the handling of X12 messages without ISA headers.</p>\r\n</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_x12ProcessingMode"
          },
          "x12TestIndicator" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "A code (T, I or P) indicating whether data in the interchange envelope is for testing or production\r\n(ISA15). This is an interchange envelope parameter.",
            "$ref" : "#/definitions/xml_ns0_x12TestIndicator"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_httpResponseB2biConsumerExchangePointBean" : {
      "title" : "httpResponseB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_PesitServerExchangePointBean" : {
      "title" : "PesitServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The local port used by the embedded PeSIT server to listen for incoming connections. The default value is 1761."
          },
          "callerIdentification" : {
            "description" : "(For Trading Pickup only) Holds the default identity exposed by the server to the partners. You can override or restrict the the\r\ncaller's protocol identity (P14) and password requirements.",
            "$ref" : "#/definitions/json_PesitIdentificationBean"
          },
          "serverIdentification" : {
            "description" : "For Trading Pickups, holds the partner password requirements (P15) to connect to this embedded server.\r\n<p>\r\nFor Application Pickups, holds the back-end client password requirements (P15) to connect to this embedded server.\r\n</p>",
            "$ref" : "#/definitions/json_PesitIdentificationBean"
          },
          "enableAcks" : {
            "type" : "boolean",
            "description" : "Send acknowledgments for messages received by this exchange - If you select this option, the server\r\nsends an acknowledgment to the partner when it receives a file successfully. This occurs when the\r\ncorresponding message is correctly unpackaged. This is a protocol level acknowledgment, which\r\nindicates only that the trading engine has correctly received the file."
          },
          "senderServerAckPairs" : {
            "description" : "(For application pickup only)\r\n<p>\r\nFor each application that expects an acknowledgment:\r\n</p>\r\n<ul>\r\n<li>In the <b>Inbound sender</b> field, enter the caller identity (PI3) used by the application to\r\nconnect. If you do not enter a caller identity, no acknowledgements are sent on this exchange.</li>\r\n<li>In the <b>Inbound sender</b> field, to select the community that sends the acknowledgment, and then\r\nselect the connection string that corresponds to the back-end server which should receive the\r\nacknowledgment. This is how you select the delivery exchange that is used to send the acknowledgement.</li>\r\n</ul>\r\n\r\nAn acknowledgment is sent to the Sender/Server pair, when the reception is completed and the\r\ncorresponding incoming message is successfully unpackaged. This means that it is a protocol\r\nacknowledgment (the trading engine received the file). A receipt message is generated and sent through\r\nthe selected integration delivery exchange.",
            "$ref" : "#/definitions/json_MapType"
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          }
        }
      } ],
      "description" : ""
    },
    "json_XmlDocumentAgreementBean" : {
      "title" : "XmlDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_characterSet" : {
      "type" : "string",
      "title" : "characterSet",
      "description" : "",
      "enum" : [ "ASCII", "ISO8859_1", "ISO8859_2", "ISO8859_3", "ISO8859_4", "ISO8859_5", "ISO8859_6", "ISO8859_7", "ISO8859_8", "ISO8859_9", "ISO8859_15", "ISOIR14", "ISOIR87", "ISOIR159" ]
    },
    "json_SftpServerProducerExchangePointBean" : {
      "title" : "SftpServerProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerProducerExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The local port used by the embedded SFTP server to listen for incoming connections. The default values are 4022\r\nfor a trading server and 5022 for an application server."
          },
          "subDirectories" : {
            "type" : "string",
            "description" : "Subdirectories associated to the SFTP exchange point. A specific combination of user\r\nand directory can be associated with only one exchange."
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "description" : "Specify whether the embedded server should delete files after they have been downloaded from it."
          },
          "modifySftpServerDirectory" : {
            "type" : "boolean",
            "description" : "Specify whether subdirectory management is enabled on the client side. When this option is set to\r\n<code>true</code>, SFTP clients are allowed to add or remove subdirectories."
          },
          "preserveFilename" : {
            "type" : "boolean",
            "description" : "Specify whether the original file names should be preserved when the trading engine delivers messages.\r\nPreserving original file names enables your back-end application to process binary messages based on their\r\nfile names."
          },
          "overwriteIfDuplicate" : {
            "type" : "boolean",
            "description" : "Specify whether when the trading engine detects a duplicate file name, it should overwrite the existing file,\r\nreplacing it with the duplicate file."
          },
          "defaultUser" : {
            "description" : "Default account for the SFTP server.",
            "$ref" : "#/definitions/json_SshUserBean"
          }
        }
      } ],
      "description" : ""
    },
    "json_NachaOutboundAgreementBean" : {
      "title" : "NachaOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_NachaAgreementBean"
      }, {
        "properties" : {
          "fileIdModifier" : {
            "type" : "string",
            "description" : "The interchange file-id-modifier."
          },
          "referenceCode" : {
            "type" : "string",
            "description" : "The interchange reference-code."
          },
          "useTriggerMessage" : {
            "type" : "boolean",
            "description" : "The use-trigger-message checkbox value."
          },
          "acceptGroups" : {
            "type" : "boolean",
            "description" : "Specify whether group segments are accepted."
          },
          "groupTimeout" : {
            "type" : "string",
            "description" : "The time limit in hours and minutes before groups time out (when group segments are accepted).\r\nThe 24-hour format is <code>HH:MM</code>."
          },
          "groupTimeoutAction" : {
            "description" : "The action to perform if group messages are missing (when group segments are accepted).\r\nThe available options are:\r\n<ul>\r\n<li>SEND_AND_WARN</li>\r\n<li>SEND</li>\r\n<li>STOP</li>\r\n</ul>",
            "$ref" : "#/definitions/json_GroupTimeoutActionType_nacha"
          },
          "maxNumbDocs" : {
            "type" : "number",
            "description" : "The largest number of entries the envelope can contain."
          },
          "envelopeTimeout" : {
            "type" : "string",
            "description" : "The envelope timeout in hours and minutes. The 24-hour format is <code>HH:MM</code>."
          },
          "scheduleTimeToEnvelope" : {
            "type" : "string",
            "description" : "The envelope time schedule."
          },
          "priorityCode" : {
            "type" : "string",
            "description" : "The priority code."
          },
          "formatCode" : {
            "type" : "string",
            "description" : "The format code."
          },
          "companyName" : {
            "type" : "string",
            "description" : "The company name."
          },
          "stdEntryClassCode" : {
            "description" : "The standard entry class code.",
            "$ref" : "#/definitions/json_StdEntryClassCode"
          },
          "companyEntryDescription" : {
            "type" : "string",
            "description" : "The company entry description."
          },
          "originatingDFIId" : {
            "type" : "string",
            "description" : "The originating DFT ID."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_vdaRole" : {
      "type" : "string",
      "title" : "vdaRole",
      "description" : "",
      "enum" : [ "Customer", "Supplier" ]
    },
    "json_MapEntry" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "description" : "",
          "$ref" : "#/definitions/json_MapType"
        },
        "value" : {
          "description" : "",
          "$ref" : "#/definitions/json_MapType"
        }
      },
      "title" : "MapEntry",
      "description" : ""
    },
    "json_MllpServerExchangePointBean" : {
      "title" : "MllpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The local port used by the embedded MLLP server to listen for incoming connections."
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "pollingIntervalSeconds" : {
            "type" : "number",
            "description" : "Returns the interval in seconds the trading engine waits before polling for messages to retrieve."
          },
          "maxMessagesPerPollingInterval" : {
            "type" : "number",
            "description" : "Returns the highest number of messages the system can retrieve each time it polls."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_testIndicator" : {
      "type" : "string",
      "title" : "testIndicator",
      "description" : "",
      "enum" : [ "YES", "NO" ]
    },
    "xml_ns0_managedPGPSignatureBean" : {
      "title" : "managedPGPSignatureBean",
      "allOf" : [ {
        "properties" : {
          "keyId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The keyId is string identifier for the Public Key."
          },
          "level" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A signer indicates a level of trust ranging from low to high.\r\nFor example, a self-signed certificate is by default signed\r\nby the community that generated the certificate within B2Bi.\r\nThe community gives the certificate a positive level, which\r\nis a high level of trust."
          },
          "userName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The username refers to Community name and email"
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_serverProducerExchangePointBean" : {
      "title" : "serverProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "serverSettingsId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Embedded server settings id of the embedded exchange point."
          }
        }
      } ],
      "description" : ""
    },
    "json_AS4HttpServerExchangePointBean" : {
      "title" : "AS4HttpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_HttpServerExchangePointBean"
      }, {
        "properties" : {
          "shouldParseMetadataFromHeader" : {
            "type" : "boolean",
            "description" : "Parse SOAP headers into message metadata - Select this option if you want to SOAP headers to be carried as\r\nmetadata attributes with the message."
          },
          "xpaths" : {
            "type" : "array",
            "description" : "If shouldParseMetadataFromHeader is selected, enter the XPath expressions to resolve the header.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "shouldIntegrateBody" : {
            "type" : "boolean",
            "description" : "Process SOAP Body - Select this option to process the contents of the SOAP body."
          },
          "shouldIntegrateAttachments" : {
            "type" : "boolean",
            "description" : "Process Attachments - Select this option to process the attachments of the SOAP message."
          },
          "groupAttachments" : {
            "type" : "boolean",
            "description" : "Group Attachments - Select this option to enable the consumed message to be split into parent and dependent\r\nchild messages."
          },
          "as4Users" : {
            "type" : "string",
            "description" : ""
          },
          "generateReceipt" : {
            "type" : "boolean",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "json_FtpProducerExchangePointBean" : {
      "title" : "FtpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The name of the FTP server."
          },
          "port" : {
            "type" : "number",
            "description" : "The port on which the server listens for incoming connections. The default is 21 (embedded FTP default is 4021)."
          },
          "pickupDirectory" : {
            "type" : "string",
            "description" : "Path of the directory on your server where messages are\r\npicked up. When the trading engine polls the server for files, it only looks in the pickup\r\ndirectory, not in an inbox directory. If connecting to a partner's B2Bi embedded FTP server,\r\nuse a mailbox if picking up. Leave the field blank if delivering."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "The maximum time in seconds the component waits for a reply from the server before disconnecting."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Select this option to keep open the server connection for additional FTP requests."
          },
          "passive" : {
            "type" : "boolean",
            "description" : "Set this option to <b>true</b> to transmit file using passive mode.\r\nClear this option to use active mode."
          },
          "transferType" : {
            "description" : "Format of the files that are transmitted over this delivery exchange:\r\n<ul>\r\n<li><b>Binary</b> (default)</li>\r\n<li><b>Ascii</b> automatic line ending</li>\r\n<li><b>Ascii</b> user CR/LF</li>\r\n<li><b>Ascii</b> use LF only</li>\r\n</ul>",
            "$ref" : "#/definitions/json_FtpType"
          },
          "commandSetConfigPath" : {
            "type" : "string",
            "description" : "The script that specifies commands sent to the host is the XML command set document,\r\nnamed ftpcommandset.xml. Default location is in <b>[install directory]\\conf.</b> It contains a set of metacommands,\r\neach consisting of one or more FTP commands to be sent to an FTP server."
          },
          "attemptRestarts" : {
            "type" : "boolean",
            "description" : "Indicates whether the system resumes transferring large files at the interruption point,\r\nwhen a connection is lost before a transfer is completed.\r\nIf selected, the system resumes the processing of files that are at least as large as\r\nspecified in the restartable minimum bytes field. This checkpoint-restart\r\nfeature is worthwhile only for large documents. If this option is not used,\r\nthe system starts a file transfer over when processing is interrupted."
          },
          "restartableMinKiloBytes" : {
            "type" : "number",
            "description" : "If attempt restarts is selected, the minimum size of a file that triggers the\r\nsystem to continue the file transfer at the point interrupted before the\r\nconnection was lost. The minimum size is in megabytes. The system only resumes\r\ntransfers of files that meet this minimum. The system restarts the transfer\r\nof smaller files whose processing is interrupted."
          },
          "tempFileHoursToLive" : {
            "type" : "number",
            "description" : "If attempt restarts is selected, how long the system retains a file whose transfer\r\nhas been interrupted while waiting for the connection to be restored.\r\nThis temporary file enables the system to resume the transfer at the point interrupted."
          },
          "deliveryFilenameMode" : {
            "description" : "This property is used when the trading engine delivers messages.</p>\r\nFtp Delivery Filename Options: <ul><li><b>Preserve original</b></p>Select this option if you\r\nwant original file names to be preserved when the trading engine delivers messages.</li>\r\n<li><b>Auto generate</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>\r\n<li><b>Custom generate</b></p>When this option is used, the additional property\r\n<b>userDefinedDeliveryFilename</b> must be set.</li></ul>",
            "$ref" : "#/definitions/json_FtpDeliveryFilenameMode"
          },
          "duplicateFileNameMode" : {
            "description" : "We recommend using this option to prevent the trading engine\r\nfrom attempting to retrieve partially written files.There may be some\r\nspecialized servers, typically running on mainframes, that support\r\nonly part of the FTP protocol (RFC 959). In such cases you may have to\r\ntake steps of your own to make sure collisions do not occur.\r\nFtp Duplicate File Name Options: <ul><li><b>Overwrite</b></p>\r\nIf duplicate file names are detected, the trading engine overwrites the existing file.</li>\r\n<li><b>Auto generate</b></p>Automatically generate unique filenames.</li>\r\n<li><b>Append</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>\r\n<li><b>Custom generate</b></p>When this flag is used, the additional property\r\n<b>userDefinedDuplicateFilename</b> must be set.</li></ul>",
            "$ref" : "#/definitions/json_FtpDuplicateFileNameMode"
          },
          "userCommands" : {
            "type" : "array",
            "description" : "Enter user commands such as SITE to be sent to the server after login.\r\nCommands must be entered in the exact case and format expected by the server.\r\nFor example, most FTP clients allow <i>mkdir test</i>, but most servers only\r\naccept <i>MKD test</i>. </p>Consult <b>RFC 959</b> for a list of standard FTP commands.\r\nYou can use FTP commands that do not make use of the FTP data connection.\r\nCommands that make use of the FTP data connection are not supported.\r\nIn addition, specific servers may support other commands.\r\nRefer to the server documentation for more information.\r\n</p>If any command fails, the remaining commands are not executed, and production\r\nto the FTP server fails. To avoid possible failures, preface any command\r\nwith an (at) sign (@) to indicate that errors from that command should be ignored,\r\nfor example, <i>@MKD test</i>. Preface any command with an asterisk to cause the\r\nentire line to be treated as a comment, for example, <i>*Create test directory</i>.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "fixOutputFilenames" : {
            "type" : "boolean",
            "description" : "Return true if output filenames are to be processed through the FilenameBeautifier to make sure they\r\ndon't contain any characters that would offend certain FTP servers.  This includes always prefixing\r\nfilenames that begin with a number with the letter \"a\"."
          },
          "fileCollisionMode" : {
            "description" : "It is recommended to use this option to prevent the trading engine from attempting to\r\nretrieve partially written files. There may be some specialized servers, typically\r\nrunning on mainframes, that support only part of the FTP protocol (RFC 959).\r\nIn such cases you may have to clear this option and take steps of your own to make\r\nsure collisions do not occur. If connecting to a partner's Interchange embedded FTP\r\nserver, use <b>None</b>. This property will be ignored if the filename handling is in append mode.</p>\r\nOptions available:</p>\r\n<ul>\r\n<li><b>None</b></>Use this option if the partner's server is an Interchange embedded server. </li>\r\n<li><b>Use temp files with inbox</b><p>Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:</br>\r\n&nbsp;&nbsp;c:\\data\\pickup\\inbox</br>\r\nBut you can use the following because a period is the first character of the inbox directory name:</br>\r\n&nbsp;&nbsp;c:\\data\\pickup\\.inbox</p>When this flag is used, the additional property <b>inboxPath</b> should be set.</li>\r\n<li><b>Use temp file extension</b></p>If you prefer not to use an inbox, select this option.\r\nWhile a file is being written to the pickup directory, a temporary extension is added\r\nso the system knows not to retrieve it because the file is only partially written.\r\nOnce fully written, the temporary extension goes away and the file can be retrieved.\r\n</p>When this flag is used, the additional property <b>tempFileExtension</b> should be set.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_FtpCollisionMode"
          },
          "usernamePasswordCredentials" : {
            "description" : "The user name and its password to connect to the server.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "inboxPath" : {
            "type" : "string",
            "description" : "Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:</br>\r\n&emsp;c:\\data\\pickup\\inbox<br>\r\nBut you can use the following because a period is the first character of the inbox directory name:</br>\r\n&emsp;c:\\data\\pickup\\.inbox"
          },
          "tempFileExtension" : {
            "type" : "string",
            "description" : "If you prefer to not use an inbox, select this option. When a file is being written to the\r\npickup directory, a temporary extension is added so that the system knows not\r\nto retrieve it because the file is only partially written. Once fully written, the\r\ntemporary extension goes away and the file can be retrieved."
          },
          "metadataHierarchy" : {
            "type" : "array",
            "description" : "Set message attributes that correspond to the names of subdirectories.\r\nEach item in the selected attributes list represents another subdirectory level.\r\nFor example, if you add \"From routing ID\" and \"To routing ID\" to the selected\r\nattributes list in that order, a message with attributes \"From routing ID\"\r\nset to \"ABC\" and \"To routing ID\" set to \"DEF\" is delivered to the subdirectory ABC/DEF.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "activePorts" : {
            "type" : "string",
            "description" : "Used when the server is in active mode (<b>passive</b> property set to <b>true</b>).\r\n</br><b>, ; -</b> is the list of separators for port numbers. Ex: 5555,5556-5565"
          },
          "userDefinedDeliveryFilename" : {
            "type" : "string",
            "description" : "Use items such as %metadata%, $filename$, $extension$, $timestamp$, and $sequence$."
          },
          "userDefinedDuplicateFilename" : {
            "type" : "string",
            "description" : "Use items such as $filename$, $extension$, $timestamp$, $sequence$ and $filesequence$ one time."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "List with cipher suites.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Regular or secured FTP channel with authentication"
          },
          "implicitSsl" : {
            "type" : "boolean",
            "description" : "Implicit security is a mechanism by which security is automatically turned on as soon\r\nas the FTP client makes a connection to an FTP server. In this case, the FTP server\r\ndefines a specific port for the client (990) to be used for secure connections.\r\n<b>FTP over SSL Implicit has been deprecated and should no longer be used.</b>"
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "description" : "SSL authentication.  If we're acting as the client, true means we should verify that the\r\nhostname for the certificate given to us by the server matches the host we connected to.\r\nIf we're acting as the server, true means we require the client to present its\r\ncertificate (\"client authentication\")."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "If <b>true</b>, a list of cipher suites should be provided."
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "description" : "Select this if you want the server to delete files after they have been downloaded from it. This option should be\r\nenabled in most cases. If an external server automatically deletes files that have been downloaded, deselect this\r\noption.\r\n<br><b>Note:</b> This field is used only in integration."
          },
          "enableFiltering" : {
            "type" : "boolean",
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "filterPattern" : {
            "type" : "string",
            "description" : "Insert the format of the file names you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names or\r\nextensions or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>\r\n<br><b>Note:</b> This field is used only in integration."
          },
          "applyNegativeFiltering" : {
            "type" : "boolean",
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive, only files matching the pattern are consumed. If set to true it is exclusive,\r\nfiles matching the pattern are ignored, but all other files are consumed.\r\n<br><b>Note:</b> This field is used only in integration."
          }
        }
      } ],
      "description" : ""
    },
    "json_CompareOperator" : {
      "type" : "string",
      "title" : "CompareOperator",
      "description" : "",
      "enum" : [ "EQUALS", "NOT_EQUALS", "LESS_THAN", "LESS_THAN_EQUALS", "GREATER_THAN", "STARTS_WITH", "ENDS_WITH", "CONTAINS", "GREATER_THAN_EQUALS" ]
    },
    "json_TradacomsOutboundAgreementBean" : {
      "title" : "TradacomsOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_TradacomsAgreementBean"
      }, {
        "properties" : {
          "senderTransmissionReferenceGenerator" : {
            "type" : "string",
            "description" : "Generator for reference number. Default value is $TransRef:9$."
          },
          "recipientTransmissionReference" : {
            "type" : "string",
            "description" : "The reference for the transmission to the sender, if known."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_mapType" : {
      "title" : "mapType",
      "allOf" : [ { } ],
      "description" : ""
    },
    "json_VdaOutboundAgreementBean" : {
      "title" : "VdaOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_VdaAgreementBean"
      }, {
        "properties" : {
          "sequenceNumberGenerator" : {
            "type" : "string",
            "description" : "Generator for previous document number. The default value is \"$TransNumber:5$\"."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_xmlDocumentAgreementBean" : {
      "title" : "xmlDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "json_SmtpServerExchangePointBean" : {
      "title" : "SmtpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The local port used by the embedded SMTP server to listen for incoming connections.\r\nThe default value is 4026."
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "description" : "Value of sequence timeout in seconds. <p/>"
          },
          "sequenced" : {
            "type" : "boolean",
            "description" : "Set this option to true if you want all messages that are consumed by this pickup to be delivered in their\r\noriginal consumption order. <p/>"
          },
          "attachmentsOnly" : {
            "type" : "boolean",
            "description" : "Set this option to true to eliminate extraneous message fragments. This option is applicable when the\r\npartners send messages using a mail client such as Microsoft Outlook. It is available under the generic email\r\nmessage protocol, but not AS1.\r\n\r\nWhen a partner uses a mail client application to send a trading document as an attachment to an email message,\r\nthe trading engine actually receives two or more documents. These can include the MIME header, the text of the\r\nemail message and the document attachment. The trading engine tracks and processes the incidental MIME body parts\r\njust as it does any document. Although such processing does no harm, it can cause confusion.\tSetting this option\r\nto true causes the incidental MIME body parts to be ignored while preserving the important document attachments."
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "The email address that the remote partners use to send messages to the local community."
          },
          "senderIdentificationType" : {
            "description" : "Specify how the sender will be identified; must be set to 'PD_EMAIL_ADDRESSES' or\r\n'PARTNER_EMAIL_ACCOUNTS'.",
            "$ref" : "#/definitions/json_EmailAuthenticationType"
          },
          "emailUser" : {
            "type" : "string",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "json_PluggableConsumerExchangePointBean" : {
      "title" : "PluggableConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "definitionName" : {
            "type" : "string",
            "description" : "Name to be displayed in the UI wizard for selecting a transport.\r\nThis name will be displayed along with built-in transport names such as \"Ftp\", \"File system\", etc.\r\nFor consistency with existing names, use an initial capital letter, and no period at the end."
          },
          "settings" : {
            "description" : "Defines setting string to be passed to the implementation class when a pluggable transport is created",
            "$ref" : "#/definitions/json_MapType"
          }
        }
      } ],
      "description" : ""
    },
    "json_NotImplementedException" : {
      "title" : "NotImplementedException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ApiException"
      }, { } ],
      "description" : "Base class for all API exceptions.  Any class that extends this will automatically get mapped to the correct\r\nHTTP return code and the exception message will be populated in the response body."
    },
    "xml_ns0_fileSystemB2biProducerExchangePointBean" : {
      "title" : "fileSystemB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_ftpProducerExchangePointBean" : {
      "title" : "ftpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "activePorts" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Used when the server is in active mode (<b>passive</b> property set to <b>true</b>).\r\n</br><b>, ; -</b> is the list of separators for port numbers. Ex: 5555,5556-5565"
          },
          "applyNegativeFiltering" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive, only files matching the pattern are consumed. If set to true it is exclusive,\r\nfiles matching the pattern are ignored, but all other files are consumed.\r\n<br><b>Note:</b> This field is used only in integration."
          },
          "attemptRestarts" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Indicates whether the system resumes transferring large files at the interruption point,\r\nwhen a connection is lost before a transfer is completed.\r\nIf selected, the system resumes the processing of files that are at least as large as\r\nspecified in the restartable minimum bytes field. This checkpoint-restart\r\nfeature is worthwhile only for large documents. If this option is not used,\r\nthe system starts a file transfer over when processing is interrupted."
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "List with cipher suites."
          },
          "commandSetConfigPath" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The script that specifies commands sent to the host is the XML command set document,\r\nnamed ftpcommandset.xml. Default location is in <b>[install directory]\\conf.</b> It contains a set of metacommands,\r\neach consisting of one or more FTP commands to be sent to an FTP server."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The maximum time in seconds the component waits for a reply from the server before disconnecting."
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this if you want the server to delete files after they have been downloaded from it. This option should be\r\nenabled in most cases. If an external server automatically deletes files that have been downloaded, deselect this\r\noption.\r\n<br><b>Note:</b> This field is used only in integration."
          },
          "deliveryFilenameMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "This property is used when the trading engine delivers messages.</p>\r\nFtp Delivery Filename Options: <ul><li><b>Preserve original</b></p>Select this option if you\r\nwant original file names to be preserved when the trading engine delivers messages.</li>\r\n<li><b>Auto generate</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>\r\n<li><b>Custom generate</b></p>When this option is used, the additional property\r\n<b>userDefinedDeliveryFilename</b> must be set.</li></ul>",
            "$ref" : "#/definitions/xml_ns0_ftpDeliveryFilenameMode"
          },
          "duplicateFileNameMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "We recommend using this option to prevent the trading engine\r\nfrom attempting to retrieve partially written files.There may be some\r\nspecialized servers, typically running on mainframes, that support\r\nonly part of the FTP protocol (RFC 959). In such cases you may have to\r\ntake steps of your own to make sure collisions do not occur.\r\nFtp Duplicate File Name Options: <ul><li><b>Overwrite</b></p>\r\nIf duplicate file names are detected, the trading engine overwrites the existing file.</li>\r\n<li><b>Auto generate</b></p>Automatically generate unique filenames.</li>\r\n<li><b>Append</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>\r\n<li><b>Custom generate</b></p>When this flag is used, the additional property\r\n<b>userDefinedDuplicateFilename</b> must be set.</li></ul>",
            "$ref" : "#/definitions/xml_ns0_ftpDuplicateFileNameMode"
          },
          "enableFiltering" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names\r\n<br><b>Note:</b> This field is used only in integration"
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "SSL authentication.  If we're acting as the client, true means we should verify that the\r\nhostname for the certificate given to us by the server matches the host we connected to.\r\nIf we're acting as the server, true means we require the client to present its\r\ncertificate (\"client authentication\")."
          },
          "fileCollisionMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "It is recommended to use this option to prevent the trading engine from attempting to\r\nretrieve partially written files. There may be some specialized servers, typically\r\nrunning on mainframes, that support only part of the FTP protocol (RFC 959).\r\nIn such cases you may have to clear this option and take steps of your own to make\r\nsure collisions do not occur. If connecting to a partner's Interchange embedded FTP\r\nserver, use <b>None</b>. This property will be ignored if the filename handling is in append mode.</p>\r\nOptions available:</p>\r\n<ul>\r\n<li><b>None</b></>Use this option if the partner's server is an Interchange embedded server. </li>\r\n<li><b>Use temp files with inbox</b><p>Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:</br>\r\n&nbsp;&nbsp;c:\\data\\pickup\\inbox</br>\r\nBut you can use the following because a period is the first character of the inbox directory name:</br>\r\n&nbsp;&nbsp;c:\\data\\pickup\\.inbox</p>When this flag is used, the additional property <b>inboxPath</b> should be set.</li>\r\n<li><b>Use temp file extension</b></p>If you prefer not to use an inbox, select this option.\r\nWhile a file is being written to the pickup directory, a temporary extension is added\r\nso the system knows not to retrieve it because the file is only partially written.\r\nOnce fully written, the temporary extension goes away and the file can be retrieved.\r\n</p>When this flag is used, the additional property <b>tempFileExtension</b> should be set.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_ftpCollisionMode"
          },
          "filterPattern" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Insert the format of the file names you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names or\r\nextensions or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>\r\n<br><b>Note:</b> This field is used only in integration."
          },
          "fixOutputFilenames" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Return true if output filenames are to be processed through the FilenameBeautifier to make sure they\r\ndon't contain any characters that would offend certain FTP servers.  This includes always prefixing\r\nfilenames that begin with a number with the letter \"a\"."
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the FTP server."
          },
          "implicitSsl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Implicit security is a mechanism by which security is automatically turned on as soon\r\nas the FTP client makes a connection to an FTP server. In this case, the FTP server\r\ndefines a specific port for the client (990) to be used for secure connections.\r\n<b>FTP over SSL Implicit has been deprecated and should no longer be used.</b>"
          },
          "inboxPath" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Type the full path of an inbox directory\r\n(for example, c:\\data\\inbox). Files are uploaded to this directory. When fully written,\r\nfiles are moved to the pickup directory for retrieval. Do not put the inbox under\r\nthe pickup directory unless you use a period at the beginning of the inbox name.\r\nThe trading engine and other applications ignore directories and files that begin with\r\nperiods. For example, do not use the following directory structure:</br>\r\n&emsp;c:\\data\\pickup\\inbox<br>\r\nBut you can use the following because a period is the first character of the inbox directory name:</br>\r\n&emsp;c:\\data\\pickup\\.inbox"
          },
          "metadataHierarchy" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set message attributes that correspond to the names of subdirectories.\r\nEach item in the selected attributes list represents another subdirectory level.\r\nFor example, if you add \"From routing ID\" and \"To routing ID\" to the selected\r\nattributes list in that order, a message with attributes \"From routing ID\"\r\nset to \"ABC\" and \"To routing ID\" set to \"DEF\" is delivered to the subdirectory ABC/DEF."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <b>true</b>, a list of cipher suites should be provided."
          },
          "passive" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this option to <b>true</b> to transmit file using passive mode.\r\nClear this option to use active mode."
          },
          "pickupDirectory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Path of the directory on your server where messages are\r\npicked up. When the trading engine polls the server for files, it only looks in the pickup\r\ndirectory, not in an inbox directory. If connecting to a partner's B2Bi embedded FTP server,\r\nuse a mailbox if picking up. Leave the field blank if delivering."
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port on which the server listens for incoming connections. The default is 21 (embedded FTP default is 4021)."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option to keep open the server connection for additional FTP requests."
          },
          "restartableMinKiloBytes" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If attempt restarts is selected, the minimum size of a file that triggers the\r\nsystem to continue the file transfer at the point interrupted before the\r\nconnection was lost. The minimum size is in megabytes. The system only resumes\r\ntransfers of files that meet this minimum. The system restarts the transfer\r\nof smaller files whose processing is interrupted."
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Regular or secured FTP channel with authentication"
          },
          "tempFileExtension" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If you prefer to not use an inbox, select this option. When a file is being written to the\r\npickup directory, a temporary extension is added so that the system knows not\r\nto retrieve it because the file is only partially written. Once fully written, the\r\ntemporary extension goes away and the file can be retrieved."
          },
          "tempFileHoursToLive" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If attempt restarts is selected, how long the system retains a file whose transfer\r\nhas been interrupted while waiting for the connection to be restored.\r\nThis temporary file enables the system to resume the transfer at the point interrupted."
          },
          "transferType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Format of the files that are transmitted over this delivery exchange:\r\n<ul>\r\n<li><b>Binary</b> (default)</li>\r\n<li><b>Ascii</b> automatic line ending</li>\r\n<li><b>Ascii</b> user CR/LF</li>\r\n<li><b>Ascii</b> use LF only</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_ftpType"
          },
          "userCommands" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enter user commands such as SITE to be sent to the server after login.\r\nCommands must be entered in the exact case and format expected by the server.\r\nFor example, most FTP clients allow <i>mkdir test</i>, but most servers only\r\naccept <i>MKD test</i>. </p>Consult <b>RFC 959</b> for a list of standard FTP commands.\r\nYou can use FTP commands that do not make use of the FTP data connection.\r\nCommands that make use of the FTP data connection are not supported.\r\nIn addition, specific servers may support other commands.\r\nRefer to the server documentation for more information.\r\n</p>If any command fails, the remaining commands are not executed, and production\r\nto the FTP server fails. To avoid possible failures, preface any command\r\nwith an (at) sign (@) to indicate that errors from that command should be ignored,\r\nfor example, <i>@MKD test</i>. Preface any command with an asterisk to cause the\r\nentire line to be treated as a comment, for example, <i>*Create test directory</i>."
          },
          "userDefinedDeliveryFilename" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use items such as %metadata%, $filename$, $extension$, $timestamp$, and $sequence$."
          },
          "userDefinedDuplicateFilename" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use items such as $filename$, $extension$, $timestamp$, $sequence$ and $filesequence$ one time."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The user name and its password to connect to the server.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "json_DocumentAgreementOutputType" : {
      "type" : "string",
      "title" : "DocumentAgreementOutputType",
      "description" : "",
      "enum" : [ "USE_INBOUND_RECEIVER", "USE_ALTERNATE_DELIVERY_PARTNER", "USE_OUTBOUND_AGREEMENT", "USE_NONE" ]
    },
    "json_ForbiddenException" : {
      "title" : "ForbiddenException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ApiException"
      }, { } ],
      "description" : "Exception that maps to HTTP 403 return code"
    },
    "xml_ns0_b2biProducerExchangePointBean" : {
      "title" : "b2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "parameters" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Define the parameter string to be passed for a specific type of B2Bi exchange point. For more information about\r\nthe specific parameters to be passed for each type of B2Bi exchange point, please see the admin guide.",
            "$ref" : "#/definitions/xml_ns0_mapType"
          },
          "type" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the B2Bi exchange point."
          }
        }
      } ],
      "description" : ""
    },
    "json_GenerateAckRuleType_hl7v2" : {
      "type" : "string",
      "title" : "GenerateAckRuleType",
      "description" : "",
      "enum" : [ "AR", "AL", "NE", "ER", "SU" ]
    },
    "xml_ns0_pesitDataEncodingType" : {
      "type" : "string",
      "title" : "pesitDataEncodingType",
      "description" : "",
      "enum" : [ "BINARY", "TEXT" ]
    },
    "json_ConjunctorType" : {
      "type" : "string",
      "title" : "ConjunctorType",
      "description" : "",
      "enum" : [ "AND", "OR" ]
    },
    "json_SshUserBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "password" : {
          "type" : "string",
          "description" : "The password for the SFTP account to connect to the server."
        },
        "userName" : {
          "type" : "string",
          "description" : "The user name to connect to the server. The name is used not only for connection, but also represents\r\nthe home directory for the SFTP account."
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Specify whether the SFTP account is enabled."
        },
        "hasCredentials" : {
          "type" : "boolean",
          "description" : "Specify where the account has associated credentials. The accounts might not have credentials if the server\r\nuses public/private key pair authentication"
        },
        "passwordPolicyName" : {
          "type" : "string",
          "description" : "The name of the password policy to assign to the user. A default password policy is in effect globally for all\r\ntransport users. You can override the default policy by adding one or more user-defined policies and assigning\r\npolicies to specific users."
        },
        "sftpSubDirectories" : {
          "type" : "array",
          "description" : "Subdirectories associated to the SFTP account. A specific combination of user\r\nand directory can be associated with only one exchange.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "sshPublicKeys" : {
          "type" : "string",
          "description" : "Returns the RSA or DSK qualified SSH key for the user.  Multiple keys may be combined in one string and will\r\nbe separated by a carriage return or carriage return + line feed.\r\n<br></br>\r\nNote: if multiple keys are present it is best to parse the keys using a BufferedReader wrapped with a\r\nStringReader which takes this data a value."
        }
      },
      "title" : "SshUserBean",
      "description" : ""
    },
    "xml_ns0_exchangePointBean" : {
      "title" : "exchangePointBean",
      "allOf" : [ {
        "properties" : {
          "backupMessages" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Indicates whether the system backs up copies of the messages it retrieves from integration or receives\r\nfrom partners."
          },
          "businessProtocol" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The business protocol associated with this exchange point.",
            "$ref" : "#/definitions/xml_ns0_businessProtocol"
          },
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns if this exchange point is enabled."
          },
          "friendlyName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The friendly name for this exchange point."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique id <code>String</code> for the exchange point."
          },
          "maxConcurrentConnections" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(For partner trading delivery only.) The number of total open connections the trading engine server can\r\nmake to a partner. If you are operating in a cluster environment, this is the total number across the\r\nentire cluster, no matter how many JVM nodes are running. For example, if the value is 100 connections\r\nand there are 150 messages to send, the trading engine opens only 100 connections to that partner. The\r\nremaining 50 messages are queued until connections become available.\r\n<p>\r\nThe default value is suitable in almost all cases. However, if a partner says your trading engine is\r\nover running his receiving system, decrease the value. (This advice does not apply to OFTP X.25 or X.25\r\nover ISDN, as the default maximum value is 1 for those transports.)If sending messages to Transfer CFT\r\nvia PeSIT (PeSIT), the value in this field must be less than the CFTTCP setting in Transfer CFT.\r\n</p>"
          },
          "partyId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Return the party id that owns the exchange point. Can be null if this is an application pickup, or if this\r\nexchange point has not yet been associated with a business protocol."
          },
          "requiresBusinessProtocol" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Return if an exchange point must be associated with a business protocol.\r\n<p>\r\nReturns <code>true</code> for exchange point which are associated with a trading pickup/delivery and\r\n<code>false</code> for application pickups/delivery.\r\n</p>"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_EmailB2biProducerExchangePointBean" : {
      "title" : "EmailB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_hl7v2DocumentAgreementBean" : {
      "title" : "hl7v2DocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementBean"
      }, {
        "properties" : {
          "eventType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "MSH-0009 (Message Header Segment) field that indicates the response event type. This field is not required on response or acknowledgement process."
          },
          "messageStructure" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "MSH-0009 (Message Header Segment) field that indicates the message type (Example: ADT, ORU, ACK)."
          },
          "useEventType" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enables event type for detection / matching."
          },
          "useMessageStructure" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enables message structure for detection / matching."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_configurationArgumentBean" : {
      "title" : "configurationArgumentBean",
      "allOf" : [ {
        "properties" : {
          "editable" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the argument that belongs to a specific parameter set."
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the argument. This is a read-only field."
          },
          "notEqualTo" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "No description"
          },
          "type" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the argument. This is a read-only field."
          },
          "value" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The value to be updated."
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_oftpSharedProducerExchangePointBean" : {
      "title" : "oftpSharedProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "sharedOftpExchangePointToPollId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select the partner delivery exchange to share, if any are available. The available choices are OFTP V1\r\nor OFTP V2 delivery exchanges for other partners. The user interface only allows selecting delivery\r\nexchanges of the same type being added. For example, if you are adding an OFTP V1 exchange, only OFTP\r\nV1 selections are available."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_processingBean" : {
      "title" : "processingBean",
      "allOf" : [ {
        "properties" : {
          "coreId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The parent core id of the message"
          },
          "loggerId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The logger id of the message"
          },
          "message" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The description of the log event"
          },
          "severity" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The severity of the log event",
            "$ref" : "#/definitions/xml_ns0_processingSeverity"
          },
          "timestamp" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The timestamp of the log event"
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_immutableProducerExchangePointBean" : {
      "title" : "immutableProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_oftpServerSettingsBean" : {
      "title" : "oftpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverSettingsBean"
      }, {
        "properties" : {
          "maxThreads" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The most threads the trading engine can dedicate to the server."
          },
          "minThreads" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The least number of threads the trading engine must dedicate to the server."
          },
          "networkSettings" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The network settings for this server. The following types are supported:\r\n<ol><li><b>TCP</b>. Transmission Control Protocol is the basic communications protocol of the Internet.</li>\r\n<li>X.25. An ITU-T standard protocol suite for packet-switched wide area network communications.</li>\r\n<li>X.25 over ISDN (B-channel). Integrated Services Digital Network broadband channel\r\nsupports data transfers over telephone networks</li></ol>",
            "$ref" : "#/definitions/xml_ns0_networkSettingsBean"
          },
          "shouldSubmitCertificate" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Used for hiding the SSL server certificate URI; true if the entity was newly persisted and false otherwise"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_pesitServerExchangePointBean" : {
      "title" : "pesitServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverExchangePointBean"
      }, {
        "properties" : {
          "callerIdentification" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "(For Trading Pickup only) Holds the default identity exposed by the server to the partners. You can override or restrict the the\r\ncaller's protocol identity (P14) and password requirements.",
            "$ref" : "#/definitions/xml_ns0_pesitIdentificationBean"
          },
          "enableAcks" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Send acknowledgments for messages received by this exchange - If you select this option, the server\r\nsends an acknowledgment to the partner when it receives a file successfully. This occurs when the\r\ncorresponding message is correctly unpackaged. This is a protocol level acknowledgment, which\r\nindicates only that the trading engine has correctly received the file."
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The local port used by the embedded PeSIT server to listen for incoming connections. The default value is 1761."
          },
          "senderServerAckPairs" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "(For application pickup only)\r\n<p>\r\nFor each application that expects an acknowledgment:\r\n</p>\r\n<ul>\r\n<li>In the <b>Inbound sender</b> field, enter the caller identity (PI3) used by the application to\r\nconnect. If you do not enter a caller identity, no acknowledgements are sent on this exchange.</li>\r\n<li>In the <b>Inbound sender</b> field, to select the community that sends the acknowledgment, and then\r\nselect the connection string that corresponds to the back-end server which should receive the\r\nacknowledgment. This is how you select the delivery exchange that is used to send the acknowledgement.</li>\r\n</ul>\r\n\r\nAn acknowledgment is sent to the Sender/Server pair, when the reception is completed and the\r\ncorresponding incoming message is successfully unpackaged. This means that it is a protocol\r\nacknowledgment (the trading engine received the file). A receipt message is generated and sent through\r\nthe selected integration delivery exchange.",
            "$ref" : "#/definitions/xml_ns0_mapType"
          },
          "serverIdentification" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "For Trading Pickups, holds the partner password requirements (P15) to connect to this embedded server.\r\n<p>\r\nFor Application Pickups, holds the back-end client password requirements (P15) to connect to this embedded server.\r\n</p>",
            "$ref" : "#/definitions/xml_ns0_pesitIdentificationBean"
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_edifactInboundFunctionalGroupBean" : {
      "title" : "edifactInboundFunctionalGroupBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_functionalGroupBean"
      }, {
        "properties" : {
          "applicationPassword" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 0058) Application password."
          },
          "functionalGroupId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 0038) Message group identification."
          },
          "recipientApplicationId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 007 0044) Identifies the party receiving the transmission. This code is agreed by the trading partners."
          },
          "recipientCodeQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 007 0007) Qualifier referring to the source of codes for the identifiers of interchanging partners."
          },
          "senderApplicationId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 006 0040) Identifies the party sending the transmission. This code is agreed to by trading partners."
          },
          "senderCodeQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "(UNG 006 0007) Qualifier referring to the source of codes for the identifiers of interchanging partners."
          },
          "useApplicationPassword" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>applicationPassword</code> field is used for matching/selection at runtime."
          },
          "useFunctionalGroupId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>functionalGroupId</code> field is used for matching/selection at runtime."
          },
          "useRecipientApplicationId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>recipientApplicationId</code> field is used for matching/selection at runtime."
          },
          "useRecipientCodeQualifier" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>recipientCodeQualifier</code> field is used for matching/selection at runtime."
          },
          "useSenderApplicationId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>senderApplicationId</code> field is used for matching/selection at runtime."
          },
          "useSenderCodeQualifier" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>senderCodeQualifier</code> field is used for matching/selection at runtime."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_partnerDocumentServiceBean" : {
      "title" : "partnerDocumentServiceBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentServiceBean"
      }, {
        "properties" : {
          "documentFormat" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The documentStandard or format that applies to the document that is to be exchanged between partners."
          },
          "documentType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of document that is to be exchanged between partners."
          },
          "documentVersion" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The documentVersion of the document that is to be exchanged between partners."
          },
          "postDetectionComponentId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_ftpCollisionMode" : {
      "type" : "string",
      "title" : "ftpCollisionMode",
      "description" : "",
      "enum" : [ "USE_USE_NONE", "USE_TEMP_FILES_WITH_INBOX", "USE_TEMP_FILE_EXTENSION" ]
    },
    "xml_ns0_documentAgreementOutputBean" : {
      "title" : "documentAgreementOutputBean",
      "allOf" : [ {
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The id of this Document Agreement Output."
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the Document Agreement Output. This cannot be modified."
          },
          "outboundAgreements" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The outbound agreement configuration to use for output delivery.",
            "$ref" : "#/definitions/xml_ns0_documentAgreementOutputAgreementBean"
          },
          "outputType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select one of the following: <p/><ul>\r\n<li> USE_INBOUND_RECEIVER - Use inbound agreement receiver as delivery partner  <p/>\r\nThis is the default behavior of the document agreement.\r\n</li>\r\n<li> USE_ALTERNATE_DELIVERY_PARTNER <p/>\r\nSelect this option if you want to specify a partner (other than the inbound agreement\r\nreceiver) as the destination of outbound messages. The partner you select must have a valid Routing ID and a delivery exchange defined.\r\n</li>\r\n<li> USE_OUTBOUND_AGREEMENT <p/>\r\nSelect this option to link the document agreement to an outbound agreement.\r\n</li>\r\n<li> USE_NONE <p/>\r\nThis option is the default when the Service used by the owning Document Agreement delivers to an Application. It\r\ncan be selected only when the Service delivers to Application or when the Service delivers to Partner but the Agreement has no explicit receiver.\r\n</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_documentAgreementOutputType"
          },
          "useEnvelopingProfile" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set to one of the following: <p/> <ul>\r\n<li> true - Deliver using defined outbound agreement(s) <p/>\r\nSelect this option if you want to specify an outbound agreement to\r\nuse for the output delivery.\r\n</li>\r\n<li> false - Deliver using best matching outbound agreement <p/>\r\nSelect this option if you want to let B2Bi select the\r\noutbound agreement to link to this agreement. The trading engine selects the\r\nbest matching agreement from the available agreements. If no matching\r\noutbound agreement is found, a message is generated to Message Log.\r\n</li>\r\n<p/>\r\n</ul>"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_MimeEmailB2biConsumerExchangePointBean" : {
      "title" : "MimeEmailB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_xmlInboundAgreementBean" : {
      "title" : "xmlInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_xmlAgreementBean"
      }, {
        "properties" : {
          "testFlag" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this field to true if the agreement is for testing and not for production."
          },
          "useReceiverIdentification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable receiver identification for detection/matching. </br> This is a read-only field."
          },
          "useSenderIdentification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable sender identification for detection/matching. </br> This is a read-only field."
          },
          "useTestFlag" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If true, testFlag will be used for detection / matching."
          }
        }
      } ],
      "description" : ""
    },
    "json_ExchangePointBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "url" : {
          "type" : "string",
          "description" : "Return the URL associated with this exchange point. For delivery exchanges either on the trading or\r\nintegration side, and for polling pickup exchanges like FTP client and file system client, this should\r\nalways have a value in the database (unless the exchange isn&#39;t complete). The same is true for embedded\r\nHTTP exchanges. For other types of exchanges such as embedded FTP, the URL in the database may be null.\r\nSuch exchanges should override this method and dynamically return a URL built from values derived from\r\nplaces like their settings object (and primary FtpUser in the case of FTP).\r\n<p/>\r\nWorst case, this method will return remoteUrl if url is null."
        },
        "businessProtocol" : {
          "description" : "The business protocol associated with this exchange point.",
          "$ref" : "#/definitions/json_BusinessProtocol"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Returns if this exchange point is enabled."
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "The friendly name for this exchange point."
        },
        "backupMessages" : {
          "type" : "boolean",
          "description" : "Indicates whether the system backs up copies of the messages it retrieves from integration or receives\r\nfrom partners."
        },
        "maxConcurrentConnections" : {
          "type" : "number",
          "description" : "(For partner trading delivery only.) The number of total open connections the trading engine server can\r\nmake to a partner. If you are operating in a cluster environment, this is the total number across the\r\nentire cluster, no matter how many JVM nodes are running. For example, if the value is 100 connections\r\nand there are 150 messages to send, the trading engine opens only 100 connections to that partner. The\r\nremaining 50 messages are queued until connections become available.\r\n<p>\r\nThe default value is suitable in almost all cases. However, if a partner says your trading engine is\r\nover running his receiving system, decrease the value. (This advice does not apply to OFTP X.25 or X.25\r\nover ISDN, as the default maximum value is 1 for those transports.)If sending messages to Transfer CFT\r\nvia PeSIT (PeSIT), the value in this field must be less than the CFTTCP setting in Transfer CFT.\r\n</p>"
        },
        "inlineProcessors" : {
          "type" : "string",
          "description" : "Returns the list of inline processors that are associated with this exchange point."
        },
        "inlinePostProcessors" : {
          "type" : "string",
          "description" : "Returns the list of inline post processors that are associated with this exchange point."
        },
        "schedule" : {
          "type" : "string",
          "description" : "Returns the schedule that is associated with this exchange point."
        }
      },
      "title" : "ExchangePointBean",
      "description" : ""
    },
    "json_PesitIntegrationDeliverySettingsBean" : {
      "title" : "PesitIntegrationDeliverySettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_IntegrationDeliverySettingsBean"
      }, {
        "properties" : {
          "callerIdentification" : {
            "description" : "Holds the caller's protocol identity (P13) and password requirements. <p/>",
            "$ref" : "#/definitions/json_PesitIdentificationBean"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_status" : {
      "type" : "string",
      "title" : "status",
      "description" : "",
      "enum" : [ "OK", "CREATED", "ACCEPTED", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "MOVED_PERMANENTLY", "FOUND", "SEE_OTHER", "NOT_MODIFIED", "USE_PROXY", "TEMPORARY_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "REQUEST_ENTITY_TOO_LARGE", "REQUEST_URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED" ]
    },
    "json_AleB2biConsumerExchangePointBean" : {
      "title" : "AleB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_FunctionalGroupBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : "Functional group name"
        }
      },
      "title" : "FunctionalGroupBean",
      "description" : ""
    },
    "json_OftpV1ConsumerExchangePointBean" : {
      "title" : "OftpV1ConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_OftpConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_X12OutboundFunctionalGroupBean" : {
      "title" : "X12OutboundFunctionalGroupBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_FunctionalGroupBean"
      }, {
        "properties" : {
          "functionalGroupId" : {
            "type" : "string",
            "description" : "(GS 479) Identifies a group of application related transaction sets."
          },
          "senderMessagingId" : {
            "type" : "string",
            "description" : "(GS 142) Identifies the party sending the transmission. This code is agreed to by trading partners."
          },
          "receiverMessagingId" : {
            "type" : "string",
            "description" : "(GS 124) Identifies the party receiving transmission. This code is agreed to by trading partners."
          },
          "responsibleAgencyCode" : {
            "description" : "(GS 455) Identifies the issuer of the standard. This code is used in conjunction with GS 480 below.",
            "$ref" : "#/definitions/json_X12IndustryIdentifier"
          },
          "identifierCode" : {
            "type" : "string",
            "description" : "(GS480) Code indicating the version, release, sub-release, and industry identifier of the EDI standard\r\nbeing used, including the GS and GE segments. If code in DE455 in GS segment is X, then in DE 480\r\npositions 1-3 are the version number; positions 4-6 are the release and subrelease, level of the\r\nversion; and positions 7-12 are the industry or trade association identifiers (optionally assigned by\r\nuser); if code in DE455 in GS segment is T, then other formats are allowed."
          },
          "timeFormat" : {
            "description" : "Select one of the following time formats:\r\n<ul>\r\n<li><b>HHMM</b></li>\r\n<li><b>HHMMSS</b></li>\r\n<li><b>HHMMSSD</b></li>\r\n<li><b>HHSSMMDD</b></li>\r\n</ul>",
            "$ref" : "#/definitions/json_GroupTimeFormatType"
          },
          "controlNumberGenerator" : {
            "type" : "string",
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>\r\nThe data interchange information code control number. This is the starting value of unique identifiers\r\nfor outbound messages. By default, the identifier increases by 1 for each additional message (ISA13).\r\nThis is an interchange envelope parameter.\r\n</p>"
          }
        }
      } ],
      "description" : "Author: srybak\r\nDate: 5/23/14"
    },
    "xml_ns0_documentAgreementOutputApplicationBean" : {
      "title" : "documentAgreementOutputApplicationBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementOutputBean"
      }, { } ],
      "description" : ""
    },
    "json_FileSystemConsumerExchangePointBean" : {
      "title" : "FileSystemConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "directory" : {
            "type" : "string",
            "description" : "The full path for a unique directory where the trading engine picks up messages. If the directory does not exist,\r\nthe trading engine creates it for you.\r\n<p/>\r\nYou must specify a unique directory name. You may want to give the directory a name that indicates that the transport\r\nis being used for integration or receiving messages from partners."
          },
          "filterOption" : {
            "type" : "boolean",
            "description" : "Enabling file filtering allows the trading engine to discriminate which\r\nfiles to consume based on file names  <p/>"
          },
          "negativeFilterOption" : {
            "type" : "boolean",
            "description" : "Specify whether the filter pattern is inclusive or exclusive. <p/>\r\nIf set to false it is inclusive: only files matching the pattern are consumed. If set to true it is exclusive:\r\nfiles matching the pattern are ignored, but all other files are consumed."
          },
          "filterConditions" : {
            "type" : "string",
            "description" : "Insert the formats of the files you want the transport\r\nto consume or ignore. Use conventional wildcard characters for file names or\r\nextensions or both. The following describes the supported characters and symbols:\r\n<p/> <hr/>\r\n* &nbsp;&nbsp;&nbsp;&nbsp; One or more characters.<p/><hr/>\r\n? &nbsp;&nbsp;&nbsp;&nbsp; Any single character.<p/><hr/>\r\n[ ] &nbsp;&nbsp;&nbsp;&nbsp; Matches any single character within the brackets. For example, r[aou]t\r\nmatches rat, rot and rut.<p/><hr/>\r\n, &nbsp;&nbsp;&nbsp;&nbsp; Commas can be used as and/or operators within brackets (for example, r[a,\r\no,u]t). <p/><hr/>\r\n- &nbsp;&nbsp;&nbsp;&nbsp; Use hyphens within brackets to specify ranges of letters or numbers. For\r\nexample, [0-9] is for any number between 0 and 9, and [A-Za-z] is for any\r\nupper- or lower-case letter. <p/><hr/>\r\n. &nbsp;&nbsp;&nbsp;&nbsp; Use the character dot to separate the file name and extension. For example,\r\n*.txt.<p/><hr/>\r\n| &nbsp;&nbsp;&nbsp;&nbsp; Use the pipe character to separate multiple file name formats. For example,\r\n*.edi|*.txt|[a,b,c]?.xml.<p/>"
          },
          "metadataHierarchy" : {
            "type" : "array",
            "description" : "You can use metadata hierarchy to avoid file name collisions by selecting message attributes that\r\ncorrespond to the names of subdirectories. <p/>\r\nEach item added represents another subdirectory level. For example, add \"From routing ID\" and \"To\r\nrouting ID\" to the selected attributes list in that order. Then, place a message in a subdirectory\r\nnamed \"ABC/DEF\". The message will be assigned a \"From routing ID\" attribute set to \"ABC\" and a\r\n\"To routing ID\" set to \"DEF\".",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      } ],
      "description" : ""
    },
    "json_OutOfSequenceActionType_hl7v2" : {
      "type" : "string",
      "title" : "OutOfSequenceActionType",
      "description" : "",
      "enum" : [ "WARN_AND_PROCESS", "FAIL_AND_PARK", "IGNORE" ]
    },
    "json_PartyTradingInfoBean" : {
      "type" : "object",
      "properties" : {
        "contact" : {
          "description" : "",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "routingId" : {
          "description" : "",
          "$ref" : "#/definitions/json_RoutingIdBean"
        },
        "name" : {
          "type" : "string",
          "description" : ""
        },
        "type" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "PartyTradingInfoBean",
      "description" : ""
    },
    "xml_ns0_metadataProfileOutputToNextStepBean" : {
      "title" : "metadataProfileOutputToNextStepBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_metadataProfileOutputBean"
      }, {
        "properties" : {
          "attributeMap" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_mapType"
          },
          "overrideDocumentDetection" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_pluggableServerExchangePointBean" : {
      "title" : "pluggableServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_consumerExchangePointBean"
      }, {
        "properties" : {
          "className" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The server class of the pluggable server."
          },
          "maxMessagesPerPollingInterval" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns the highest number of messages the system can retrieve each time it polls."
          },
          "pollingIntervalSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns the interval in seconds the trading engine waits before polling for messages to retrieve."
          },
          "serverName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the transport server, used to distinguish it from other embedded servers."
          },
          "settings" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enter name/value pairs as custom parameters.",
            "$ref" : "#/definitions/xml_ns0_mapType"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_messageAttributeBean" : {
      "title" : "messageAttributeBean",
      "allOf" : [ {
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "owningMessageId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "value" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_SeiResponseMessage" : {
      "title" : "SeiResponseMessage",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ResponseMessage"
      }, {
        "properties" : {
          "timeMillis" : {
            "type" : "number",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "json_FtpSubDirectoryBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "ftpUserName" : {
          "type" : "string",
          "description" : "Get the name of the FTP user."
        },
        "subDirectory" : {
          "type" : "string",
          "description" : "User's subdirectory where the messages will be written.\r\nThe user subdirectories for each exchange are different."
        }
      },
      "title" : "FtpSubDirectoryBean",
      "description" : ""
    },
    "xml_ns0_fileSystemProducerExchangePointBean" : {
      "title" : "fileSystemProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "directory" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The full path for a unique directory where the trading engine routes messages. If the directory does not exist, the trading\r\nengine creates it for you.\r\n<p/>\r\nYou must specify a unique directory name. You may want to give the directory a name that indicates whether the transport is being used for integration, or sending messages to\r\npartners."
          },
          "metadataHierarchy" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "You can use metadata hierarchy to avoid file name collisions by selecting message attributes that\r\ncorrespond to the names of subdirectories. <p/>\r\nEach item added represents another subdirectory level. For example, add \"From routing ID\" and \"To\r\nrouting ID\" to the selected attributes list in that order. Then, place a message in a subdirectory\r\nnamed \"ABC/DEF\". The message will be assigned a \"From routing ID\" attribute set to \"ABC\" and a\r\n\"To routing ID\" set to \"DEF\"."
          },
          "preserveFilename" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this to true if you want original file names to be preserved when the trading engine delivers messages.\r\n<p/>\r\nFor binary messages, we recommend that you preserve original file names. Otherwise, the trading engine assigns a\r\nunique file name that does not readily identify the contents of the file. Preserving original file names also allows\r\nyour back-end application to process binary messages based on their file names."
          },
          "preserveFilenameMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "File Name Preserve Mode Option: <ul> <li><b>Overwrite duplicate filenames</b><p/> An option when you choose to\r\npreserve original file names. If duplicate file names are detected, the trading engine overwrites the existing\r\nfile.</li>\r\n<p/>\r\n<li><b>Sequentially number duplicate filenames</b><p/> An option when you choose to preserve original file names. If\r\nduplicate file names are detected, the trading engine appends a number to the new file.\r\n<p/>\r\n<li><b>Generate unique filenames</b><p/> Select to have the system provide a unique file name instead of using the\r\noriginal name. This field applies to community integration delivery exchanges and partner delivery exchanges only.\r\nWhen selected, files are given arbitrary names. The names always have less than 30 characters and often have less\r\nthan 20 characters.\r\n<p/>\r\nAppended to the file name is a hex representation of a monotonically increasing file name counter that is maintained\r\nin the database and guaranteed to be unique across all nodes in a cluster. In addition, if the original file name\r\nhad an extension, the same extension is appended to the unique name the system generates.\r\n<p/>\r\nThe following are examples of unique file names generated by the system, one with the original file extension and\r\none without: <ul> <li>dabeed45_4cb.edi</li> <li>z47e4120_4ce</li> </li> </ul> </ul>",
            "$ref" : "#/definitions/xml_ns0_fileNamePreserveMode"
          },
          "userDefinedDeliveryFilename" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The pattern for the name of the message file sent to a partner. You can enter any combination of the following elements in the\r\nuserDefinedDeliveryFilename or userDefinedDuplicateFilename fields for Delivery exchange file naming action: <ul>\r\n<li> Literal strings </li>\r\n<p/>\r\n<li> %metadata name% <p/> You can use any metadata attribute associated with the FTP or File System\r\ndelivery. You cannot use Custom attributes.</li>\r\n<p/>\r\n<li> $filename$ </li>\r\n<p/>\r\n<li> $extension$ </li>\r\n<p/>\r\n<li> $timestamp$ <p/> Where timestamp is a shortcut for SimpleDateFormat string\r\n'yyyyMMddHHmmssSSS'. </li>\r\n<p/>\r\n<li> $sequence$ <p/> This is a monotonically increasing counter. A different counter is maintained for\r\neach delivery exchange. A Message Handler rule uses a single global counter.</li>\r\n<p/>\r\n<li> $any legal Java SimpleDateFormat string$ </li>\r\n</ul><p/>"
          },
          "userDefinedDuplicateFilename" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "You can set Duplicate file renaming by entering a renaming pattern in the Pattern field. The patterns that you can\r\nenter in this field are similar to the renaming patterns listed for userDefinedDeliveryFilename, with the following\r\ndifferences: <ul>\r\n<li>You must include $filename$.</li>\r\n<p/>\r\n<li>You must enter at least one of the following elements, in order to ensure that a unique name is\r\ngenerated for the duplicate: <ul>\r\n<li>$sequence$ <p/> This is the sequence number calculated from all delivery file names handled on all\r\ndeliveries</li>\r\n<p/>\r\n<li>$timestamp$</li>\r\n<p/>\r\n<li>$filesequence$ <p/> This variable is only allowed in the duplicate file naming case (not the file\r\nnaming case above). It is calculated from only the file names handled on the specific delivery\r\nwhere you set the pattern. It is recommended that you use $sequence$ instead of\r\n$filesequence$ because $filesequence$ consumes greater processing resources. </li>\r\n<p/>\r\n<li>$any legal Java SimpleDateFormat string$</li></ul></li><p/></ul>"
          }
        }
      } ],
      "description" : ""
    },
    "json_FieldStyle" : {
      "type" : "string",
      "title" : "FieldStyle",
      "description" : "",
      "enum" : [ "MULTISELECT", "SINGLESELECT", "FREETEXT" ]
    },
    "xml_ns0_oftpV2ProducerExchangePointBean" : {
      "title" : "oftpV2ProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_oftpProducerExchangePointBean"
      }, {
        "properties" : {
          "requiresSecureAuthentication" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "For OFTP V2 only, this is an extra layer of security to enable senders and receivers to validate each other as\r\ngenuine. There are two requirements to enable secure OFTP authentication: <p/><ul>\r\n<li> Both the sender and receiver must enable secure OFTP authentication. If one party turns it on and the other\r\nparty does not, a protocol error is generated and the session between the parties is disconnected. </li>\r\n<li> Both the sender and receiver must be using certificates. These are the normal certificates used by a community\r\nand its partners to securely exchange messages. These are not TLS certificates, which are additional certificates\r\nneeded if TLS is configured for a delivery exchange. </li></ul>\r\nThis is how the authentication works: The initiator of the connection uses the partner’s public key to encrypt and\r\nsend a short, random message to the partner. The partner decrypts the message with its private key and sends the\r\nmessage back. The initiator compares the response to the original message. If the messages match, the initiator\r\nhas authenticated the partner. The partner repeats the process to validate the initiator. <p/>"
          },
          "secureAuthCertificateId" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the partner certificate used for secure authentication. This ID is shown only when another certificate\r\nthan the default one is used. <p/>"
          },
          "useDifferentAuthCertificate" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this to true in order to select a partner certificate to use for secure authentication other than the default\r\ncertificate. <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_exchangePointScheduleBean" : {
      "title" : "exchangePointScheduleBean",
      "allOf" : [ {
        "properties" : {
          "dayOfWeek" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A day between 1-7 to activate this schedule"
          },
          "endHour" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "An hour for stopping this schedule. Between 0-23"
          },
          "endMinute" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A minute for stopping this schedule. Between 0-59"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "startHour" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "An hour for starting this schedule. Between 0-23"
          },
          "startMinute" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A minute for starting this schedule. Between 0-59"
          }
        }
      }, { } ],
      "description" : "Used to set times for making a pickup or delivery exchange inactive while keeping the transport in an enabled state.\r\nFor example, you could set a schedule to turn off the exchange for a few hours once a week to perform maintenance on a transport server.</br>\r\nBy default exchanges are active continuously. Schedules are added by day of the week and time of day.\r\nFor instance, if you select Monday 0:00 - 23:59, the exchange is on all day every Monday.\r\nIf you select Monday 8:30 - 11:30, the exchange is on from 8:30 to 11:30 a.m. and off all other times on Mondays.</br>\r\nTimes are expressed in 24-hour format: hh:mm or h:mm. Times are the time zone for your server.</br>\r\nIf you schedule down times for a pickup used by a community to receive messages from partners, you may want to inform partners when the transport is inactive.</br>\r\nIf you want an exchange to be active most of the time but turned off only some of the time, you may need many schedules specifying the daily times you want\r\nthe transport to be on or off. For example, to schedule a transport to turn off between 1 and 2 p.m. each Saturday, eight schedules are needed as follows:\r\nsix daily schedules calling for the transport to run continuously Sunday through Friday and two Saturday schedules, the first specifying the transport\r\nis on from midnight to 1 p.m. and the second specifying the transport is on from 2 p.m. to midnight.</br>\r\nMessages in queue when a transport turns off are suspended until the transport turns back on. For example, if a message is picked up from an application\r\nwhile the transport for sending to a partner is turned off, Message Tracker reports the status for the message as \"scheduled production.\"\r\nWhen the transport turns on again, processing of the message continues. Similarly, retries and resends for messages are suspended while the transport is off,\r\nbut they resume at the point where they were suspended when the transport turns back on.</br>\r\nTo use schedules, make sure message backups are enabled for the affected transports.\r\nUnless backups are enabled, messages in process when a transport turns off cannot be queued to resume processing when the transport turns on again.</br>\r\nIf you trade via the AS2 message protocol and request asynchronous receipts, your community cannot receive receipts from partners\r\nwhen the sending transport is turned off. To avoid this, request synchronous receipts or schedule a transport to be off when no messages are in process."
    },
    "xml_ns0_edifactMessagingIdBean" : {
      "title" : "edifactMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_messagingIdBean"
      }, {
        "properties" : {
          "idCodeQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Identification code qualifier - The interchange sender's partner identification code qualifier (S002 0007) or\r\nthe interchange recipient's partner identification code qualifier (S003 0007). <p/>"
          },
          "interchangeInternalId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Interchange internal identification - The interchange sender's address for reverse routing (S002 0008) or the\r\nrecipient's routing address (S003 0014). <p/>"
          },
          "interchangeInternalSubId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Interchange internal sub-identification - The interchange sender's interchange sender internal sub-identification\r\n(S002 0042) or the recipient's interchange recipient internal sub-identification (S003 0046). <p/>"
          },
          "interchangePartnerId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Interchange partner ID - The interchange sender's identification (S002 0004) or the interchange recipient's\r\nidentification (S003 0010). <p/>"
          },
          "syntaxGroup" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Syntax group - The appropriate syntax to use for messages. <p/>",
            "$ref" : "#/definitions/xml_ns0_edifactSyntaxGroup"
          }
        }
      } ],
      "description" : ""
    },
    "json_ManagedPGPPublicKeyBean" : {
      "type" : "object",
      "properties" : {
        "keyId" : {
          "type" : "string",
          "description" : "The keyId is string identifier for the Public Key."
        },
        "keyAlgorithm" : {
          "type" : "string",
          "description" : "An algorithm identifier that specifies the public key crypto system this key belongs to and any associated key parameters, such as key length <p/>"
        },
        "keyLength" : {
          "type" : "number",
          "description" : "Key length indicates encryption strength, the larger the number the stronger the key. <p/>"
        },
        "creationDate" : {
          "type" : "number",
          "description" : "The date the public key was created."
        },
        "expireDate" : {
          "type" : "number",
          "description" : "The date the public key expires."
        }
      },
      "title" : "ManagedPGPPublicKeyBean",
      "description" : ""
    },
    "xml_ns0_httpServerB2biProducerExchangePointBean" : {
      "title" : "httpServerB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_metadataTemplatePolicy" : {
      "type" : "string",
      "title" : "metadataTemplatePolicy",
      "description" : "",
      "enum" : [ "ALWAYS", "IF_KNOWN", "NEVER" ]
    },
    "json_IsdnServerNetworkSettingsBean" : {
      "title" : "IsdnServerNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_IsdnNetworkSettingsBean"
      }, {
        "properties" : {
          "listenMSN" : {
            "type" : "string",
            "description" : "The subscriber number this embedded server answers to.\r\nThis is the number as seen by the ISDN router.\r\nTypically, prefix digits (international, external line) have been removed by the telecom equipment.\r\nCheck with your telecom operator for the correct number."
          }
        }
      } ],
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "xml_ns0_componentBean" : {
      "title" : "componentBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biComponentBean"
      }, {
        "properties" : {
          "componentId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the component associated to the processing step."
          },
          "configurationOwnerId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the owning object (e.g. DocumentService.id, ProcessingStepComponent.id, etc).\r\nThis is used to generate the URI to the configuration."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the processing step."
          },
          "processingStepAddOutput" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field is only applicable for component resource which have no pre-defined output; it means than it is desired\r\nto use this resource's input as its output.\r\nThis attribute will be ignored with a warning for component resources which have this flag set (true or false)\r\nbut already have pre-defined output."
          },
          "processingStepEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify if the component is enabled."
          },
          "processingStepName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the component."
          },
          "processingStepType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the component. Select one of the following values:\r\n<ul>\r\n<li><b>Custom delivery</b> – Create Custom Delivery components to provide processing for\r\nIntegration Custom Deliveries</li>\r\n<li><b>Detector</b></li>\r\n<li><b>Document</b></li>\r\n<li><b>Enveloper</b></li>\r\n<li><b>Map</b></li>\r\n<li><b>Post detection</b></li>\r\n<li><b>Post enveloping</b></li>\r\n<li><b>Post transfer failed</b></li>\r\n<li><b>Post transfer success</b></li>\r\n</ul>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_oftpV1ConsumerExchangePointBean" : {
      "title" : "oftpV1ConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_oftpConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_AckEnvelopingType" : {
      "type" : "string",
      "title" : "AckEnvelopingType",
      "description" : "",
      "enum" : [ "DEFAULT", "OUTBOUND_AGREEMENT" ]
    },
    "json_FtpServerProducerExchangePointBean" : {
      "title" : "FtpServerProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerProducerExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The local port used by the embedded FTP server to listen for incoming connections.\r\nThe default value is 4021 for trading server and 5021 for application server."
          },
          "subDirectories" : {
            "type" : "string",
            "description" : ""
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "description" : "For delivery only\r\n<p/>\r\nSelect this if you want the embedded server to delete files after they have been downloaded from it"
          },
          "modifyFtpServerDirectory" : {
            "type" : "boolean",
            "description" : "Enable subdirectory management on the client side."
          },
          "defaultUser" : {
            "description" : "The default FTP account used by the FTP server.",
            "$ref" : "#/definitions/json_FtpUserBean"
          },
          "deliveryFilenameMode" : {
            "description" : "This property is used when the trading engine delivers messages.</p>\r\nFtp Delivery Filename Options: <ul><li><b>Preserve original</b></p>Select this option if you\r\nwant original file names to be preserved when the trading engine delivers messages.</li>\r\n<li><b>Auto generate</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>\r\n<li><b>Custom generate</b></p>When this flag is used, the additional property\r\n<b>userDefinedDeliveryFilename</b> must be set.</li></ul>",
            "$ref" : "#/definitions/json_FtpDeliveryFilenameMode"
          },
          "duplicateFileNameMode" : {
            "description" : "We recommend using this option to prevent the trading engine\r\nfrom attempting to retrieve partially written files.There may be some\r\nspecialized servers, typically running on mainframes, that support\r\nonly part of the FTP protocol (RFC 959). In such cases you may have to\r\ntake steps of your own to make sure collisions do not occur.\r\nFtp Duplicate File Name Options: <ul><li><b>Overwrite</b></p>\r\nIf duplicate file names are detected, the trading engine overwrites the existing file.</li>\r\n<li><b>Auto generate</b></p>Automatically generate unique filenames</li>\r\n<li><b>Append</b></p>If duplicate file\r\nnames are detected, the trading engine appends a number to the new file. For\r\nFTP and SFTP the appended number is hexadecimal, with the format:\r\nfilename_c4.</li>\r\n<li><b>Custom generate</b></p>When this flag is used, the additional property\r\n<b>userDefinedDuplicateFilename</b> must be set.</li></ul>",
            "$ref" : "#/definitions/json_FtpDuplicateFileNameMode"
          },
          "userDefinedDeliveryFilename" : {
            "type" : "string",
            "description" : "Use items such as %metadata%, $filename$, $extension$, $timestamp$, and $sequence$."
          },
          "userDefinedDuplicateFilename" : {
            "type" : "string",
            "description" : "Use items such as $filename$, $extension$, $timestamp$, $sequence$ and $filesequence$ one time."
          }
        }
      } ],
      "description" : ""
    },
    "json_GroupTimeoutActionType_nacha" : {
      "type" : "string",
      "title" : "GroupTimeoutActionType",
      "description" : "",
      "enum" : [ "EMPTY", "SEND_AND_WARN", "SEND", "STOP" ]
    },
    "xml_ns0_metadataProfileBean" : {
      "title" : "metadataProfileBean",
      "allOf" : [ {
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "metadataRules" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_metadataProfileConditionBean"
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "serviceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_FileNamePreserveMode" : {
      "type" : "string",
      "title" : "FileNamePreserveMode",
      "description" : "",
      "enum" : [ "SEQUENCE", "OVERWRITE", "APPEND" ]
    },
    "json_HttpB2biConsumerExchangePointBean" : {
      "title" : "HttpB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_idocInboundAgreementBean" : {
      "title" : "idocInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_idocAgreementBean"
      }, {
        "properties" : {
          "useClient" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>client</code> field is used for matching/selection at runtime."
          },
          "useEdiStandardFlag" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>ediStandardFlag</code> field is used for matching/selection at runtime."
          },
          "useEdiVersion" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>ediVersion</code> field is used for matching/selection at runtime."
          },
          "usePartnerNumberReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerNumberReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerNumberSender" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerNumberSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerPortReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerPortReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerPortSender" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerPortSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerTypeReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerTypeReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerTypeSender" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerTypeSender</code> field is used for matching/selection at runtime."
          },
          "useTestIndicator" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>testIndicator</code> field is used for matching/selection at runtime."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_inHouseDocumentAgreementBean" : {
      "title" : "inHouseDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "json_FtpDuplicateFileNameMode" : {
      "type" : "string",
      "title" : "FtpDuplicateFileNameMode",
      "description" : "",
      "enum" : [ "OVERWRITE", "AUTO_GENERATE", "CUSTOM_GENERATE", "APPEND" ]
    },
    "json_AcknowledgementMode" : {
      "type" : "string",
      "title" : "AcknowledgementMode",
      "description" : "",
      "enum" : [ "NONE", "MLLP", "SYNC_FROM_BACKEND" ]
    },
    "json_CharEncodingCoded" : {
      "type" : "string",
      "title" : "CharEncodingCoded",
      "description" : "",
      "enum" : [ "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "ZZZ" ]
    },
    "json_AddressingRuleAction" : {
      "type" : "string",
      "title" : "AddressingRuleAction",
      "description" : "",
      "enum" : [ "USE_FIXED_PARTY", "USE_METADATA_OR_PROTOCOL_ADDRESS", "USE_PROTOCOL_ADDRESS", "ALWAYS_PARSE" ]
    },
    "json_ComponentBean" : {
      "title" : "ComponentBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biComponentBean"
      }, {
        "properties" : {
          "@id" : {
            "type" : "string",
            "description" : ""
          },
          "componentId" : {
            "type" : "string",
            "description" : "The ID of the component associated to the processing step."
          },
          "processingStepEnabled" : {
            "type" : "boolean",
            "description" : "Specify if the component is enabled."
          },
          "processingStepName" : {
            "type" : "string",
            "description" : "The name of the component."
          },
          "processingStepType" : {
            "type" : "string",
            "description" : "The type of the component. Select one of the following values:\r\n<ul>\r\n<li><b>Custom delivery</b> – Create Custom Delivery components to provide processing for\r\nIntegration Custom Deliveries</li>\r\n<li><b>Detector</b></li>\r\n<li><b>Document</b></li>\r\n<li><b>Enveloper</b></li>\r\n<li><b>Map</b></li>\r\n<li><b>Post detection</b></li>\r\n<li><b>Post enveloping</b></li>\r\n<li><b>Post transfer failed</b></li>\r\n<li><b>Post transfer success</b></li>\r\n</ul>"
          },
          "processingStepAddOutput" : {
            "type" : "boolean",
            "description" : "This field is only applicable for component resource which have no pre-defined output; it means than it is desired\r\nto use this resource's input as its output.\r\nThis attribute will be ignored with a warning for component resources which have this flag set (true or false)\r\nbut already have pre-defined output."
          },
          "configurations" : {
            "type" : "string",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_acknowledgementMode" : {
      "type" : "string",
      "title" : "acknowledgementMode",
      "description" : "",
      "enum" : [ "NONE", "MLLP", "SYNC_FROM_BACKEND" ]
    },
    "json_MessageBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "coreId" : {
          "type" : "string",
          "description" : "Gets the Message core Id"
        },
        "messageAttributes" : {
          "type" : "string",
          "description" : "Returns a list containing all the attributes for the current Message"
        },
        "currentStateType" : {
          "type" : "string",
          "description" : "Gets the Message current state"
        },
        "senderPartyID" : {
          "type" : "string",
          "description" : "Gets the Message sender party Id"
        },
        "receiverPartyID" : {
          "type" : "string",
          "description" : "Gets the Message receiver party Id"
        },
        "senderRoutingID" : {
          "type" : "string",
          "description" : "Gets the Message sender routing Id"
        },
        "receiverRoutingID" : {
          "type" : "string",
          "description" : "Gets the Message receiver routing Id"
        },
        "documentClass" : {
          "type" : "string",
          "description" : "the Message document class"
        },
        "integrationID" : {
          "type" : "string",
          "description" : ""
        },
        "currentMessageID" : {
          "type" : "string",
          "description" : ""
        },
        "senderRoutingIDType" : {
          "type" : "string",
          "description" : ""
        },
        "receiverRoutingIdType" : {
          "type" : "string",
          "description" : ""
        },
        "contentMimeType" : {
          "type" : "string",
          "description" : ""
        },
        "ediControlID" : {
          "type" : "string",
          "description" : ""
        },
        "consumptionFilename" : {
          "type" : "string",
          "description" : ""
        },
        "productionFilename" : {
          "type" : "string",
          "description" : ""
        },
        "consumptionExchangePointOID" : {
          "type" : "string",
          "description" : ""
        },
        "originationTime" : {
          "type" : "string",
          "description" : ""
        },
        "deliveredTime" : {
          "type" : "string",
          "description" : ""
        },
        "direction" : {
          "type" : "string",
          "description" : ""
        },
        "consumptionURL" : {
          "type" : "string",
          "description" : ""
        },
        "productionURL" : {
          "type" : "string",
          "description" : ""
        },
        "dmzZone" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "MessageBean",
      "description" : ""
    },
    "json_ContactBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "primary" : {
          "type" : "boolean",
          "description" : "Returns if this contact is the principal contact of the community/partner"
        },
        "name" : {
          "type" : "string",
          "description" : "The contact name"
        },
        "email" : {
          "type" : "string",
          "description" : "The email address of the contact"
        },
        "phone" : {
          "type" : "string",
          "description" : "The phone number of the contact"
        },
        "notes" : {
          "type" : "string",
          "description" : "The contact's notes"
        },
        "title" : {
          "type" : "string",
          "description" : "The title owned by the contact"
        }
      },
      "title" : "ContactBean",
      "description" : ""
    },
    "json_InHouseDocumentAgreementBean" : {
      "title" : "InHouseDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_httpServerB2biConsumerExchangePointBean" : {
      "title" : "httpServerB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_SmtpServerSettingsBean" : {
      "title" : "SmtpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerSettingsBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The port that the embedded server uses to listen for connection requests. <b>Required.</b>"
          },
          "remoteHost" : {
            "type" : "string",
            "description" : "The host used by a partner to connect to this embedded server. The trading engine supplies a value based on the\r\nname of the host computer. <b>Required.</b>"
          },
          "remotePort" : {
            "type" : "number",
            "description" : "The port used by a remote partner to connect to this embedded server. <b>Required.</b>"
          },
          "backlogSeconds" : {
            "type" : "number",
            "description" : "The number of connections that the server puts 'on hold' while it is busy. Once this number is reached,\r\nconnections are refused. <b>Required.</b>"
          }
        }
      } ],
      "description" : ""
    },
    "json_ImmutableAgreementBean" : {
      "title" : "ImmutableAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, { } ],
      "description" : ""
    },
    "json_OftpConsumerExchangePointBean" : {
      "title" : "OftpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "remoteOftpExchangePointToPollId" : {
            "type" : "string",
            "description" : "The id of a partner's OFTP exchange point whom community polls for inbound messages.\r\nThe version (V1 or V2) must match and at most one community can poll a partner's server"
          },
          "remoteOftpExchangePoint" : {
            "type" : "string",
            "description" : "The URL of the server being polled for messages."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_xmlMessagingIdBean" : {
      "title" : "xmlMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_messagingIdBean"
      }, {
        "properties" : {
          "identification" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Unique identification string used for partner identification at message level and to help control\r\nmessage processing. For an outbound message, this is the sender's ID and for an inbound message,\r\nthis is the receiver’s ID."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_mllpServerExchangePointBean" : {
      "title" : "mllpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The local port used by the embedded MLLP server to listen for incoming connections."
          },
          "maxMessagesPerPollingInterval" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns the highest number of messages the system can retrieve each time it polls."
          },
          "pollingIntervalSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns the interval in seconds the trading engine waits before polling for messages to retrieve."
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_outOfSequenceActionType" : {
      "type" : "string",
      "title" : "outOfSequenceActionType",
      "description" : "",
      "enum" : [ "WARN_AND_PROCESS", "FAIL_AND_PARK" ]
    },
    "json_ConfigurationArgumentBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the argument. This is a read-only field."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the argument. This is a read-only field."
        },
        "notEqualTo" : {
          "type" : "string",
          "description" : "No description"
        },
        "value" : {
          "type" : "string",
          "description" : "The value to be updated."
        },
        "editable" : {
          "type" : "boolean",
          "description" : ""
        }
      },
      "title" : "ConfigurationArgumentBean",
      "description" : ""
    },
    "json_MetadataDocumentServiceBean" : {
      "title" : "MetadataDocumentServiceBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentServiceBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_certificateType" : {
      "type" : "string",
      "title" : "certificateType",
      "description" : "",
      "enum" : [ "ROOT_CA", "INTERMEDIARY", "END_ENTITY", "SELF_SIGNED" ]
    },
    "json_X12IndustryIdentifier" : {
      "type" : "string",
      "title" : "X12IndustryIdentifier",
      "description" : "",
      "enum" : [ "X", "T" ]
    },
    "xml_ns0_x12OutboundAgreementBean" : {
      "title" : "x12OutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_x12AgreementBean"
      }, {
        "properties" : {
          "acceptGroups" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> Select this option if you want to accept group segments. </p>"
          },
          "authCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p>A value representing additional identification or authorization of the interchange sender or the data in the\r\ninterchange (ISA02). This is an interchange envelope parameter. The type of information is set by the\r\n<b>Authorization code qualifier</b> (ISA01).\r\n<p/>"
          },
          "authCodeQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n<p/>\r\n<p> A code identifying the type of information in the authorization information (ISA01). This is an interchange\r\nenvelope parameter. </p>"
          },
          "compositeElementSeperator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes. <p/> <p> Enter the character to use as the composite element separator\r\n(ISA16). The field uses a colon as the default value. Alternately, you can use a hex code. </p>"
          },
          "elementSeperator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> Enter the character to use as the element separator. The field uses an asterisk as the default value.\r\nAlternately, you can use a hex code. </p>"
          },
          "envelopeTimeout" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> The envelope timeout in hours and minutes. The 24-hour format is HH:MM, where HH is from 00 to 23 and MM is\r\nfrom 00 to 59. </p>"
          },
          "groupAckWaitTime" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> The time in hours and minutes to wait for receiving acknowledgments. If not received within this time, the\r\ntransmission is regarded as faulty. The 24-hour format is HH:MM, where HH is from 00 to 23 and MM is from 00 to\r\n59. </p>"
          },
          "groupTimeout" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "When <b>acceptGroups</b> is <code>true</code>, specify the time limit in hours and minutes before groups time out. The 24-hour\r\nformat is <b>HH:MM</b>."
          },
          "groupTimeoutAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "When <b>acceptGroups</b> is <code>true</code>, specify the action to perform if group messages are missing. The accepted values are:\r\n<ul>\r\n<li><b>SEND_AND_WARN</b></li>\r\n<li><b>SEND</b></li>\r\n<li><b>STOP</b></li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_groupTimeoutActionType"
          },
          "interchangeControlNumberGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> The data interchange information\r\ncode control number. This is the starting value of unique identifiers for outbound messages. By default, the\r\nidentifier increases by 1 for each additional message (ISA13). This is an interchange envelope parameter. </p>"
          },
          "interchangeControlVersion" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> The information code version\r\nnumber. This covers all current interchange control segments (ISA12). This is an interchange envelope parameter.\r\n</p>"
          },
          "maxNumbDocs" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> The largest number of documents the envelope can contain. </p>"
          },
          "repetitionSeperator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> The repetition separator\r\ncharacter for the repeating element (ISA11). This is an interchange envelope parameter. </p>"
          },
          "request997Acks" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> Select this option if the an acknowledgement to the outbound message is required. </p>"
          },
          "requestTa1Acks" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> Select this option to request an\r\ninterchange acknowledgment (TA1) (ISA14). This is an interchange envelope parameter. </p>"
          },
          "securityCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only. <p/> <p> Security information about the\r\ninterchange sender or the data in the interchange (ISA04). This is an interchange envelope parameter. The type of\r\ninformation is set by the <b>Security code qualifier</b> (ISA03). </p>"
          },
          "securityCodeQualifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for <code>Interchange and group level processing</code> mode only.\r\n</p>\r\n<p> A code identifying the type of\r\ninformation in the security information (ISA03). This is an interchange envelope parameter. </p>"
          },
          "segmentSeperator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> Enter the character to use as the segment separator. The field uses the hex code <code>\\H0A</code> as the default\r\nvalue. </p>"
          },
          "transSetControlNumbGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enabled for both X12 processing modes.\r\n<p/>\r\n<p> A control number assigned by the sender and stored in the transaction set header. The number must be unique\r\nin the functional group (ST02). </p>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_pesitRecordFormat" : {
      "type" : "string",
      "title" : "pesitRecordFormat",
      "description" : "",
      "enum" : [ "FIXED", "VARIABLE" ]
    },
    "json_Hl7v2DocumentAgreementBean" : {
      "title" : "Hl7v2DocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementBean"
      }, {
        "properties" : {
          "useEventType" : {
            "type" : "boolean",
            "description" : "Enables event type for detection / matching."
          },
          "eventType" : {
            "type" : "string",
            "description" : "MSH-0009 (Message Header Segment) field that indicates the response event type. This field is not required on response or acknowledgement process."
          },
          "useMessageStructure" : {
            "type" : "boolean",
            "description" : "Enables message structure for detection / matching."
          },
          "messageStructure" : {
            "type" : "string",
            "description" : "MSH-0009 (Message Header Segment) field that indicates the message type (Example: ADT, ORU, ACK)."
          }
        }
      } ],
      "description" : ""
    },
    "json_MessagingIdBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "primary" : {
          "type" : "boolean",
          "description" : "Specify whether this messaging id is used as default for identifying the associated partner at message level.\r\nA default messaging id can be configured for each message standard that can be exchanged by a specific partner."
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Specify whether this messaging id is enabled."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the messaging id."
        },
        "routingId" : {
          "type" : "string",
          "description" : "RoutingId derived from this MessagingId.  Used for display purposes and by Integrator/pmServer."
        }
      },
      "title" : "MessagingIdBean",
      "description" : ""
    },
    "xml_ns0_idocAgreementBean" : {
      "title" : "idocAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_agreementBean"
      }, {
        "properties" : {
          "client" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The IDOC client. The maximum length of this field is 3."
          },
          "ediStandardFlag" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The EDI standard flag. The maximum length of this field is 1."
          },
          "ediVersion" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The EDI version. The maximum length of this field is 6."
          },
          "partnerNumberReceiver" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The partner number of the receiver (RCVPRN). This is a read-only field."
          },
          "partnerNumberSender" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The partner number of the sender (SNDPRN). This is a read-only field."
          },
          "partnerPortReceiver" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port of the receiver (RCVPOR). This is a read-only field."
          },
          "partnerPortSender" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port of the sender (SNDPOR). This is a read-only field."
          },
          "partnerTypeReceiver" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The partner type of the receiver (RCVPRT). This is a read-only field."
          },
          "partnerTypeSender" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The partner type of the sender (SNDPRT). This is a read-only field."
          },
          "testIndicator" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify if the Agreement is for testing or for production.",
            "$ref" : "#/definitions/xml_ns0_testIndicator"
          }
        }
      } ],
      "description" : ""
    },
    "json_AS4HttpProducerExchangePointBean" : {
      "title" : "AS4HttpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_HttpProducerExchangePointBean"
      }, {
        "properties" : {
          "mpc" : {
            "type" : "string",
            "description" : "Message Partition Channels (MPCs) allow for partitioning the flow of messages from an MSH (Messaging Service\r\nHandler) to another MSH into separate flows, so that each one of these flows can be controlled independently by\r\neither MSH, in terms of transfer priorities."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_nachaInboundAgreementBean" : {
      "title" : "nachaInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_nachaAgreementBean"
      }, {
        "properties" : {
          "batchRejectionRule" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The action to take when the batch is rejected.",
            "$ref" : "#/definitions/xml_ns0_batchRejectionRule"
          },
          "customRejectionTypes" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The custom rejection types field"
          },
          "fileIdModifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange file-id-modifier."
          },
          "fileRejectionRule" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The action to take when a file is rejected.",
            "$ref" : "#/definitions/xml_ns0_fileRejectionRule"
          },
          "referenceCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange reference-code."
          },
          "useFileIdModifier" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "use the file id modifier field"
          },
          "useNachaNameReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "use the receiver's NACHA name"
          },
          "useNachaNameSender" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "use the sender's NACHA name"
          },
          "useReferenceCode" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "use the reference code field"
          }
        }
      } ],
      "description" : ""
    },
    "json_DocumentAgreementOutputPartnerBean" : {
      "title" : "DocumentAgreementOutputPartnerBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_DocumentAgreementOutputBean"
      }, {
        "properties" : {
          "partnerId" : {
            "type" : "string",
            "description" : "The destination partner name. This is used when <b>outputType</b> is set to USE_ALTERNATE_DELIVERY_PARTNER."
          },
          "routingId" : {
            "type" : "string",
            "description" : "A Routing ID belonging to the destination partner."
          },
          "deliveryId" : {
            "type" : "string",
            "description" : "The ID of the partner delivery to use as the delivery to the destination partner."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_edifactDocumentAgreementBean" : {
      "title" : "edifactDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementBean"
      }, {
        "properties" : {
          "bgmDocNameCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The BGM name code for which this document agreement is used. If <b>detectBGMContent</b> is <code>true</code>,\r\nthis identification field will be used for matching/selection."
          },
          "detectBGMContent" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want to use this document agreement only on a specific BGM content type."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_pesitProducerExchangePointBean" : {
      "title" : "pesitProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "allocationSizePercentage" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Destination file size delta for transformed files (+/- in %) - If you configure an \"on the fly\" transformation,\r\nyou can use this setting to adjust the file size info sent with the PeSIT CREATE order. That is because the\r\n\"on the fly\" transformation changes the file size while sending. If no transformation is configured, this value\r\nis ignored.  <p/>"
          },
          "bufferSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Max data unit size in bytes (PI25): The largest chunk of data, in bytes, to be transferred at one time. For\r\nhigh-speed networks, use the default 32700 bytes. This value is related to the client setting for record length.\r\n<p/>\r\nThe value of this field must be the same or larger than the value of the record length field."
          },
          "callerIdentification" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Holds the caller's protocol identity (P13) and password requirements. <p/>",
            "$ref" : "#/definitions/xml_ns0_pesitIdentificationBean"
          },
          "cftCompattibilityEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "compressionType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Compression (PI21) - Controls the compression of the file during the transfer (compression on the fly).\r\nSelect a compression method:  <p/><ul>\r\n<li>NONE <p/>\r\nNo compression. (default)</li>\r\n<li>HORIZONTAL <p/>\r\nCompresses the consecutive identical characters in the records.</li>\r\n<li>Vertical <p/>\r\nRecords are compared to one another and the consecutive identical columns are compressed.</li>\r\n<li>BOTH <p/>\r\nCombination of the above two compression methods.</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_pesitCompressionType"
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The maximum time in seconds to wait for a reply from the server before disconnecting."
          },
          "connectionTimeoutSecs" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "PeSIT Tc timeout. The time the caller waits for a connection acknowledgment from the server. <p/>"
          },
          "customFilename" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "File label (PI37) - Logical name of the file. It is used when overwriteFileLabel is set to true. <p/>"
          },
          "dataEncoding" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Data encoding (PI16) <p/><ul>\r\n<li>TEXT <p/>\r\nUsed for ASCII files\r\n</li>\r\n<li>BINARY <p/>\r\nUsed for all other file types\r\n</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_pesitDataEncodingType"
          },
          "enableAcks" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Expect acknowledgments - this should be true if you expect the remote application or partner to send a receipt to\r\nacknowledge receiving each message sent.  <p/>"
          },
          "fileName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "File name (PI12) - Name of the file, forced to uppercase at runtime. Often, the real name of the file is delivered in\r\nin File label (customFilename)."
          },
          "fileType" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The file type (PI11) - Some monitors use this. The default value is 0.  <p/>"
          },
          "finalDestinationEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use the final destination ID from the message - Set to true on an Application Delivery to have the trading engine\r\nread pesit.finalDestinationId.out (which corresponds to PI62), and use it as PI4. When set to false on an Application\r\nDelivery, the Remote Identification should have restrictedToId set to true and an identifier set. <p/>\r\nThis value should be false for Partner Delivery."
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The IP address or the network name of the trading partner PeSIT server to connect to. This must be the fully\r\nqualified domain name or IP address of the PeSIT server your community connects to for sending messages.<p/>"
          },
          "hostNameVerificationEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "kbPerSyncPoint" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Intervals between sync points (Kbytes): Each time an amount of data equal to this value has been sent, the\r\nclient is expected to ask the server to confirm whether data totaling this value has been received. This represents\r\na check point in the progress of a file transfer. If a connection is lost before a file transfer has been\r\ncompleted, the transfer resumes (upon restart of the transport) at the point of the last successful check point. <p/>\r\nThe default value is 1024 kilobytes (1 megabyte).  <p/>\r\nThis setting corresponds to the pacing setting in Axway Transfer CFT. <p/>"
          },
          "maxOutstandingSyncPoints" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Sync acknowledgement window: The number of check-point cycles that the client waits for the server to respond\r\nto a request to confirm file-transfer progress. For example, if the value of Kb per sync point (pacing) is 1024\r\n(1 megabyte) and the value of this field is 1, the client stops sending data after 1024 kilobytes unless the\r\nserver responds, although the transfer remains active.  <p/>\r\nIf this value is 2, the client keeps sending until 2 megabytes (1024 x 2) of data  are sent, and so on. <p/>\r\nIf the client's value for this field is 0 (zero), the client does not ask the server to confirm at intervals the\r\namount of data received.  <p/>\r\nIf the server's value for this field is 0, the server does not send confirmations at intervals of data received.\r\nThe default value is 3. In most situation this is the correct value. <p/>\r\nThis setting corresponds to the chkw setting in Axway Transfer CFT."
          },
          "networkTimeoutSecs" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "PeSIT Tr timeout. The time the caller waits for an expected and effective network disconnection, before forcing\r\nit. <p/>"
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "overrideCommunitySettings" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Controls whether to override the community settings in a Partner Delivery. For Application Delivery this value\r\nshould be false. <p/>"
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port on which the partner PeSIT server listens for connection requests.<p/>"
          },
          "priority" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Priority (PI17) - Select an option: <p/><ul>\r\n<li>HIGH <p/>\r\nHighest priority</li>\r\n<li>MEDIUM <p/>\r\nDefault</li>\r\n<li>LOW <p/>\r\nLowest priority</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_pesitPriority"
          },
          "protocolTimeoutSecs" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "PeSIT Tp timeout. The time the caller waits for the response of the remote, in the middle of a protocol action\r\n(such as a transfer). <p/>"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the\r\nconnection.<p/>"
          },
          "recordFormat" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Record format (PI31). Select one of the following: <p/><ul>\r\n<li>FIXED <p/>\r\nFor fixed length records</li>\r\n<li>VARIABLE <p/>\r\nFor variable length records</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_pesitRecordFormat"
          },
          "recordLength" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Record length (PI32) - Record length for fixed records, or maximum record length for variable records.  <p/>"
          },
          "serverIdentification" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Holds the partner server's protocol identity (PI4) and password requirements.  <p/>\r\nFor Application Delivery you must then enter a specific identifier for PI4 if finalDestinationEnabled flag is set to false. This value must\r\ncorrespond to the value used by the application to identify the server. <p/>",
            "$ref" : "#/definitions/xml_ns0_pesitIdentificationBean"
          },
          "serviceParam" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Free text (PI99) - Any text string. Often it is used to transfer metadata. <p/>"
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "supportNegativeAcknowledgement" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If expect acknowledgements is enabled, set this to true to support negative acknowledgements. <p/>"
          },
          "transferTimeoutSecs" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "PeSIT Td timeout. The time the caller keeps the connection open, waiting for another message to send.  <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "json_XmlMessagingIdBean" : {
      "title" : "XmlMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MessagingIdBean"
      }, {
        "properties" : {
          "identification" : {
            "type" : "string",
            "description" : "Unique identification string used for partner identification at message level and to help control\r\nmessage processing. For an outbound message, this is the sender's ID and for an inbound message,\r\nthis is the receiver’s ID."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_groupTimeoutActionType" : {
      "type" : "string",
      "title" : "groupTimeoutActionType",
      "description" : "",
      "enum" : [ "SEND_AND_WARN", "SEND", "STOP" ]
    },
    "json_DocumentAgreementOutputBean" : {
      "type" : "object",
      "properties" : {
        "useEnvelopingProfile" : {
          "type" : "boolean",
          "description" : "Set to one of the following: <p/> <ul>\r\n<li> true - Deliver using defined outbound agreement(s) <p/>\r\nSelect this option if you want to specify an outbound agreement to\r\nuse for the output delivery.\r\n</li>\r\n<li> false - Deliver using best matching outbound agreement <p/>\r\nSelect this option if you want to let B2Bi select the\r\noutbound agreement to link to this agreement. The trading engine selects the\r\nbest matching agreement from the available agreements. If no matching\r\noutbound agreement is found, a message is generated to Message Log.\r\n</li>\r\n<p/>\r\n</ul>"
        },
        "outboundAgreements" : {
          "type" : "array",
          "description" : "The outbound agreement configuration to use for output delivery.",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_DocumentAgreementOutputAgreementBean"
            }
          }
        },
        "outputType" : {
          "description" : "Select one of the following: <p/><ul>\r\n<li> USE_INBOUND_RECEIVER - Use inbound agreement receiver as delivery partner  <p/>\r\nThis is the default behavior of the document agreement.\r\n</li>\r\n<li> USE_ALTERNATE_DELIVERY_PARTNER <p/>\r\nSelect this option if you want to specify a partner (other than the inbound agreement\r\nreceiver) as the destination of outbound messages. The partner you select must have a valid Routing ID and a delivery exchange defined.\r\n</li>\r\n<li> USE_OUTBOUND_AGREEMENT <p/>\r\nSelect this option to link the document agreement to an outbound agreement.\r\n</li>\r\n<li> USE_NONE <p/>\r\nThis option is the default when the Service used by the owning Document Agreement delivers to an Application. It\r\ncan be selected only when the Service delivers to Application or when the Service delivers to Partner but the Agreement has no explicit receiver.\r\n</li>\r\n</ul>",
          "$ref" : "#/definitions/json_DocumentAgreementOutputType"
        },
        "id" : {
          "type" : "string",
          "description" : "The id of this Document Agreement Output."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the Document Agreement Output. This cannot be modified."
        }
      },
      "title" : "DocumentAgreementOutputBean",
      "description" : ""
    },
    "xml_ns0_emailUserBean" : {
      "title" : "emailUserBean",
      "allOf" : [ {
        "properties" : {
          "emailAddress" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The email address of this SMTP user. Once created, it cannot be changed.\r\nThe email address allows wildcards:\r\n<ul>\r\n<li>? - matches any character</li>\r\n<li>* - matches any characters occurring zero or more times </li>\r\n</ul>\r\nExamples: <code>user@host.com; *@host.com; ??user@*.com</code>."
          },
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The status of this user."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique <code>String</code> ID for this user."
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_AS4HttpProducerExchangePointBean" : {
      "title" : "AS4HttpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_httpProducerExchangePointBean"
      }, {
        "properties" : {
          "mpc" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Message Partition Channels (MPCs) allow for partitioning the flow of messages from an MSH (Messaging Service\r\nHandler) to another MSH into separate flows, so that each one of these flows can be controlled independently by\r\neither MSH, in terms of transfer priorities."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_contactBean" : {
      "title" : "contactBean",
      "allOf" : [ {
        "properties" : {
          "email" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The email address of the contact"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique id of the contact"
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The contact name"
          },
          "notes" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The contact's notes"
          },
          "phone" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The phone number of the contact"
          },
          "primary" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns if this contact is the principal contact of the community/partner"
          },
          "title" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The title owned by the contact"
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_sinkB2biProducerExchangePointBean" : {
      "title" : "sinkB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_pesitServerSettingsBean" : {
      "title" : "pesitServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverSettingsBean"
      }, {
        "properties" : {
          "bufferSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Max data unit size in bytes (PI25) - The largest of chunk of data, in bytes, to be transferred at one\r\ntime. For high-speed networks, use the default 32700 bytes. This value is related to the client setting\r\nfor record length.\r\n<p/>\r\nThe value of this field must be the same or larger than the value of the record length field."
          },
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites. The default order in\r\nthe list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets\r\nLayer or Transport Layer Security. For example, an SSL or TLS protocol requires signing messages using\r\na message digest algorithm. But the choice of algorithm is determined by the particular cipher suite\r\nbeing used for the connection. Typically, you can select an MD5 or SHA digest algorithm."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Connection timeout (seconds) - Time in seconds the trading engine waits for a connection to the delivery\r\nexchange before the attempt times out. Although the default value is 30 seconds, this may be longer\r\nthan the interval allowed by your operating system (OS). For example, Windows XP by default allows a\r\nmaximum timeout of 20 seconds. The actual connect timeout interval is the lesser of the OS timeout and\r\nthe value set in the trading engine."
          },
          "enableClientAuthenticatedSsl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you require the client to authenticate itself with its own certificate when\r\nconnecting (mutual authentication). This means you must import the client's certificate to the\r\ncommunity's personal certificate list. If you want to use the pickup for multiple communities, you must\r\nimport the same certificate to each community"
          },
          "kbPerSyncPoint" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Interval between sync points (Kbytes) - Each time an amount of data equal to this value has been sent,\r\nthe client is expected to ask the server to confirm whether data totaling this value has been received.\r\nThe server responds optionally with a confirmation. This represents a check point in the progress of a\r\nfile transfer. If a connection is lost before a file transfer has been completed, the transfer resumes,\r\nupon restart of the transport, at the point of the last successful check point.\r\n<p>\r\nThe default value is 1024 kilobytes (1 megabyte). Do not change this value unless advised by the\r\nadministrator of the component.\r\n</p>"
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port on which the embedded server listens for connection requests."
          },
          "maxOutstandingSyncPoints" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Max outstanding sync points - This controls how many check point cycles the client waits for the\r\nserver to respond to a request to confirm file-transfer progress. For example, if the value of Kb per\r\nsync point (pacing) is 1024 (1 megabyte) and the value of this field is 1, the client stops sending\r\ndata after 1024 kilobytes unless the server responds, although the transfer remains active. If this\r\nvalue is 2, the client keeps sending until 2 megabytes (1024 x 2) of data are sent, and so on.\r\n<p>\r\nIf the client&#39;s value for this field is 0 (zero), the client does not ask the server to confirm at\r\nintervals the amount of data received. If the server&#39;s value for this field is 0, the server does not\r\nsend confirmations at intervals of data received.\r\n</p>\r\n<p>\r\nThe default value is 3. Do not change this value unless advised by the administrator of the component.\r\n</p>"
          },
          "maxThreads" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Maximum threads - The most threads can dedicate to the server."
          },
          "minThreads" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Minimum threads - The least number of threads must dedicate to the server."
          },
          "networkTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Network timeout (seconds) - Time in seconds the network times out"
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the cipher suites supported by the server are stated, in order for you select the level of\r\nsecurity that suits your needs and enables communicating with others who might have different security\r\nrequirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "protocolTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Protocol timeout (seconds) - Time in seconds the protocol times out."
          },
          "serverTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Server timeout (seconds) - Controls how long the server waits after receiving a file to see if the\r\nclient is going to be sending another file on the same session. Setting this too low may cause abort\r\nerrors on the client side. Setting this too high may cause tread pool depletion on the trading engine\r\nside."
          },
          "shouldSubmitCertificate" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Used for hiding the SSL server certificate URI; true if the entity was newly persisted and false otherwise"
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must\r\nsupport SSL and a certificate in a profile must be designated as the SSL certificate. If this option is\r\nset to <code>false</code>, connections are not encrypted."
          },
          "transferTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Transfer timeout - server mode (seconds) - Time in seconds a transfer times out."
          }
        }
      } ],
      "description" : ""
    },
    "json_TestIndicator_idoc" : {
      "type" : "string",
      "title" : "TestIndicator",
      "description" : "",
      "enum" : [ "YES", "NO" ]
    },
    "json_AS4HttpConsumerExchangePointBean" : {
      "title" : "AS4HttpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "mpcOverride" : {
            "type" : "string",
            "description" : "MPC value to override the MPC defined in the AS4 Delivery Exchange."
          },
          "deliveryId" : {
            "type" : "string",
            "description" : "The ID of the AS4 Delivery Exchange to poll."
          },
          "partnerId" : {
            "type" : "string",
            "description" : "The ID of the Partner owning the AS4 Delivery Exchange to poll. This is a read-only field."
          },
          "mpc" : {
            "type" : "string",
            "description" : "MPC of the AS4 Delivery Exchange to poll. This is a read-only field."
          },
          "shouldParseMetadataFromHeader" : {
            "type" : "boolean",
            "description" : "Parse SOAP headers into message metadata - Select this option if you want to SOAP headers to be carried as\r\nmetadata attributes with the message."
          },
          "xpaths" : {
            "type" : "array",
            "description" : "If shouldParseMetadataFromHeader is selected, enter the XPath expressions to resolve the header.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "shouldIntegrateBody" : {
            "type" : "boolean",
            "description" : "Process SOAP Body - Select this option to process the contents of the SOAP body."
          },
          "shouldIntegrateAttachments" : {
            "type" : "boolean",
            "description" : "Process Attachments - Select this option to process the attachments of the SOAP message."
          },
          "groupAttachments" : {
            "type" : "boolean",
            "description" : "Group Attachments - Select this option to enable the consumed message to be split into parent and dependent\r\nchild messages."
          },
          "generateReceipt" : {
            "type" : "boolean",
            "description" : "Generate receipt."
          }
        }
      } ],
      "description" : ""
    },
    "json_DocumentAgreementOutputAgreementBean" : {
      "type" : "object",
      "properties" : {
        "senderId" : {
          "type" : "string",
          "description" : "The ID of the sender partner or null for [ANY]."
        },
        "receiverId" : {
          "type" : "string",
          "description" : "The ID of the receiver partner for the outbound agreement or null for [ANY]."
        },
        "agreementId" : {
          "type" : "string",
          "description" : "The ID of the outbound agreement to be used for enveloping."
        },
        "overrideTransportReceiver" : {
          "type" : "boolean",
          "description" : "Set this to <b>true</b> in order to use an alternate delivery partner."
        },
        "transportReceiverId" : {
          "type" : "string",
          "description" : "The partner to be used as alternate delivery partner."
        },
        "transportReceiverRoutingId" : {
          "type" : "string",
          "description" : "Routing ID belonging to the alternate delivery partner to be used."
        },
        "deliveryExchangeId" : {
          "type" : "string",
          "description" : "Delivery belonging to the alternate delivery partner to be used. This must be a complete and enabled partner delivery."
        }
      },
      "title" : "DocumentAgreementOutputAgreementBean",
      "description" : ""
    },
    "json_PesitRecordFormat" : {
      "type" : "string",
      "title" : "PesitRecordFormat",
      "description" : "",
      "enum" : [ "FIXED", "VARIABLE" ]
    },
    "xml_ns0_fieldStyle" : {
      "type" : "string",
      "title" : "fieldStyle",
      "description" : "",
      "enum" : [ "MULTISELECT", "SINGLESELECT", "FREETEXT" ]
    },
    "xml_ns0_networkSettingsBean" : {
      "title" : "networkSettingsBean",
      "allOf" : [ { } ],
      "description" : ""
    },
    "xml_ns0_agreementBean" : {
      "title" : "agreementBean",
      "allOf" : [ {
        "properties" : {
          "communityId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Community this agreement is linked to"
          },
          "communityRoutingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If the community has multiple routing IDs, you must supply a routing ID"
          },
          "enabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns if this agreement is enabled."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Agreement identifier"
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Agreement name"
          },
          "receiverId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Receiving partner"
          },
          "receiverMessagingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Receiving partner's message routing ID </br> When null messagingId, routingId will be [ALL] for\r\ninbound, [DEFAULT] for outbound"
          },
          "senderId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Sending partner"
          },
          "senderMessagingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Sending partner's message routing ID"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_MapType" : {
      "title" : "MapType",
      "allOf" : [ { } ],
      "description" : ""
    },
    "json_OftpV2ServerExchangePointBean" : {
      "title" : "OftpV2ServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_OftpServerExchangePointBean"
      }, {
        "properties" : {
          "requiresSecureAuthentication" : {
            "type" : "boolean",
            "description" : "For OFTP V2 only, this is an extra layer of security to enable senders and receivers to validate each other as\r\ngenuine. There are two requirements to enable secure OFTP authentication\r\n<ul></><li>Both the sender and receiver must enable secure OFTP authentication. If one party turns it on and the\r\nother party does not, a protocol error is generated and the session between the parties is disconnected.</li>\r\n<li>Both the sender and receiver must be using certificates. These are the normal certificates used by a\r\ncommunity and its partners to securely exchange messages. These are not TLS certificates, which are\r\nadditional certificates needed if TLS is configured for a delivery exchange.</li><ul>\r\n<p/>\r\nThis is how the authentication works:\r\n<ol><li>The initiator of the connection uses the partner's public\r\nkey to encrypt and send a short, random message to the partner.</li>\r\n<li>The partner decrypts the message with its private key and sends the message back.</li>\r\n<li>The initiator compares the response to the original message. If the messages match, the initiator has\r\nauthenticated the partner.</li>\r\n<li>The partner repeats the process to validate the initiator.</li></ol>"
          }
        }
      } ],
      "description" : ""
    },
    "json_SshServerAuthenticationMode" : {
      "type" : "string",
      "title" : "SshServerAuthenticationMode",
      "description" : "",
      "enum" : [ "PASSWORD_AUTHENTICATION", "PUBLIC_KEY_AUTHENTICATION", "BOTH_PUBLIC_KEY_PASSWORD_AUTHENTICATION", "EITHER_PUBLIC_KEY_PASSWORD_AUTHENTICATION" ]
    },
    "xml_ns0_ftpDuplicateFileNameMode" : {
      "type" : "string",
      "title" : "ftpDuplicateFileNameMode",
      "description" : "",
      "enum" : [ "OVERWRITE", "AUTO_GENERATE", "CUSTOM_GENERATE", "APPEND" ]
    },
    "json_MetadataProfileOutputApplicationBean" : {
      "title" : "MetadataProfileOutputApplicationBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MetadataProfileOutputBean"
      }, {
        "properties" : {
          "communityId" : {
            "type" : "string",
            "description" : ""
          },
          "communityRoutingId" : {
            "type" : "string",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_inHouseAgreementBean" : {
      "title" : "inHouseAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_agreementBean"
      }, {
        "properties" : {
          "receiverIdentification" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The receiver partner's messaging ID. </br> This is a read-only field."
          },
          "senderIdentification" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The sender partner's messaging ID. </br> This is a read-only field."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_popAuthenticationType" : {
      "type" : "string",
      "title" : "popAuthenticationType",
      "description" : "",
      "enum" : [ "USER_PASS", "APOP" ]
    },
    "json_EdifactOutboundAgreementBean" : {
      "title" : "EdifactOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_EdifactAgreementBean"
      }, {
        "properties" : {
          "controlReferenceGenerator" : {
            "type" : "string",
            "description" : "This value describes how a unique ID is generated, in order to identify each transmission."
          },
          "forceGenerateUNA" : {
            "type" : "boolean",
            "description" : "Specify whether the UNA segment is added to the envelope."
          },
          "requestAcks" : {
            "type" : "boolean",
            "description" : "Specify whether acknowledgments for messages are requested."
          },
          "ackTimeout" : {
            "type" : "string",
            "description" : "The time limit in hours and minutes to wait for receipt of acknowledgments. The 24-hour format is\r\n<code>HH:MM</code>."
          },
          "acceptGroups" : {
            "type" : "boolean",
            "description" : "Specify whether group segments are accepted."
          },
          "groupTimeout" : {
            "type" : "string",
            "description" : "The time limit in hours and minutes before groups time out (when group segments are accepted). The\r\n24-hour format is <code>HH:MM</code>."
          },
          "groupTimeoutAction" : {
            "description" : "The action to perform if group messages are missing (when group segments are accepted). The available\r\noptions are:\r\n<ul>\r\n<li>SEND_AND_WARN</li>\r\n<li>SEND</li>\r\n<li>STOP</li>\r\n</ul>",
            "$ref" : "#/definitions/json_GroupTimeoutActionType"
          },
          "useDefaultSyntax" : {
            "type" : "boolean",
            "description" : "Specify whether the default values of the version displayed in the syntax version field are used.\r\nAlternatively, custom values in decimal or hex code format can be provided for the following fields:\r\n<ul>\r\n<li>componentElementSeparator</li>\r\n<li>elementSeparator</li>\r\n<li>decimalMark</li>\r\n<li>releaseChar</li>\r\n<li>segmentSeparator</li>\r\n</ul>"
          },
          "componentElementSeparator" : {
            "type" : "string",
            "description" : "The component element separator value matching the EDIFACT document. It can be either a character or a\r\nhex value with the <code>\\H</code> prefix."
          },
          "elementSeparator" : {
            "type" : "string",
            "description" : "The element separator value matching the EDIFACT document. It can be either a character or a hex value\r\nwith the <code>\\H</code> prefix."
          },
          "decimalMark" : {
            "type" : "string",
            "description" : "The decimal mark value matching the EDIFACT document. It can be either a character or a hex value with\r\nthe <code>\\H</code> prefix."
          },
          "releaseChar" : {
            "type" : "string",
            "description" : "The release character value matching the EDIFACT document. It can be either a character or a hex value\r\nwith the <code>\\H</code> prefix."
          },
          "segmentSeparator" : {
            "type" : "string",
            "description" : "The segment separator value matching the EDIFACT document. It can be either a character or a hex value\r\nwith the <code>\\H</code> prefix."
          },
          "repeatingElementSeparator" : {
            "type" : "string",
            "description" : "The repeating element separator matching the EDIFACT document. It can be either a character or a hex\r\nvalue with the <code>\\H</code> prefix."
          },
          "maxNumbDocs" : {
            "type" : "number",
            "description" : "The largest number of documents the envelope can contain."
          },
          "envelopeTimeout" : {
            "type" : "string",
            "description" : "The envelope timeout in hours and minutes. The 24-hour format is <code>HH:MM</code>."
          },
          "recipientRefPassword" : {
            "type" : "string",
            "description" : "The receiver's password (S005 0022)."
          },
          "recipientRefPasswordQualifier" : {
            "description" : "The qualifier for the receiver's password or reference (S005 0025). The use of the qualifier is\r\nspecified in the partners' interchange agreement.",
            "$ref" : "#/definitions/json_RecipientRefPasswordQualifier"
          },
          "processingPriorityCode" : {
            "type" : "string",
            "description" : "A code used to request a processing priority for the interchange (0029). The code is specified in the\r\nparties' interchange agreement."
          },
          "documentControlNumberGenerator" : {
            "type" : "string",
            "description" : "This value describes how to generate the message reference number (0062 generator)."
          },
          "serviceCodeDirNumber" : {
            "type" : "number",
            "description" : "The version of the service code list directory to use to define encoded EDIFACT values (S001 0080)."
          },
          "serviceCodeDirNumberString" : {
            "type" : "string",
            "description" : "The version of the service code list directory to use to define encoded EDIFACT values (S001 0080)."
          },
          "charEncodingCoded" : {
            "description" : "The coded identification of the character encoding used in the interchange (S001 0133). The available\r\noptions are:\r\n<ul>\r\n<li>1 - ASCII 7 bit</li>\r\n<li>2 - ASCII 8 bit</li>\r\n<li>3 - Code page 500 (EBCDIC Multinational No. 5)</li>\r\n<li>4 - Code page 850 (IBM PC Multinational)</li>\r\n<li>5 - UCS-2</li>\r\n<li>6 - UCS-4</li>\r\n<li>7 - UTF-8</li>\r\n<li>8 - UTF-16</li>\r\n<li>ZZZ - Mutually agreed between trading partners</li>\r\n</ul>",
            "$ref" : "#/definitions/json_CharEncodingCoded"
          }
        }
      } ],
      "description" : ""
    },
    "json_CollectionResult" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "count" : {
          "type" : "number",
          "description" : ""
        }
      },
      "title" : "CollectionResult",
      "description" : "Used by factories to return the result of a collection to the API server.  The results should respect the pagination\r\nvalues passed to it, but also should return the <strong>ENTIRE</strong> count of the results.  For example, if a\r\nrequest is called to get all remote parties, the limit of the returned response might be 10 results in the collection\r\nbut there may be 5000 total remote parties.  The count value is necessary to clients such as a UI to build there\r\npage bar."
    },
    "json_HttpB2biProducerExchangePointBean" : {
      "title" : "HttpB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_idocDocumentAgreementBean" : {
      "title" : "idocDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementBean"
      }, {
        "properties" : {
          "ediMessageType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "IDOC control record field representing the EDI message type."
          },
          "messageType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "IDOC control record field that sets the logical message type. Represents the business meaning of the message."
          },
          "typeExtended" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "IDOC control record field representing the name of the extension type."
          },
          "useEdiMessageType" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want to use this document agreement only on a specific EDI message type."
          },
          "useMessageType" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want to use this document agreement only on a specific message type."
          },
          "useTypeExtended" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you want to use this document agreement only on a specific type extended."
          }
        }
      } ],
      "description" : ""
    },
    "json_ProducerExchangePointBean" : {
      "title" : "ProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ExchangePointBean"
      }, {
        "properties" : {
          "retries" : {
            "type" : "number",
            "description" : "This is the number of times the trading engine will retry connecting to the partner&#39;s transport if the\r\ninitial attempt to connect and send the message failed. The following are common reasons for triggering\r\nretries. The connection attempt failed immediately for a reason such as host not found.\r\n<ul>\r\n<li>The connection attempt failed immediately for a reason such as host not found.</li>\r\n<li>The host was found, but the connection process took longer than the connect timeout interval specified.</li>\r\n<li>The connection was successful, but the partner&#39;s HTTP server took longer than the response timeout\r\ninterval to return a 200 OK response indicating the message was successfully received.</li>\r\n</ul>"
          },
          "postProcessingScript" : {
            "type" : "string",
            "description" : "The full path to an executable file that contains post-processing commands. This field is available for\r\ncommunity integration delivery exchanges and partner trading delivery exchanges."
          },
          "holdMessagesForPickup" : {
            "type" : "boolean",
            "description" : "Get if all outbound messages sent over this exchange are held for remote pickup. Applies for the moment\r\nonly for PeSIT exchange point. The default value is set to <code>false</code>."
          },
          "useCustomRetryIntervals" : {
            "type" : "boolean",
            "description" : "Specifies if a customized retry schedule should be used."
          },
          "customRetryIntervals" : {
            "type" : "string",
            "description" : "Interval delays on each subsequent retry expressed in minutes. Example: 5,10,15,30,60."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_customB2biProducerExchangePointBean" : {
      "title" : "customB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biProducerExchangePointBean"
      }, {
        "properties" : {
          "customComponentId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The id of the processing step to handle the processing for this custom delivery."
          }
        }
      } ],
      "description" : ""
    },
    "json_HttpProducerExchangePointBean" : {
      "title" : "HttpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating\r\nthe connection."
          },
          "enableRestarts" : {
            "type" : "boolean",
            "description" : "Specify whether checkpoint-restart is enabled. A checkpoint is information saved to disk that is a\r\nrecovery point in the event of a transport failure.\r\n<p/>\r\nThe restart program uses the last saved checkpoint and\r\nstarts again, ensuring no loss of data. To reduce unnecessary overhead when processing small files,\r\ncheckpoint files are only created for messages that are at least 100 KB in size."
          },
          "enableChunking" : {
            "type" : "boolean",
            "description" : "Specify whether chunking messages is enabled. A chunked message is a large message broken into smaller\r\npieces for sending to a partner over the Internet or to back-end integration.\r\n<p/>\r\nAlthough primarily used for handling large messages, chunking can also be enabled for small messages.\r\nYou should perform tests to determine whether a partner's server can handle chunked messages."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits for a connection to the delivery exchange before the attempt times out.\r\n<p/>\r\nAlthough the default value is 30 seconds, this may be longer than the interval allowed by your operating\r\nsystem. For example, Windows XP by default allows a maximum timeout of 20 seconds. The actual connect timeout\r\ninterval is the lesser of the operating system timeout and the value set in the trading engine."
          },
          "responseTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits for the delivery exchange to respond to a request\r\nbefore terminating the connection."
          },
          "enable102Processing" : {
            "type" : "boolean",
            "description" : "Specify whether 102-processing is enabled. If this option is set to <code>true</code>, it is ensured that the\r\nconnection between the client and server does not become idle and fail while message processing is in progress.\r\n<p/>\r\nFor example, this makes sure the connection remains active when the client is sending a multi-gigabyte message.\r\nMost often this setting is useful when the client requests a synchronous receipt, but is also\r\nrecommended in some cases for an asynchronous receipt.\r\nBefore selecting this option, make sure the server supports 102 responses."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires the signing of messages using a message digest\r\nalgorithm. The choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Specify whether the cipher suites supported by the server are stated, to enable communication with\r\npartners who might have different security requirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "usernamePasswordCredentials" : {
            "description" : "User name and password to connect to the server.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "proxy" : {
            "description" : "Specify whether you must pass through a proxy to reach the delivery exchange server. For partner exchanges,\r\nthe proxy is located between the trading engine and the partner's HTTP server.",
            "$ref" : "#/definitions/json_HttpProxyBean"
          },
          "enableHostNameVerification" : {
            "type" : "boolean",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_x25ClientNetworkSettingsBean" : {
      "title" : "x25ClientNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_x25NetworkSettingsBean"
      }, {
        "properties" : {
          "callUserData" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Custom data to send to the partner along with the call establishment request.\r\nThe data is only meaningful for the remote party. It is usually used to distinguish\r\nbetween calls that are addressed to the same NUA."
          },
          "protocolId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Custom data to send to the partner along with the call establishment request.\r\nThe data is only meaningful for the remote party. It is usually used to distinguish\r\nbetween calls that are addressed to the same NUA."
          },
          "remoteNUA" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The network user address of the remote partner’s server to connect to (OFTP V1 X.25 only)"
          },
          "reverseCharging" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "When true, and when supported by the carrier and accepted by the partner upon call establishment,\r\nthe called party is charged for the call instead of the caller (OFTP V1 X.25 only)"
          }
        }
      } ],
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "json_Hl7v2AgreementBean" : {
      "title" : "Hl7v2AgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, {
        "properties" : {
          "senderApplicationNamespaceId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the namespace ID (IS) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "senderApplicationUniversalId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID (ST) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "senderApplicationUniversalIdType" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID type (ID) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "senderFacilityNamespaceId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the namespace ID (IS) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n</br> This is a read-only field."
          },
          "senderFacilityUniversalId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID (ST) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n</br> This is a read-only field."
          },
          "senderFacilityUniversalIdType" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID type (ID) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n</br> This is a read-only field."
          },
          "receiverApplicationNamespaceId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the namespace ID (IS) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "receiverApplicationUniversalId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID (ST) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "receiverApplicationUniversalIdType" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID type (ID) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "receiverFacilityNamespaceId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the namespace ID (IS) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined\r\n</br> This is a read-only field."
          },
          "receiverFacilityUniversalId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID (ST) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined\r\n</br> This is a read-only field."
          },
          "receiverFacilityUniversalIdType" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID type (ID) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined\r\n</br> This is a read-only field."
          },
          "processingId" : {
            "description" : "Field used to filter messages to be handled by this agreement.</br>\r\nProcessing ID options:\r\n<ul>\r\n<li><b>P</b> Production</li>\r\n<li><b>D</b> Debugging</li>\r\n<li><b>T</b> Training</li>\r\n</ul>",
            "$ref" : "#/definitions/json_Processing"
          },
          "processingMode" : {
            "description" : "Field used to filter messages to be handled by this agreement.</br>\r\nProcessing mode options:\r\n<ul>\r\n<li><b>T</b> Current processing, transmitted at intervals</li>\r\n<li><b>A</b> Archive</li>\r\n<li><b>R</b> Restore from archive</li>\r\n<li><b>I</b> Initial load</li>\r\n</ul>",
            "$ref" : "#/definitions/json_ProcessingMode"
          },
          "characterSet" : {
            "description" : "Field used to filter messages to be handled by this agreement.</br>\r\nCharacter set options:\r\n<ul>\r\n<li><b>blank</b> (any)</li>\r\n<li><b>ASCII</b></li>\r\n<li><b>ISO 8859-1</b> ISO/IEC Part 1 - Latin - 1 Western European</li>\r\n<li><b>ISO 8859-2</b> ISO/IEC Part 2 - Latin - 2 Central European</li>\r\n<li><b>ISO 8859-3</b> ISO/IEC Part 3 - Latin - 3 South European</li>\r\n<li><b>ISO 8859-4</b> ISO/IEC Part 4 - Latin - 4 North European</li>\r\n<li><b>ISO 8859-5</b> ISO/IEC Part 5 - Latin/Cyrillic</li>\r\n<li><b>ISO 8859-6</b> ISO/IEC Part 6 - Latin/Arabic</li>\r\n<li><b>ISO 8859-7</b> ISO/IEC Part 7 - Latin/Greek</li>\r\n<li><b>ISO 8859-8</b> ISO/IEC Part 8 - Latin/Hebrew</li>\r\n<li><b>ISO 8859-9</b> ISO/IEC Part 9 - Latin - 5 Turkish</li>\r\n<li><b>ISO 8859-15</b> ISO/IEC Part 15 - Latin - 9 Western European</li>\r\n<li><b>ISO IR14</b> Code for Information exchange</li>\r\n<li><b>ISO IR87</b> Japanese Graphic Character set</li>\r\n<li><b>ISO IR159</b> Supplementary Graphic Character set</li>\r\n</ul>",
            "$ref" : "#/definitions/json_CharacterSet"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_x12TestIndicator" : {
      "type" : "string",
      "title" : "x12TestIndicator",
      "description" : "",
      "enum" : [ "P", "T", "I" ]
    },
    "xml_ns0_certificateUsage" : {
      "type" : "string",
      "title" : "certificateUsage",
      "description" : "",
      "enum" : [ "ENCRYPTION", "VERIFICATION", "ANY", "OTHER", "NON_REPUDIATION", "DIGITAL_SIGNATURE" ]
    },
    "xml_ns0_immutableConsumerExchangePointBean" : {
      "title" : "immutableConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_consumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_compareOperator" : {
      "type" : "string",
      "title" : "compareOperator",
      "description" : "",
      "enum" : [ "EQUALS", "NOT_EQUALS", "LESS_THAN", "LESS_THAN_EQUALS", "GREATER_THAN", "STARTS_WITH", "ENDS_WITH", "CONTAINS", "GREATER_THAN_EQUALS" ]
    },
    "json_X12TestIndicator" : {
      "type" : "string",
      "title" : "X12TestIndicator",
      "description" : "",
      "enum" : [ "P", "T", "I" ]
    },
    "xml_ns0_metadataTemplateConsumptionPropertiesBean" : {
      "title" : "metadataTemplateConsumptionPropertiesBean",
      "allOf" : [ {
        "properties" : {
          "defaultMetadataTemplate" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A reference to a metadata template in the system, that is applied when a message is received. If the\r\nmetadata template isn't anymore in the system, we just log a warn a message."
          },
          "enabledByProtocol" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Indicates if the exchange point supports metadata template passed through the protocol."
          },
          "metadataTemplatePolicy" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "This option is available only for OFTP and PeSIT exchanges. You can specify the template name in the file name of the message\r\nsubmitted by the sender or by the setting <i>defaultMetadataTemplate</i> property</br>\r\nIndicates the way to deal with metadata template, it allows 3 values :\r\n<ul>\r\n<li><b>always</b> : Apply MMT provided by protocol. If unknown, the transfer is refused.</li>\r\n<li><b>ifKnown</b> : Apply MMT provided by protocol if it is known, else apply the default MMT (if set).</li>\r\n<li><b>never</b> : Ignore the MMT provided by the protocol. Always apply the default MMT (if set).</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_metadataTemplatePolicy"
          },
          "priorityOverFixedAttributes" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Indicates if the metadata template has priority than the fixed message attributes. In case the metadata\r\ntemplate has priority then we first apply the metadata defined in the message attributes then we apply the\r\nmetadata template ones (if there's a conflict between the same metadata, the metadata template one\r\nwins) and vice versa."
          }
        }
      }, { } ],
      "description" : "Settings to attach meta-data to the messages the trading engine picks up from applications or receives from partner"
    },
    "xml_ns0_metadataProfileOutputBean" : {
      "title" : "metadataProfileOutputBean",
      "allOf" : [ {
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "outboundAgreements" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_metadataOutboundAgreementBean"
          },
          "useOutboundAgreement" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_AddressingRulesBean" : {
      "type" : "object",
      "properties" : {
        "fromAddress" : {
          "description" : "Used to configure how the system determines who is sending the message.",
          "$ref" : "#/definitions/json_AddressingRuleBean"
        },
        "toAddress" : {
          "description" : "Used to configure how the system determines to whom the message is being sent",
          "$ref" : "#/definitions/json_AddressingRuleBean"
        }
      },
      "title" : "AddressingRulesBean",
      "description" : "Used to configure how the system determines who is sending/receiving the message."
    },
    "json_IdocMessagingIdBean" : {
      "title" : "IdocMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MessagingIdBean"
      }, {
        "properties" : {
          "partnerNumber" : {
            "type" : "string",
            "description" : "The partner number of the sender (SNDPRN) or the receiver (RCVPRN)"
          },
          "partnerPort" : {
            "type" : "string",
            "description" : "The port of the sender (SNDPOR) or the receiver (RCVPOR)"
          },
          "partnerType" : {
            "type" : "string",
            "description" : "The partner type of the sender (SNDPRT) or the receiver (RCVPRT)"
          }
        }
      } ],
      "description" : ""
    },
    "json_ProcessingErrorException" : {
      "title" : "ProcessingErrorException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ApiException"
      }, { } ],
      "description" : "Exception that maps to HTTP 500 return code"
    },
    "xml_ns0_metadataDocumentServiceBean" : {
      "title" : "metadataDocumentServiceBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentServiceBean"
      }, { } ],
      "description" : ""
    },
    "json_EdifactAgreementBean" : {
      "title" : "EdifactAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, {
        "properties" : {
          "partnerIdSender" : {
            "type" : "string",
            "description" : "The interchange sender's identification (S002 0004). This is a read-only field."
          },
          "partnerIdReceiver" : {
            "type" : "string",
            "description" : "The interchange recipient's identification (S003 0010). This is a read-only field."
          },
          "idCodeQualifierSender" : {
            "type" : "string",
            "description" : "The interchange sender's partner identification code qualifier (S002 0007). This is a read-only field."
          },
          "idCodeQualifierReceiver" : {
            "type" : "string",
            "description" : "The interchange recipient's partner identification code qualifier (S003 0007). This is a read-only field."
          },
          "partnerIdInternalIdSender" : {
            "type" : "string",
            "description" : "The interchange sender's address for reverse routing (S002 0008). This is a read-only field."
          },
          "partnerIdInternalIdReceiver" : {
            "type" : "string",
            "description" : "The interchange recipient's routing address (S003 0014). This is a read-only field."
          },
          "partnerIdIntSubSender" : {
            "type" : "string",
            "description" : "The interchange sender's interchange sender internal sub-identification (S002 0042). This is a read-only field."
          },
          "partnerIdIntSubReceiver" : {
            "type" : "string",
            "description" : "The interchange recipient's interchange recipient internal sub-identification (S003 0046). This is a read-only field."
          },
          "syntaxGroup" : {
            "description" : "The appropriate syntax to use for messages.",
            "$ref" : "#/definitions/json_EdifactSyntaxGroup"
          },
          "syntaxVersion" : {
            "description" : "The EDIFACT syntax version (S001 0002).",
            "$ref" : "#/definitions/json_EdifactSyntaxVersion"
          },
          "syntaxIdentifier" : {
            "type" : "string",
            "description" : "The agency controlling the syntax and the character repertoire used in an interchange (S001 0001).\r\nEach identity consists of the letters <code>UN</code> followed by two letters identifying the character repertoire."
          },
          "applicationReference" : {
            "type" : "string",
            "description" : "The application on the receiver's network to which the interchange is directed (0026).\r\nFor example, a value of <code>%IN%</code> indicates the CONTRL message should use the value of the application\r\nreference of the incoming interchange."
          },
          "communicationsAgreementId" : {
            "type" : "string",
            "description" : "Any communications agreements that control the exchange of data (0032)."
          },
          "testIndicator" : {
            "description" : "Indicates that the structural level containing the test indicator is a test (0035).",
            "$ref" : "#/definitions/json_TestIndicator"
          },
          "useFunctionalGroups" : {
            "type" : "boolean",
            "description" : "When one or more transaction sets are received from a trading partner in an interchange, the transaction sets may\r\nbe grouped in functional groups within the envelope. Transactions sets that are grouped together are identified\r\nby the same functional group ID. Within the inbound agreement, you can add functional group agreements to specify\r\nthe valid functional group IDs to be verified for exchanges that may be performed between the selected trading\r\npartners."
          },
          "groupAgreements" : {
            "type" : "string",
            "description" : "List with all functional groups for current agreement"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_ftpType" : {
      "type" : "string",
      "title" : "ftpType",
      "description" : "",
      "enum" : [ "ASCII_AUTO_LF", "ASCII_CR_LF", "ASCII_CR_ONLY", "BINARY" ]
    },
    "xml_ns0_ftpB2biConsumerExchangePointBean" : {
      "title" : "ftpB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_mqSegmentationType" : {
      "type" : "string",
      "title" : "mqSegmentationType",
      "description" : "",
      "enum" : [ "MQ", "APPLICATION" ]
    },
    "xml_ns0_x12ProcessingMode" : {
      "type" : "string",
      "title" : "x12ProcessingMode",
      "description" : "User: cfistrate",
      "enum" : [ "GS_ONLY_MODE", "ISA_AND_GS_MODE" ]
    },
    "json_X25NetworkSettingsBean" : {
      "title" : "X25NetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_NetworkSettingsBean"
      }, {
        "properties" : {
          "windowSize" : {
            "type" : "number",
            "description" : "The number of X.25 packets that can be sent without acknowledgment.\r\nIf the value is blank the network’s default value is used."
          },
          "packetSize" : {
            "type" : "number",
            "description" : "The size of the X.25 packet. If the value is blank the network’s default value is used."
          },
          "brickId" : {
            "type" : "number",
            "description" : "Reference to an existing router"
          }
        }
      } ],
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "xml_ns0_edifactSyntaxGroup" : {
      "type" : "string",
      "title" : "edifactSyntaxGroup",
      "description" : "",
      "enum" : [ "SYNTAX_GROUP_3", "SYNTAX_GROUP_4" ]
    },
    "json_Hl7v2OutboundAgreementBean" : {
      "title" : "Hl7v2OutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_Hl7v2AgreementBean"
      }, {
        "properties" : {
          "useAcceptAck" : {
            "type" : "boolean",
            "description" : "Select this option if you want the receiving application to send an acknowledgement code to indicate\r\nthe receipt of the message."
          },
          "ackTimeout" : {
            "type" : "string",
            "description" : "If <b>useAcceptAck</b> is set to true, enter a timeout limit to how B2Bi will wait for the accept\r\nacknowledgement."
          },
          "security" : {
            "type" : "string",
            "description" : "<b>MSH-0008</b> field is an optional field used to implement security features. If this exchange\r\nagreement requires specific security, enter the MSH-00008 code in this field."
          },
          "useNonDefaultSeparators" : {
            "type" : "boolean",
            "description" : "If the exchanges defined in this agreement use messages with non-default separators, specify the\r\nrequired separator characters in the following fields: </br>\r\n<ul>\r\n<li>Field separator</li>\r\n<li>Component separator</li>\r\n<li>Repetition character</li>\r\n<li>Escape character</li>\r\n<li>Sub-component separator</li>\r\n</ul>"
          },
          "fieldSeparator" : {
            "type" : "string",
            "description" : "Message field separator. Default value is |."
          },
          "componentSeparator" : {
            "type" : "string",
            "description" : "Message component separator. Default value is ^."
          },
          "repetitionCharacter" : {
            "type" : "string",
            "description" : "Message repetition character separator. Default value is ~."
          },
          "escapeCharacter" : {
            "type" : "string",
            "description" : "Message escape character separator. Default value is \\."
          },
          "subComponentSeparator" : {
            "type" : "string",
            "description" : "Message sub component separator. Default value is &."
          },
          "messageControlIdGenerator" : {
            "type" : "string",
            "description" : "Generator identifier set for message control counter. Default value is $MsgId:9$."
          },
          "sequenceNumberGenerator" : {
            "type" : "string",
            "description" : "Sequence number generator. Default value is $SeqId:9$."
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The country code for the specified HL7v2 agreement. The format is [ISO code]. For a list of codes see\r\nthe Website for ISO (International Organization for Standardization): <a\r\nhref=\"http://www.iso.org/iso/home.html\">http://www.iso.org/iso/home.html</a>."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_x12IndustryIdentifier" : {
      "type" : "string",
      "title" : "x12IndustryIdentifier",
      "description" : "",
      "enum" : [ "X", "T" ]
    },
    "json_SslCipherSuite" : {
      "type" : "string",
      "title" : "SslCipherSuite",
      "description" : "",
      "enum" : [ "SSL_RSA_EXPORT1024_WITH_DES_CBC_SHA", "SSL_RSA_EXPORT1024_WITH_RC4_56_SHA", "SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", "SSL_RSA_EXPORT_WITH_RC4_40_MD5", "SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA", "SSL_RSA_WITH_3DES_EDE_CBC_SHA", "SSL_RSA_WITH_AES_128_CBC_SHA", "SSL_RSA_WITH_AES_256_CBC_SHA", "SSL_RSA_WITH_DES_CBC_SHA", "SSL_RSA_WITH_NULL_MD5", "SSL_RSA_WITH_NULL_SHA", "SSL_RSA_WITH_RC4_128_MD5", "SSL_RSA_WITH_RC4_128_SHA" ]
    },
    "json_ProtocolVersion" : {
      "type" : "string",
      "title" : "ProtocolVersion",
      "description" : "",
      "enum" : [ "VERSION_1_3", "VERSION_1_4", "VERSION_2_0" ]
    },
    "json_MessageType" : {
      "type" : "string",
      "title" : "MessageType",
      "description" : "",
      "enum" : [ "BYTES", "TEXT" ]
    },
    "json_ObjectNotFoundException" : {
      "title" : "ObjectNotFoundException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ApiException"
      }, { } ],
      "description" : "Exception that maps to HTTP 404 return code"
    },
    "xml_ns0_oftpV2SharedProducerExchangePointBean" : {
      "title" : "oftpV2SharedProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_oftpSharedProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_EdifactOutboundFunctionalGroupBean" : {
      "title" : "EdifactOutboundFunctionalGroupBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_FunctionalGroupBean"
      }, {
        "properties" : {
          "functionalGroupId" : {
            "type" : "string",
            "description" : "(UNG 0038) Message group identification."
          },
          "senderApplicationId" : {
            "type" : "string",
            "description" : "(UNG 006 0040) Identifies the party sending the transmission. This code is agreed to by trading\r\npartners."
          },
          "senderCodeQualifier" : {
            "type" : "string",
            "description" : "(UNG 006 0007) Qualifier referring to the source of codes for the identifiers of interchanging\r\npartners."
          },
          "recipientApplicationId" : {
            "type" : "string",
            "description" : "(UNG 007 0044) Identifies the party receiving the transmission. This code is agreed by the trading\r\npartners."
          },
          "recipientCodeQualifier" : {
            "type" : "string",
            "description" : "(UNG 007 0007) Qualifier referring to the source of codes for the identifiers of interchanging\r\npartners."
          },
          "applicationPassword" : {
            "type" : "string",
            "description" : "(UNG 0058) Application password."
          },
          "controlNumberGenerator" : {
            "type" : "string",
            "description" : "This value describes how to generate the message reference number (0062 generator)."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_hl7v2MessagingIdBean" : {
      "title" : "hl7v2MessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_messagingIdBean"
      }, {
        "properties" : {
          "applicationNamespaceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the namespace ID (IS) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\nThis field uniquely identifies the namespace ID (IS) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\nThe network enterprise consists of all those applications that participate in the exchange of HL7 messages within the enterprise. Entirely site-defined."
          },
          "applicationUniversalId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID (ST) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\nThis field uniquely identifies the universal ID (ST) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\nThe network enterprise consists of all those applications that participate in the exchange of HL7 messages within the enterprise. Entirely site-defined."
          },
          "applicationUniversalIdType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID type (ID) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\nThis field uniquely identifies the universal ID type (ID) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\nThe network enterprise consists of all those applications that participate in the exchange of HL7 messages within the enterprise. Entirely site-defined."
          },
          "facilityNamespaceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the namespace ID (IS) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n<p/>\r\nThis field uniquely identifies the namespace ID (IS) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined"
          },
          "facilityUniversalId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID (ST) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n<p/>\r\nThis field uniquely identifies the universal ID (ST) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined"
          },
          "facilityUniversalIdType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID type (ID) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n<p/>\r\nThis field uniquely identifies the universal ID type (ID) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined"
          }
        }
      } ],
      "description" : ""
    },
    "json_Identifier" : {
      "type" : "string",
      "title" : "Identifier",
      "description" : "",
      "enum" : [ "ISA13", "GS06", "_0020", "_0062", "MSH00010", "MSH00013", "SNRF", "FIELD05", "FIELD06", "UNG0048", "LATEST_TRANSMISSION_NUMBER", "NEXT_INTERCHANGE_CONTROL", "NEXT_GROUP_CONTROL", "NEXT_EXPECTED_SEQUENCE_NUMBER" ]
    },
    "xml_ns0_pickupGroupBean" : {
      "title" : "pickupGroupBean",
      "allOf" : [ {
        "properties" : {
          "friendlyName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The friendly name of the pickup group."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique ID of the pickup group."
          },
          "status" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Returns the status of the pickup group: Allow or Block.",
            "$ref" : "#/definitions/xml_ns0_pickupGroupStatus"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_IdocAgreementBean" : {
      "title" : "IdocAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, {
        "properties" : {
          "partnerNumberSender" : {
            "type" : "string",
            "description" : "The partner number of the sender (SNDPRN). This is a read-only field."
          },
          "partnerNumberReceiver" : {
            "type" : "string",
            "description" : "The partner number of the receiver (RCVPRN). This is a read-only field."
          },
          "partnerPortSender" : {
            "type" : "string",
            "description" : "The port of the sender (SNDPOR). This is a read-only field."
          },
          "partnerPortReceiver" : {
            "type" : "string",
            "description" : "The port of the receiver (RCVPOR). This is a read-only field."
          },
          "partnerTypeSender" : {
            "type" : "string",
            "description" : "The partner type of the sender (SNDPRT). This is a read-only field."
          },
          "partnerTypeReceiver" : {
            "type" : "string",
            "description" : "The partner type of the receiver (RCVPRT). This is a read-only field."
          },
          "ediVersion" : {
            "type" : "string",
            "description" : "The EDI version. The maximum length of this field is 6."
          },
          "ediStandardFlag" : {
            "type" : "string",
            "description" : "The EDI standard flag. The maximum length of this field is 1."
          },
          "client" : {
            "type" : "string",
            "description" : "The IDOC client. The maximum length of this field is 3."
          },
          "testIndicator" : {
            "description" : "Specify if the Agreement is for testing or for production.",
            "$ref" : "#/definitions/json_TestIndicator_idoc"
          }
        }
      } ],
      "description" : ""
    },
    "json_OutOfSequenceActionType" : {
      "type" : "string",
      "title" : "OutOfSequenceActionType",
      "description" : "",
      "enum" : [ "WARN_AND_PROCESS", "FAIL_AND_PARK" ]
    },
    "json_GroupTimeFormatType" : {
      "type" : "string",
      "title" : "GroupTimeFormatType",
      "description" : "",
      "enum" : [ "HHMM", "HHMMSS", "HHMMSSD", "HHMMSSDD" ]
    },
    "xml_ns0_rejectionRuleType" : {
      "type" : "string",
      "title" : "rejectionRuleType",
      "description" : "",
      "enum" : [ "NONE", "ENTIRE_INTERCHANGE", "SAME_TYPE", "CUSTOM_TYPE" ]
    },
    "json_Response" : {
      "title" : "response",
      "allOf" : [ { } ],
      "description" : ""
    },
    "xml_ns0_vdaInboundAgreementBean" : {
      "title" : "vdaInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_vdaAgreementBean"
      }, {
        "properties" : {
          "oldTransactionNumberValid" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set to true to validate the latest document number (field 05 in the VDA header). Validation means that\r\nB2Bi will validate the number which is referenced in the incoming transmission against what B2Bi has\r\nstored internally as the last processed transmission for this partner (customer / supplier)\r\ncombination."
          },
          "useReceiverIdentification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies if \"Partner Code\" identification defined in the receiver�s VDA Messaging ID will be used for\r\ndetection / matching. The field cannot be modified."
          },
          "useReceiverVdaRole" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies if the receiver VDA role will be used for detection / matching. The field cannot be modified."
          },
          "useSenderIdentification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies if \"Partner Code\" identification defined in the sender�s VDA Messaging ID will be used for\r\ndetection / matching. The field cannot be modified."
          },
          "useSenderVdaRole" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies if the sender VDA role will be used for detection / matching. The field cannot be modified."
          }
        }
      } ],
      "description" : ""
    },
    "json_RoutingIdBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "type" : {
          "type" : "string",
          "description" : "The type of this Routing ID.\r\n<ul>\r\n<li>For ebXML traders only, enter an ebXML party ID type only if the routing ID you enter is not a URI.\r\n</li>\r\n<li>For cXML traders only, enter the matching cXML credential domain type</li>\r\n</ul>"
        },
        "routingId" : {
          "type" : "string",
          "description" : "The value of the Routing ID. A routing ID can be in any format or length (up to 255 characters),\r\nincluding standard EDI or custom formats that include special characters or spaces."
        }
      },
      "title" : "RoutingIdBean",
      "description" : ""
    },
    "json_ProcessingMode" : {
      "type" : "string",
      "title" : "ProcessingMode",
      "description" : "",
      "enum" : [ "A", "R", "I", "T" ]
    },
    "xml_ns0_smtpProducerExchangePointBean" : {
      "title" : "smtpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "List with cipher suites."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits for a connection to\t the delivery exchange before the attempt times out.\r\nThe default value is 30 seconds. <b>Required.</b>"
          },
          "emailAddress" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The email address for sending messages to a partner."
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "SSL authentication.  If we're acting as the client, true means we should verify that the\r\nhostname for the certificate given to us by the server matches the host we connected to.\r\nIf we're acting as the server, true means we require the client to present its\r\ncertificate (\"client authentication\")."
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The SMTP server for sending messages to the specified partner. You must provide a fully qualified domain name or IP\r\naddress for the server. If you leave this field blank, the system inserts its external SMTP server."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If <b>true</b>, a list of cipher suites should be provided."
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port used for sending messages to the specified partner. The default values is 25."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection.\r\n<b>Required.</b>"
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "client use ssl to connect to this server ?"
          },
          "useGlobalSmtp" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the system's external SMTP server is used to send messages to the partner.\r\nOtherwise, you can specify a different external SMTP server to send messages to the partner."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password to connect to the server. Usually, SMTP servers do not require user names and passwords for sending messages.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_inHouseOutboundAgreementBean" : {
      "title" : "inHouseOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_inHouseAgreementBean"
      }, {
        "properties" : {
          "enveloperId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the service to be used for enveloping outbound In-House documents."
          },
          "testFlag" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this field to true if the agreement is for testing and not for production."
          }
        }
      } ],
      "description" : ""
    },
    "json_ConfigurationBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : ""
        },
        "type" : {
          "type" : "string",
          "description" : ""
        },
        "description" : {
          "type" : "string",
          "description" : ""
        },
        "arguments" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "ConfigurationBean",
      "description" : ""
    },
    "json_EdifactSyntaxVersion" : {
      "type" : "string",
      "title" : "EdifactSyntaxVersion",
      "description" : "",
      "enum" : [ "VERSION_1", "VERSION_2", "VERSION_3", "VERSION_4", "VERSION_4_RELEASE_1" ]
    },
    "xml_ns0_functionalGroupBean" : {
      "title" : "functionalGroupBean",
      "allOf" : [ {
        "properties" : {
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Functional group identifier"
          },
          "name" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Functional group name"
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_x25NetworkSettingsBean" : {
      "title" : "x25NetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_networkSettingsBean"
      }, {
        "properties" : {
          "brickId" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Reference to an existing router"
          },
          "packetSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The size of the X.25 packet. If the value is blank the network’s default value is used."
          },
          "windowSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The number of X.25 packets that can be sent without acknowledgment.\r\nIf the value is blank the network’s default value is used."
          }
        }
      } ],
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "json_FtpServerExchangePointBean" : {
      "title" : "FtpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The local port used by the embedded FTP server to listen for incoming connections.\r\nThe default value is 4021 for the trading server and 5021 for the application server."
          },
          "subDirectories" : {
            "type" : "string",
            "description" : ""
          },
          "modifyFtpServerDirectory" : {
            "type" : "boolean",
            "description" : "Enable subdirectory management on the client side."
          },
          "sequenced" : {
            "type" : "boolean",
            "description" : "Specify whether all messages that are consumed by this pickup should be delivered in their original\r\nconsumption order.\r\n<p/>\r\nIn B2Bi message-handling, sequential delivery is the ability to deliver messages in the order they\r\nwere originally consumed on a specific pickup. This is sometimes referred to as first-in-first-out\r\n(FIFO) behavior.\r\n<p/>\r\nSequential message delivery is implemented only for trading engine pickups, not for integration\r\nengine pickups"
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds that B2Bi waits for missing messages of a sequence before taking the appropriate action.\r\nThis feature avoids the blocking of processing when a sequenced message is not available. Default value is of\r\n60 seconds."
          },
          "defaultUser" : {
            "description" : "The default ftp account used by the FTP embedded server.",
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_oftpV1ServerExchangePointBean" : {
      "title" : "oftpV1ServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_oftpServerExchangePointBean"
      }, {
        "properties" : {
          "useRFC2204" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "For OFTP V1 only when protocol version is 1.3, this check box tells the trading engine the protocol release level\r\n(SSIDLEV) to use for the trading partner. If this option is <code>true</code>, the partner uses the RFC 2204\r\nimplementation. This means the SSIDLEV field in the start session (SSID) command has a value of 1. Set this\r\noption to <code>false</code> if the partner uses the RFC 5024 implementation. This means the SSIDLEV field in the\r\nSSID command has a value of 2. Note that in either case the exchange point is being defined for OFTP protocol\r\nrevision level 1.3."
          }
        }
      } ],
      "description" : ""
    },
    "json_FileSystemB2biConsumerExchangePointBean" : {
      "title" : "FileSystemB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_httpConsumerExchangePointBean" : {
      "title" : "httpConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires the signing of messages using a message digest\r\nalgorithm. The choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm."
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits for a connection to the delivery exchange before the attempt times out.\r\nAlthough the default value is 30 seconds, this may be longer than the interval allowed by your operating system.\r\nFor example, Windows XP by default allows a maximum timeout of 20 seconds. The actual connect timeout interval\r\nis the lesser of the operating system timeout and the value set in the trading engine."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the cipher suites supported by the server are stated, in order for you select the level of\r\nsecurity that suits your needs and enables communicating with others who might have different security\r\nrequirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the connection."
          },
          "responseTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds the trading engine waits for the delivery exchange to respond to a request before terminating the\r\nconnection."
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          }
        }
      } ],
      "description" : ""
    },
    "json_PesitServerSettingsBean" : {
      "title" : "PesitServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerSettingsBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The port on which the embedded server listens for connection requests."
          },
          "bufferSize" : {
            "type" : "number",
            "description" : "Max data unit size in bytes (PI25) - The largest of chunk of data, in bytes, to be transferred at one\r\ntime. For high-speed networks, use the default 32700 bytes. This value is related to the client setting\r\nfor record length.\r\n<p/>\r\nThe value of this field must be the same or larger than the value of the record length field."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites. The default order in\r\nthe list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets\r\nLayer or Transport Layer Security. For example, an SSL or TLS protocol requires signing messages using\r\na message digest algorithm. But the choice of algorithm is determined by the particular cipher suite\r\nbeing used for the connection. Typically, you can select an MD5 or SHA digest algorithm.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "description" : "Connection timeout (seconds) - Time in seconds the trading engine waits for a connection to the delivery\r\nexchange before the attempt times out. Although the default value is 30 seconds, this may be longer\r\nthan the interval allowed by your operating system (OS). For example, Windows XP by default allows a\r\nmaximum timeout of 20 seconds. The actual connect timeout interval is the lesser of the OS timeout and\r\nthe value set in the trading engine."
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must\r\nsupport SSL and a certificate in a profile must be designated as the SSL certificate. If this option is\r\nset to <code>false</code>, connections are not encrypted."
          },
          "kbPerSyncPoint" : {
            "type" : "number",
            "description" : "Interval between sync points (Kbytes) - Each time an amount of data equal to this value has been sent,\r\nthe client is expected to ask the server to confirm whether data totaling this value has been received.\r\nThe server responds optionally with a confirmation. This represents a check point in the progress of a\r\nfile transfer. If a connection is lost before a file transfer has been completed, the transfer resumes,\r\nupon restart of the transport, at the point of the last successful check point.\r\n<p>\r\nThe default value is 1024 kilobytes (1 megabyte). Do not change this value unless advised by the\r\nadministrator of the component.\r\n</p>"
          },
          "maxOutstandingSyncPoints" : {
            "type" : "number",
            "description" : "Max outstanding sync points - This controls how many check point cycles the client waits for the\r\nserver to respond to a request to confirm file-transfer progress. For example, if the value of Kb per\r\nsync point (pacing) is 1024 (1 megabyte) and the value of this field is 1, the client stops sending\r\ndata after 1024 kilobytes unless the server responds, although the transfer remains active. If this\r\nvalue is 2, the client keeps sending until 2 megabytes (1024 x 2) of data are sent, and so on.\r\n<p>\r\nIf the client&#39;s value for this field is 0 (zero), the client does not ask the server to confirm at\r\nintervals the amount of data received. If the server&#39;s value for this field is 0, the server does not\r\nsend confirmations at intervals of data received.\r\n</p>\r\n<p>\r\nThe default value is 3. Do not change this value unless advised by the administrator of the component.\r\n</p>"
          },
          "maxThreads" : {
            "type" : "number",
            "description" : "Maximum threads - The most threads can dedicate to the server."
          },
          "minThreads" : {
            "type" : "number",
            "description" : "Minimum threads - The least number of threads must dedicate to the server."
          },
          "networkTimeoutSeconds" : {
            "type" : "number",
            "description" : "Network timeout (seconds) - Time in seconds the network times out"
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Specify whether the cipher suites supported by the server are stated, in order for you select the level of\r\nsecurity that suits your needs and enables communicating with others who might have different security\r\nrequirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "protocolTimeoutSeconds" : {
            "type" : "number",
            "description" : "Protocol timeout (seconds) - Time in seconds the protocol times out."
          },
          "serverTimeoutSeconds" : {
            "type" : "number",
            "description" : "Server timeout (seconds) - Controls how long the server waits after receiving a file to see if the\r\nclient is going to be sending another file on the same session. Setting this too low may cause abort\r\nerrors on the client side. Setting this too high may cause tread pool depletion on the trading engine\r\nside."
          },
          "transferTimeoutSeconds" : {
            "type" : "number",
            "description" : "Transfer timeout - server mode (seconds) - Time in seconds a transfer times out."
          },
          "enableClientAuthenticatedSsl" : {
            "type" : "boolean",
            "description" : "Select this option if you require the client to authenticate itself with its own certificate when\r\nconnecting (mutual authentication). This means you must import the client's certificate to the\r\ncommunity's personal certificate list. If you want to use the pickup for multiple communities, you must\r\nimport the same certificate to each community"
          },
          "certificate" : {
            "type" : "string",
            "description" : "Path to get the certificate for this server. <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "json_EdifactSyntaxGroup" : {
      "type" : "string",
      "title" : "EdifactSyntaxGroup",
      "description" : "",
      "enum" : [ "SYNTAX_GROUP_3", "SYNTAX_GROUP_4" ]
    },
    "xml_ns0_webtraderUserBean" : {
      "title" : "webtraderUserBean",
      "allOf" : [ {
        "properties" : {
          "alternateContact" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_contactBean"
          },
          "ownerId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "ownerName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "preferences" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_mapType"
          },
          "primaryContact" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_contactBean"
          },
          "sponsorContact" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "",
            "$ref" : "#/definitions/xml_ns0_contactBean"
          },
          "userId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_HttpServerExchangePointBean" : {
      "title" : "HttpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The local port used by the embedded HTTP server to listen for incoming connections. The default value is 4080."
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "sequenced" : {
            "type" : "boolean",
            "description" : "Specify whether all messages that are consumed by this pickup should be delivered in their original\r\nconsumption order.\r\n<p/>\r\nIn B2Bi message-handling, sequential delivery is the ability to deliver messages in the order they\r\nwere originally consumed on a specific pickup. This is sometimes referred to as first-in-first-out\r\n(FIFO) behavior.\r\n<p/>\r\nSequential message delivery is implemented only for trading engine pickups, not for integration\r\nengine pickups"
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds that B2Bi waits for missing messages of a sequence before taking the appropriate action.\r\nThis feature avoids the blocking of processing when a sequenced message is not available. Default value is\r\n60 seconds."
          },
          "path" : {
            "type" : "string",
            "description" : "The last component of the path that partners will use to send messages to this server.\r\nA good choice for this value would be one of the community's routing IDs.\r\nThe path to the HTTP server must be unique."
          },
          "syncResponseGenInBackend" : {
            "type" : "boolean",
            "description" : "Synchronous response generated in back end - Select this option to have the back-end application generate\r\nsynchronous responses. If this option is not selected, the synchronous response is generated within the trading\r\nengine. By default, this option is not selected."
          }
        }
      } ],
      "description" : ""
    },
    "json_MetadataProfileOutputSynchronousDeliveryBean" : {
      "title" : "MetadataProfileOutputSynchronousDeliveryBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MetadataProfileOutputBean"
      }, { } ],
      "description" : ""
    },
    "json_PGPCertificateInfoBean" : {
      "type" : "object",
      "properties" : {
        "@jpaId" : {
          "type" : "number",
          "description" : ""
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "A user-defined name for a certificate.  <p/>\r\nNaming the certificate can help identify the community or partner it belongs to."
        },
        "fingerprint" : {
          "type" : "string",
          "description" : "Fingerprints are a way to verify the source of a certificate. After you import or export a certificate, you can\r\ncontact your partner and ensure the fingerprints at both ends are identical. Do this before attempting to\r\nexchange documents. If the fingerprints do not match, one of the certificates might be corrupted or out of date. <p/>"
        },
        "keyId" : {
          "type" : "string",
          "description" : "The keyId is string identifier for the PGP Certificate."
        },
        "keyAlgorithm" : {
          "type" : "string",
          "description" : "An algorithm identifier that specifies the public key crypto system this key belongs to and any associated key parameters, such as key length <p/>"
        },
        "keyLength" : {
          "type" : "number",
          "description" : "Key length indicates encryption strength, the larger the number the stronger the key. <p/>"
        },
        "validFrom" : {
          "type" : "number",
          "description" : "The date the certificate became valid. <p/>"
        },
        "validTo" : {
          "type" : "number",
          "description" : "The date the certificate expires, provided it is not compromised or revoked before that date. <p/>"
        },
        "publicKeys" : {
          "type" : "array",
          "description" : "The Public Key is what its name suggests - Public. It is made available\r\nto everyone via a publicly accessible repository or directory. On the other hand,\r\nthe Private Key must remain confidential to its respective owner.",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_ManagedPGPPublicKeyBean"
            }
          }
        },
        "signatures" : {
          "type" : "array",
          "description" : "A digital signature certifies and timestamps a document",
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/json_ManagedPGPSignatureBean"
            }
          }
        }
      },
      "title" : "PGPCertificateInfoBean",
      "description" : ""
    },
    "xml_ns0_edifactInboundAgreementBean" : {
      "title" : "edifactInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_edifactAgreementBean"
      }, {
        "properties" : {
          "ackDeliveryExchangeId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the delivery exchange used for handling the delivery of the acknowledgements. This information is\r\nneeded when an acknowledgement rule that generates acknowledgements is selected."
          },
          "ackTransportReceiverId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the partner selected as the receiving party of the acknowledgement. This information is\r\nneeded when an acknowledgement rule that generates acknowledgements is selected and the\r\n<code>overrideAckTransportReceiver</code> field is set to <code>true</code>."
          },
          "ackTransportReceiverRoutingId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the Routing Id of the partner selected as the receiving party of the acknowledgement. This information\r\nis needed when an acknowledgement rule that generates acknowledgements is selected and the\r\n<code>overrideAckTransportReceiver</code> field is set to <code>true</code>."
          },
          "bypassEdiProcessing" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether all other inbound processing options are unavailable.\r\nIf this option is set to <code>true</code>,\r\nthe performance of B2Bi is improved when handling large interchanges.\r\nThe trading engine handles incoming interchanges without unpacking the envelopes.\r\nThe trading engine reads only the interchange header and transaction set header segment (ST).\r\nThe entire interchange is sent to the map as a single message. Regular EDI logic is not applied.\r\nFor this reason, no acknowledgements can be automatically generated and sent.\r\nIt is not required to have a map in the service attached to this agreement. This enables the trading engine to\r\npass an entire interchange to the next application without modification.\r\nIf the service that is attached to the agreement contains a map, the documents contained\r\nin the interchange must all be of the same type and same version."
          },
          "customRejectionTypes" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "documentServiceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the Service used for generating acknowledgements. This information is needed when an\r\nacknowledgement rule that generates acknowledgements is selected."
          },
          "dupAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The action to take for duplicate numbers, when the <code>dupCheckControlNumbs</code> field is set to\r\n<code>true</code>. The following options are available:\r\n<ul>\r\n<li>WARN_AND_PROCESS - allows an inbound interchange to be processed successfully, with a logged warning</li>\r\n<li>FAIL_AND_PARK - processing is halted and an error is logged</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_outOfSequenceActionType"
          },
          "dupCheckControlNumbs" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the interchange control numbers are checked for duplicates by comparing to interchanges already\r\nreceived. If a duplicate is detected for an inbound interchange, the <code>dupAction</code> is respected."
          },
          "dupCheckGroupControlNumbs" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the interchange group control numbers are checked for duplicates by comparing to interchanges already\r\nreceived. If a duplicate is detected for an inbound interchange group , the <code>dupAction</code> is respected."
          },
          "generateAckRule" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The condition for sending acknowledgments. The available options are:\r\n<ul>\r\n<li>NEVER (default) - no acknowledgement is generated</li>\r\n<li>ON_REQUEST - acknowledgments must be requested when an integration is set up.</li>\r\n<li>ALWAYS - acknowledgments are always sent.</li>\r\n<li>IF_ERRORS - acknowledgements are sent only when errors are detected</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_generateAckRuleType"
          },
          "generateAckType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the EDIFACT acknowledgement. This information is needed when an acknowledgement rule that generates\r\nacknowledgements is selected. The following options are available:\r\n<ul>\r\n<li><b>CONTROL_EANCOM_D93A</b></li>\r\n<li><b>CONTROL_EANCOM_D96A</b></li>\r\n<li><b>CONTROL_UN_EDIEL_2</b></li>\r\n<li><b>CONTROL_UN_2</b></li>\r\n<li><b>CONTROL_UN_2_1</b></li>\r\n<li><b>CONTROL_UN_2_2</b></li>\r\n<li><b>CONTROL_UN_3</b></li>\r\n<li><b>CONTROL_UN_4</b></li>\r\n<li><b>CONTROL_EDIG_S_3_2</b></li>\r\n<li><b>CONTROL_EDIG_S_4</b></li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_edifactAckType"
          },
          "outOfSeqAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The action to take for non-sequential numbers, when the <code>seqCheckControlNumbs</code> field is set to\r\n<code>true</code>. The following options are available:\r\n<ul>\r\n<li>WARN_AND_PROCESS - allows an inbound interchange to be processed successfully, with a logged warning</li>\r\n<li>FAIL_AND_PARK - processing is halted and an error is logged</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_outOfSequenceActionType"
          },
          "outboundAgreementForAckEnvelopeId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The ID of the outbound agreement used for enveloping the acknowledgement. This information is needed when an\r\nacknowledgement rule that generates acknowledgements is selected."
          },
          "overrideAckTransportReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether you want to identify a specific party as the receiving party of the acknowledgement. If this\r\noption is set to <code>false</code>, the receiver that is specified in the selected outbound agreement is used\r\nas the receiving delivery partner of the acknowledgement. This information is needed when an\r\nacknowledgement rule that generates acknowledgements is selected."
          },
          "rejectionRule" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The condition for rejecting interchanges. Interchanges are rejected depending on where errors are found.\r\nFor example, if there is an error in one transaction set, the whole interchange is rejected.\r\nThe available options are:\r\n<ul>\r\n<li>NONE</li>\r\n<li>ENTIRE_INTERCHANGE</li>\r\n<li>SAME_TYPE</li>\r\n<li>CUSTOM_TYPE</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_rejectionRuleType"
          },
          "seqCheckControlNumbs" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the interchange control number for inbound messages is verified to be in sequence.\r\nFor example, if the user sets the next expected interchange control number to 123456, the system validates the\r\nnext inbound document has an interchange control number of 123456. If the validation succeeds, the field is\r\nupdated to 123457. If the validation fails, the <code>outOfSequence</code> action is respected."
          },
          "seqCheckGroupControlNumbs" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the interchange group control number for inbound messages is verified to be in sequence.\r\nFor example, if the user sets the next expected interchange group control number to 123456, the system validates the\r\nnext inbound document has an interchange control number of 123456. If the validation succeeds, the field is\r\nupdated to 123457. If the validation fails, the <code>outOfSeqAction</code> is respected."
          },
          "useApplicationReference" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>applicationReference</code> field is used for matching/selection at runtime."
          },
          "useCommunicationAgreementId" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>communicationAgreementId</code> field is used for matching/selection at runtime."
          },
          "useIdCodeQualifierReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>idCodeQualifierReceiver</code> field is used for matching/selection at runtime."
          },
          "useIdCodeQualifierSender" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>idCodeQualifierSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdInternalIdReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerIdInternalIdReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdInternalIdSender" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerIdInternalIdSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdInternalSubIdReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerIdInternalSubIdReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdInternalSubIdSender" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerIdInternalSubIdSender</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdReceiver" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerIdReceiver</code> field is used for matching/selection at runtime."
          },
          "usePartnerIdSender" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>partnerIdSender</code> field is used for matching/selection at runtime."
          },
          "useSyntaxIdentifier" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>syntaxIdentifier</code> field is used for matching/selection at runtime."
          },
          "useSyntaxVersion" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>syntaxVersion</code> field is used for matching/selection at runtime."
          },
          "useTestIndicator" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the <code>testIndicator</code> field is used for matching/selection at runtime."
          }
        }
      } ],
      "description" : ""
    },
    "json_VdaRole" : {
      "type" : "string",
      "title" : "VdaRole",
      "description" : "",
      "enum" : [ "Customer", "Supplier" ]
    },
    "xml_ns0_xmlAgreementBean" : {
      "title" : "xmlAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_agreementBean"
      }, {
        "properties" : {
          "receiverIdentification" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The receiver partner's messaging ID. </br> This is a read-only field."
          },
          "senderIdentification" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The sender partner's messaging ID. </br> This is a read-only field."
          }
        }
      } ],
      "description" : ""
    },
    "json_HttpServerB2biConsumerExchangePointBean" : {
      "title" : "HttpServerB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_Cookie" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "number",
          "description" : ""
        },
        "path" : {
          "type" : "string",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : ""
        },
        "value" : {
          "type" : "string",
          "description" : ""
        },
        "domain" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "Cookie",
      "description" : ""
    },
    "xml_ns0_recipientRefPasswordQualifier" : {
      "type" : "string",
      "title" : "recipientRefPasswordQualifier",
      "description" : "",
      "enum" : [ "AA", "BB" ]
    },
    "json_EntityTag" : {
      "type" : "object",
      "properties" : {
        "weak" : {
          "type" : "boolean",
          "description" : ""
        },
        "value" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "EntityTag",
      "description" : ""
    },
    "json_PesitConsumerExchangePointBean" : {
      "title" : "PesitConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The IP address or the network name of the back-end PeSIT server to poll. This must be the fully\r\nqualified domain name or IP address of the PeSIT server"
          },
          "port" : {
            "type" : "number",
            "description" : "The Port on which the back-end PeSIT server listens."
          },
          "remotePesitExchangePointId" : {
            "type" : "string",
            "description" : "Select the partner delivery exchange / application delivery, if any are available. When used, caller and server\r\nidentifications are automatically filled on the trading side.</br>\r\n<b>Note:</b> Only Pesit exchanges from partners on same community with this exchange are allowed</br>\r\n<b>Note:</b> On integration, an application delivery on same community can be selected,\r\nor for special use (for example, 3rd party monitoring), another one can be used too."
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Select this option If the backend server is configured to transfer over SSL/TLS.\r\nYou must import the root certificate of the remote server to the community trusted SSL root certificates."
          },
          "enableHostnameVerification" : {
            "type" : "boolean",
            "description" : "If you select this option, the trading engine verifies that the name of the server\r\nis the same as the name in the server's certificate. This requires that you import\r\nthe server certificate chain in the community's personal certificates and then select\r\nthe option <i>Trust this for SSL server and/or client authentication</i>.\r\nThe trading engine automatically adds the root certificate to the linked community's\r\ntrusted SSLroot certificates."
          },
          "enableCftComptatibility" : {
            "type" : "boolean",
            "description" : "When you select this option, B2Bi aligns the PeSIT record size on TLS packets.\r\nThis is the only method handled by Axway Transfer CFT before version 3.0,\r\nand is the default method for the Axway products Gateway and Interpel."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Optionally, set to true in order to override the default cipher suites.  <p/>"
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "List of cipher suites to be used. <p/>",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "acknowledgementExpected" : {
            "type" : "boolean",
            "description" : "Select this option if the polled back-end server expects an acknowledgment for each file fetched."
          },
          "callerIdentification" : {
            "description" : "Holds the caller's protocol identity (P13) and password requirements.\r\n<b>Note:</b> This field is automatically filled on trading part",
            "$ref" : "#/definitions/json_PesitIdentificationBean"
          },
          "serverIdentification" : {
            "description" : "Holds the partner server's protocol identity (PI4) and password requirements. </br>\r\n<b>Note:</b> This field is automatically filled on trading part",
            "$ref" : "#/definitions/json_PesitIdentificationBean"
          },
          "fileName" : {
            "type" : "string",
            "description" : "File name (PI12) - Name of the file, forced to uppercase at runtime. Often, the real name of the file is shipped\r\nin File label (customFileName)."
          },
          "fileType" : {
            "type" : "number",
            "description" : "The file type (PI11), which is used by some monitors. The default value is 0."
          },
          "compressionType" : {
            "description" : "Compression (PI21) - Controls the compression of the file during the transfer (compression on the fly).\r\nSelect a compression method:   <ul>\r\n<li>NONE\r\nNo compression. (default)</li>\r\n<li>HORIZONTAL\r\nCompresses the consecutive identical characters in the records.</li>\r\n<li>Vertical\r\nRecords are compared to one another and the consecutive identical columns are compressed.</li>\r\n<li>BOTH\r\nCombination of the above two compression methods.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_PesitCompressionType"
          },
          "priority" : {
            "description" : "Priority (PI17) - Select an option:  <ul>\r\n<li>HIGH\r\nHighest priority</li>\r\n<li>MEDIUM\r\nDefault</li>\r\n<li>LOW\r\nLowest priority</li>\r\n</ul>",
            "$ref" : "#/definitions/json_PesitPriority"
          },
          "serviceParam" : {
            "type" : "string",
            "description" : "Free text (PI99), often used to transfer metadata."
          },
          "bufferSize" : {
            "type" : "number",
            "description" : "Max data unit size in bytes (PI25): The largest chunk of data, in bytes, to be transferred at one time. For\r\nhigh-speed networks, use the default 32700 bytes. This value is related to the client setting for record length.\r\n\r\nThe value of this field must be the same or larger than the value of the record length field."
          },
          "kbPerSyncPoint" : {
            "type" : "number",
            "description" : "Intervals between sync points (Kbytes): Each time an amount of data equal to this value has been sent, the\r\nclient is expected to ask the server to confirm whether data totaling this value has been received. This represents\r\na check point in the progress of a file transfer. If a connection is lost before a file transfer has been\r\ncompleted, the transfer resumes, upon restart of the transport, at the point of the last successful check point.\r\nThe default value is 1024 kilobytes (1 megabyte).\r\nThis setting corresponds to the pacing setting in Axway Transfer CFT."
          },
          "maxOutstandingSyncPoints" : {
            "type" : "number",
            "description" : "Sync acknowledgement window: The number of check-point cycles that the client waits for the server to respond\r\nto a request to confirm file-transfer progress. For example, if the value of Kb per sync point (pacing) is 1024\r\n(1 megabyte) and the value of this field is 1, the client stops sending data after 1024 kilobytes unless the\r\nserver responds, although the transfer remains active.\r\nIf this value is 2, the client keeps sending until 2 megabytes (1024 x 2) of data  are sent, and so on.\r\nIf the client's value for this field is 0 (zero), the client does not ask the server to confirm at intervals the\r\namount of data received.\r\nIf the server's value for this field is 0, the server does not send confirmations at intervals of data received.\r\nThe default value is 3. In most situation this is the correct value.\r\nThis setting corresponds to chkw setting in Axway Transfer CFT."
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "description" : "Time in seconds the trading engine waits to read data from the delivery exchange before terminating the\r\nconnection."
          },
          "connectionTimeoutSeconds" : {
            "type" : "number",
            "description" : "PeSIT Tc timeout. The time the caller waits for a connection acknowledgment from the server."
          },
          "transferTimeoutSeconds" : {
            "type" : "number",
            "description" : "PeSIT Td timeout. The time the caller keeps the connection open, waiting for another message to send."
          },
          "networkTimeoutSeconds" : {
            "type" : "number",
            "description" : "PeSIT Tr timeout. The time the caller waits for an expected and effective network disconnection, before forcing\r\nit."
          },
          "protocolTimeoutSeconds" : {
            "type" : "number",
            "description" : "PeSIT Tp timeout. The time the caller waits for the response of the remote, in the middle of a protocol action\r\n(such as a transfer)."
          },
          "disableNagleAlgorithm" : {
            "type" : "boolean",
            "description" : "Select this option to disable Nagle's algorithm on the underlying TCP connection used by the PeSIT protocol.\r\nDisable Nagle's algorithm to enhance transfer speed or enable it to reduce overhead of the transferred packet data."
          }
        }
      } ],
      "description" : ""
    },
    "json_Processing" : {
      "type" : "string",
      "title" : "Processing",
      "description" : "",
      "enum" : [ "P", "D", "T" ]
    },
    "json_FtpB2biProducerExchangePointBean" : {
      "title" : "FtpB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_mqConsumerExchangePointBean" : {
      "title" : "mqConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_pollingExchangePointBean"
      }, {
        "properties" : {
          "clientModeEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries connection type. Two options are available:\r\n<ul><li><code>true</code> - select this option to use a channel connection on the local machine or via\r\nthe network, to connect to a queue manager. </li>\r\n<li><code>false</code> – select this option to use an API connection, via shared memory, to a local queue\r\nmanager. </li></ul>"
          },
          "convertUsingCCSID" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable this option if you want to convert the characters set of messages received from the queue to the set\r\nspecified in the 'mqCharset' field. Set to <code>false</code> if you want to turn off data conversion."
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This value specifies the maximum number of messages to be consumed over a single connection before the connection\r\nis closed and reopened on another processing node. As such, this setting effectively controls load balancing. The\r\ndefault setting of 1 achieves optimal load balancing at the cost of greater overhead per message. Depending on your\r\nmessage volume and the load on each node, this value could be increased to avoid the overhead associated with\r\nreconnecting to the transport server, at the cost  of a less well-balanced cluster."
          },
          "mqChannel" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries channel."
          },
          "mqCharset" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The character set for converting data."
          },
          "mqHost" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries server name."
          },
          "mqPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries port number. The default port is 1414."
          },
          "mqQueueManager" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The MQSeries queue manager."
          },
          "mqQueueName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the MQSeries queue that receives incoming documents."
          },
          "mqStandbyServer" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Multi-instance standby server address."
          },
          "multiInstanceEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this option if you are using an MQSeries multi-instance queue manager."
          },
          "segmentationModeEnabled" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use message segmentation."
          },
          "segmentationSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The message segmentation size in bytes."
          },
          "segmentationType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The message segmentation type:\r\n<ul><li>MQSeries</li>\r\n<li>Application segmentation</li></ul>",
            "$ref" : "#/definitions/xml_ns0_mqSegmentationType"
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Value of sequence timeout in seconds."
          },
          "sequenced" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this option to true if you want all messages that are consumed by this pickup to be delivered in their\r\noriginal consumption order."
          },
          "sslCipherSuite" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The SSL cipher suite to use for SSL encryption.",
            "$ref" : "#/definitions/xml_ns0_sslCipherSuite"
          },
          "useSsl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Use SSL to connect to the MQSeries server."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password to connect to the server.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_smtpServerDefinitionBean" : {
      "title" : "smtpServerDefinitionBean",
      "allOf" : [ {
        "properties" : {
          "friendlyName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The friendly name for the global external server. <b>Read-only.</b>"
          },
          "host" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Fully qualified domain name or IP address for the global external server, which is used by default for sending e-mail messages.\r\n<b>Required.</b>"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The unique ID of the global external server."
          },
          "port" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port used by the global external server. The default values is 25. <b>Required.</b>"
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Regular or secured channel with authentication."
          },
          "usernamePasswordCredentials" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "User name and password to connect to the server. Usually, SMTP servers do not require user names and passwords for sending messages.",
            "$ref" : "#/definitions/xml_ns0_usernamePasswordCredentialsBean"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_MetadataOutboundAgreementBean" : {
      "type" : "object",
      "properties" : {
        "overrideTransportReceiver" : {
          "type" : "boolean",
          "description" : ""
        },
        "transportReceiverId" : {
          "type" : "string",
          "description" : ""
        },
        "transportReceiverRoutingId" : {
          "type" : "string",
          "description" : ""
        },
        "deliveryExchangeId" : {
          "type" : "string",
          "description" : ""
        },
        "id" : {
          "type" : "string",
          "description" : ""
        },
        "senderId" : {
          "type" : "string",
          "description" : ""
        },
        "receiverId" : {
          "type" : "string",
          "description" : ""
        },
        "agreementId" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "MetadataOutboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_criteriaBean" : {
      "title" : "criteriaBean",
      "allOf" : [ { } ],
      "description" : ""
    },
    "xml_ns0_inlineProcessorBean" : {
      "title" : "inlineProcessorBean",
      "allOf" : [ {
        "properties" : {
          "className" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "User defined java class"
          },
          "description" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Documentation for this user defined functionality"
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "parameters" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Parameters for user defined java class"
          }
        }
      }, { } ],
      "description" : "The extensible architecture of the trading engine enables system integrators to apply custom logic to in-process messages\r\nas an integral part of the processing pipeline. You can selectively apply the custom processing logic to inbound or outbound\r\nmessages at runtime, implemented as a user-defined Java class ."
    },
    "xml_ns0_httpB2biProducerExchangePointBean" : {
      "title" : "httpB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biProducerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_ApiException" : {
      "title" : "ApiException",
      "allOf" : [ {
        "$ref" : "#/definitions/json_WebApplicationException"
      }, {
        "properties" : {
          "exceptionTrace" : {
            "type" : "string",
            "description" : ""
          },
          "responseMessage" : {
            "description" : "",
            "$ref" : "#/definitions/json_ResponseMessage"
          }
        }
      } ],
      "description" : "Base class for all API exceptions.  Any class that extends this will automatically get mapped to the correct\r\nHTTP return code and the exception message will be populated in the response body."
    },
    "xml_ns0_sftpServerProducerExchangePointBean" : {
      "title" : "sftpServerProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverProducerExchangePointBean"
      }, {
        "properties" : {
          "defaultUser" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Default account for the SFTP server.",
            "$ref" : "#/definitions/xml_ns0_sshUserBean"
          },
          "deleteAfterDownload" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the embedded server should delete files after they have been downloaded from it."
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The local port used by the embedded SFTP server to listen for incoming connections. The default values are 4022\r\nfor a trading server and 5022 for an application server."
          },
          "modifySftpServerDirectory" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether subdirectory management is enabled on the client side. When this option is set to\r\n<code>true</code>, SFTP clients are allowed to add or remove subdirectories."
          },
          "overwriteIfDuplicate" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether when the trading engine detects a duplicate file name, it should overwrite the existing file,\r\nreplacing it with the duplicate file."
          },
          "preserveFilename" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the original file names should be preserved when the trading engine delivers messages.\r\nPreserving original file names enables your back-end application to process binary messages based on their\r\nfile names."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_xmlOutboundAgreementBean" : {
      "title" : "xmlOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_xmlAgreementBean"
      }, {
        "properties" : {
          "enveloperId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "ID of the service to be used for enveloping outbound XML documents."
          },
          "testFlag" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this field to true if the agreement is for testing and not for production."
          }
        }
      } ],
      "description" : ""
    },
    "json_BatchRejectionRule" : {
      "type" : "string",
      "title" : "BatchRejectionRule",
      "description" : "",
      "enum" : [ "NONE", "WARNING", "ENTIRE_FILE", "SAME_TYPE", "CUSTOM_TYPES" ]
    },
    "json_TradacomsMessagingIdBean" : {
      "title" : "TradacomsMessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MessagingIdBean"
      }, {
        "properties" : {
          "transmissionCode" : {
            "type" : "string",
            "description" : "An EAN location number (GLN) identifying the transmission sender\r\n(FROM code) or the transmission receiver (UNTO code). The interchange parties can agree\r\nupon the code. The value must be 14 or fewer alphanumeric characters."
          },
          "transmissionName" : {
            "type" : "string",
            "description" : "Identifies in plain language the transmission sender (FROM name) or the transmission receiver (UNTO name).\r\nThe interchange parties can agree upon the name. This value must be 35 or fewer alphanumeric characters."
          }
        }
      } ],
      "description" : ""
    },
    "json_B2biProducerExchangePointBean" : {
      "title" : "B2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "parameters" : {
            "description" : "Define the parameter string to be passed for a specific type of B2Bi exchange point. For more information about\r\nthe specific parameters to be passed for each type of B2Bi exchange point, please see the admin guide.",
            "$ref" : "#/definitions/json_MapType"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the B2Bi exchange point."
          }
        }
      } ],
      "description" : ""
    },
    "json_PluggableProducerExchangePointBean" : {
      "title" : "PluggableProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ProducerExchangePointBean"
      }, {
        "properties" : {
          "definitionName" : {
            "type" : "string",
            "description" : "Name to be displayed in the UI wizard for selecting a transport.\r\nThis name will be displayed along with built-in transport names such as \"Ftp\", \"File system\", etc.\r\nFor consistency with existing names, use an initial capital letter, and no period at the end."
          },
          "settings" : {
            "description" : "Defines setting string to be passed to the implementation class when a pluggable transport is created",
            "$ref" : "#/definitions/json_MapType"
          }
        }
      } ],
      "description" : ""
    },
    "json_DocumentServiceOutputComponentBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the current processing step. This field can have one of the following four values:\r\n<ul>\r\n<li>Document</li>\r\n<li>Post enveloping</li>\r\n<li>Post transfer success</li>\r\n<li>Post transfer failed</li>\r\n</ul>"
        },
        "stepId" : {
          "type" : "string",
          "description" : "The current processing step to be configured."
        },
        "component" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "DocumentServiceOutputComponentBean",
      "description" : ""
    },
    "xml_ns0_batchRejectionRule" : {
      "type" : "string",
      "title" : "batchRejectionRule",
      "description" : "",
      "enum" : [ "NONE", "WARNING", "ENTIRE_FILE", "SAME_TYPE", "CUSTOM_TYPES" ]
    },
    "xml_ns0_tradingPartnerBean" : {
      "title" : "tradingPartnerBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_partyBean"
      }, {
        "properties" : {
          "defaultEncryptionCertificateId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "ID of the specified partner's default certificate for encrypting the documents you send to ensure secure trading."
          },
          "defaultPGPCertificateId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "pgpCertificates" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_charEncodingCoded" : {
      "type" : "string",
      "title" : "charEncodingCoded",
      "description" : "",
      "enum" : [ "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "ZZZ" ]
    },
    "json_AgreementBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : "Agreement name"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Returns if this agreement is enabled."
        },
        "senderId" : {
          "type" : "string",
          "description" : "Sending partner"
        },
        "senderMessagingId" : {
          "type" : "string",
          "description" : "Sending partner's message routing ID"
        },
        "receiverId" : {
          "type" : "string",
          "description" : "Receiving partner"
        },
        "receiverMessagingId" : {
          "type" : "string",
          "description" : "Receiving partner's message routing ID </br> When null messagingId, routingId will be [ALL] for\r\ninbound, [DEFAULT] for outbound"
        },
        "communityId" : {
          "type" : "string",
          "description" : "Community this agreement is linked to"
        },
        "communityRoutingId" : {
          "type" : "string",
          "description" : "If the community has multiple routing IDs, you must supply a routing ID"
        },
        "agreementAttributes" : {
          "type" : "string",
          "description" : "List with all attributes for current agreement"
        },
        "agreementAttributesTemplate" : {
          "type" : "string",
          "description" : "List with all template attributes for agreements"
        },
        "documentAgreementAttributesTemplate" : {
          "type" : "string",
          "description" : "List with all template attributes for document agreements"
        }
      },
      "title" : "AgreementBean",
      "description" : ""
    },
    "json_CriteriaBean" : {
      "type" : "object",
      "title" : "CriteriaBean",
      "description" : ""
    },
    "json_XmlAgreementBean" : {
      "title" : "XmlAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_AgreementBean"
      }, {
        "properties" : {
          "senderIdentification" : {
            "type" : "string",
            "description" : "The sender partner's messaging ID. </br> This is a read-only field."
          },
          "receiverIdentification" : {
            "type" : "string",
            "description" : "The receiver partner's messaging ID. </br> This is a read-only field."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_edifactAgreementBean" : {
      "title" : "edifactAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_agreementBean"
      }, {
        "properties" : {
          "applicationReference" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The application on the receiver's network to which the interchange is directed (0026).\r\nFor example, a value of <code>%IN%</code> indicates the CONTRL message should use the value of the application\r\nreference of the incoming interchange."
          },
          "communicationsAgreementId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Any communications agreements that control the exchange of data (0032)."
          },
          "idCodeQualifierReceiver" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange recipient's partner identification code qualifier (S003 0007). This is a read-only field."
          },
          "idCodeQualifierSender" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange sender's partner identification code qualifier (S002 0007). This is a read-only field."
          },
          "partnerIdIntSubReceiver" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange recipient's interchange recipient internal sub-identification (S003 0046). This is a read-only field."
          },
          "partnerIdIntSubSender" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange sender's interchange sender internal sub-identification (S002 0042). This is a read-only field."
          },
          "partnerIdInternalIdReceiver" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange recipient's routing address (S003 0014). This is a read-only field."
          },
          "partnerIdInternalIdSender" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange sender's address for reverse routing (S002 0008). This is a read-only field."
          },
          "partnerIdReceiver" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange recipient's identification (S003 0010). This is a read-only field."
          },
          "partnerIdSender" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The interchange sender's identification (S002 0004). This is a read-only field."
          },
          "syntaxGroup" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The appropriate syntax to use for messages.",
            "$ref" : "#/definitions/xml_ns0_edifactSyntaxGroup"
          },
          "syntaxIdentifier" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The agency controlling the syntax and the character repertoire used in an interchange (S001 0001).\r\nEach identity consists of the letters <code>UN</code> followed by two letters identifying the character repertoire."
          },
          "syntaxVersion" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The EDIFACT syntax version (S001 0002).",
            "$ref" : "#/definitions/xml_ns0_edifactSyntaxVersion"
          },
          "testIndicator" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Indicates that the structural level containing the test indicator is a test (0035).",
            "$ref" : "#/definitions/xml_ns0_testIndicator"
          },
          "useFunctionalGroups" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "When one or more transaction sets are received from a trading partner in an interchange, the transaction sets may\r\nbe grouped in functional groups within the envelope. Transactions sets that are grouped together are identified\r\nby the same functional group ID. Within the inbound agreement, you can add functional group agreements to specify\r\nthe valid functional group IDs to be verified for exchanges that may be performed between the selected trading\r\npartners."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_producerExchangePointBean" : {
      "title" : "producerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_exchangePointBean"
      }, {
        "properties" : {
          "customRetryIntervals" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Interval delays on each subsequent retry expressed in minutes. Example: 5,10,15,30,60."
          },
          "holdMessagesForPickup" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Get if all outbound messages sent over this exchange are held for remote pickup. Applies for the moment\r\nonly for PeSIT exchange point. The default value is set to <code>false</code>."
          },
          "postProcessingScript" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The full path to an executable file that contains post-processing commands. This field is available for\r\ncommunity integration delivery exchanges and partner trading delivery exchanges."
          },
          "retries" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This is the number of times the trading engine will retry connecting to the partner&#39;s transport if the\r\ninitial attempt to connect and send the message failed. The following are common reasons for triggering\r\nretries. The connection attempt failed immediately for a reason such as host not found.\r\n<ul>\r\n<li>The connection attempt failed immediately for a reason such as host not found.</li>\r\n<li>The host was found, but the connection process took longer than the connect timeout interval specified.</li>\r\n<li>The connection was successful, but the partner&#39;s HTTP server took longer than the response timeout\r\ninterval to return a 200 OK response indicating the message was successfully received.</li>\r\n</ul>"
          },
          "useCustomRetryIntervals" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies if a customized retry schedule should be used."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_isdnNetworkSettingsBean" : {
      "title" : "isdnNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_networkSettingsBean"
      }, {
        "properties" : {
          "bandwidthLimitedTo56k" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Select this when a provider uses 56 kbps-bit transparent operation\r\nwith byte-framing from the network as its physical layer protocol\r\ninstead of the default 64-kbps with HDLC framing. For such cases,\r\nthis check box must be selected for the ISDN connection to be properly established."
          },
          "brickControllerId" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "reference to ISDN controller"
          },
          "highestIncomingChannel" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The highest value for the incoming channels identifier’s counter. If blank, use the network’s default value."
          },
          "highestOutgoingChannel" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The highest value for the outgoing channels identifier’s counter. If blank, use the network’s default value."
          },
          "highestTwoWayChannel" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The highest value for the two-way channels identifier’s counter. If blank, use the network’s default value."
          },
          "layer2WindowSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies how many layer 2 (ISO 7776) packets can be sent\r\nbefore an acknowledgment is required from the partner. If blank, use the network’s default value."
          },
          "layer3PacketSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies the size of the layer 3 packets. If blank, use the network’s default value."
          },
          "layer3WindowSize" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specifies how many layer 3 (ISO 8208) packets can be sent\r\nbefore an acknowledgment is required from the partner. If blank, use the network’s default value."
          },
          "lowestIncomingChannel" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The starting value for the incoming channels identifier’s counter. If blank, use the network’s default value."
          },
          "lowestOutgoingChannel" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The starting value for the outgoing channels identifier’s counter. If blank, use the network’s default value."
          },
          "lowestTwoWayChannel" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The starting value for the two-way channels identifier’s counter. If blank, use the network’s default value."
          }
        }
      } ],
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "xml_ns0_stdEntryClassCode" : {
      "type" : "string",
      "title" : "stdEntryClassCode",
      "description" : "",
      "enum" : [ "EMPTY", "ACK", "ADV", "ARC", "ATX", "BOC", "CBR", "CCD", "CIE", "COR", "CTX", "DNE", "ENR", "IAT", "MTE", "PBR", "POP", "POS", "PPD", "RCK", "SHR", "TEL", "TRC", "TRX", "WEB", "XCK" ]
    },
    "json_MetadataProfileOutputToPartnerBean" : {
      "title" : "MetadataProfileOutputToPartnerBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MetadataProfileOutputBean"
      }, {
        "properties" : {
          "communityId" : {
            "type" : "string",
            "description" : ""
          },
          "communityRoutingId" : {
            "type" : "string",
            "description" : ""
          },
          "partnerId" : {
            "type" : "string",
            "description" : ""
          },
          "partnerRoutingId" : {
            "type" : "string",
            "description" : ""
          },
          "deliveryId" : {
            "type" : "string",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "json_CustomB2biProducerExchangePointBean" : {
      "title" : "CustomB2biProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_B2biProducerExchangePointBean"
      }, {
        "properties" : {
          "customComponentId" : {
            "type" : "string",
            "description" : "The id of the processing step to handle the processing for this custom delivery."
          },
          "customDeliveryComponent" : {
            "type" : "string",
            "description" : "Reference to an custom delivery registry object."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_fileNamePreserveMode" : {
      "type" : "string",
      "title" : "fileNamePreserveMode",
      "description" : "",
      "enum" : [ "SEQUENCE", "OVERWRITE", "APPEND" ]
    },
    "json_RejectionRuleType" : {
      "type" : "string",
      "title" : "RejectionRuleType",
      "description" : "",
      "enum" : [ "NONE", "ENTIRE_INTERCHANGE", "SAME_TYPE", "CUSTOM_TYPE" ]
    },
    "xml_ns0_edifactOutboundAgreementBean" : {
      "title" : "edifactOutboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_edifactAgreementBean"
      }, {
        "properties" : {
          "acceptGroups" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether group segments are accepted."
          },
          "ackTimeout" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The time limit in hours and minutes to wait for receipt of acknowledgments. The 24-hour format is\r\n<code>HH:MM</code>."
          },
          "charEncodingCoded" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The coded identification of the character encoding used in the interchange (S001 0133). The available\r\noptions are:\r\n<ul>\r\n<li>1 - ASCII 7 bit</li>\r\n<li>2 - ASCII 8 bit</li>\r\n<li>3 - Code page 500 (EBCDIC Multinational No. 5)</li>\r\n<li>4 - Code page 850 (IBM PC Multinational)</li>\r\n<li>5 - UCS-2</li>\r\n<li>6 - UCS-4</li>\r\n<li>7 - UTF-8</li>\r\n<li>8 - UTF-16</li>\r\n<li>ZZZ - Mutually agreed between trading partners</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_charEncodingCoded"
          },
          "componentElementSeparator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The component element separator value matching the EDIFACT document. It can be either a character or a\r\nhex value with the <code>\\H</code> prefix."
          },
          "controlReferenceGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This value describes how a unique ID is generated, in order to identify each transmission."
          },
          "decimalMark" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The decimal mark value matching the EDIFACT document. It can be either a character or a hex value with\r\nthe <code>\\H</code> prefix."
          },
          "documentControlNumberGenerator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This value describes how to generate the message reference number (0062 generator)."
          },
          "elementSeparator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The element separator value matching the EDIFACT document. It can be either a character or a hex value\r\nwith the <code>\\H</code> prefix."
          },
          "envelopeTimeout" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The envelope timeout in hours and minutes. The 24-hour format is <code>HH:MM</code>."
          },
          "forceGenerateUNA" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the UNA segment is added to the envelope."
          },
          "groupTimeout" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The time limit in hours and minutes before groups time out (when group segments are accepted). The\r\n24-hour format is <code>HH:MM</code>."
          },
          "groupTimeoutAction" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The action to perform if group messages are missing (when group segments are accepted). The available\r\noptions are:\r\n<ul>\r\n<li>SEND_AND_WARN</li>\r\n<li>SEND</li>\r\n<li>STOP</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_groupTimeoutActionType"
          },
          "maxNumbDocs" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The largest number of documents the envelope can contain."
          },
          "processingPriorityCode" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A code used to request a processing priority for the interchange (0029). The code is specified in the\r\nparties' interchange agreement."
          },
          "recipientRefPassword" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The receiver's password (S005 0022)."
          },
          "recipientRefPasswordQualifier" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The qualifier for the receiver's password or reference (S005 0025). The use of the qualifier is\r\nspecified in the partners' interchange agreement.",
            "$ref" : "#/definitions/xml_ns0_recipientRefPasswordQualifier"
          },
          "releaseChar" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The release character value matching the EDIFACT document. It can be either a character or a hex value\r\nwith the <code>\\H</code> prefix."
          },
          "repeatingElementSeparator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The repeating element separator matching the EDIFACT document. It can be either a character or a hex\r\nvalue with the <code>\\H</code> prefix."
          },
          "requestAcks" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether acknowledgments for messages are requested."
          },
          "segmentSeparator" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The segment separator value matching the EDIFACT document. It can be either a character or a hex value\r\nwith the <code>\\H</code> prefix."
          },
          "serviceCodeDirNumber" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The version of the service code list directory to use to define encoded EDIFACT values (S001 0080)."
          },
          "useDefaultSyntax" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the default values of the version displayed in the syntax version field are used.\r\nAlternatively, custom values in decimal or hex code format can be provided for the following fields:\r\n<ul>\r\n<li>componentElementSeparator</li>\r\n<li>elementSeparator</li>\r\n<li>decimalMark</li>\r\n<li>releaseChar</li>\r\n<li>segmentSeparator</li>\r\n</ul>"
          }
        }
      } ],
      "description" : ""
    },
    "json_Status_Response" : {
      "type" : "string",
      "title" : "Status",
      "description" : "",
      "enum" : [ "OK", "CREATED", "ACCEPTED", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "MOVED_PERMANENTLY", "FOUND", "SEE_OTHER", "NOT_MODIFIED", "USE_PROXY", "TEMPORARY_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "REQUEST_ENTITY_TOO_LARGE", "REQUEST_URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED" ]
    },
    "xml_ns0_x12DocumentAgreementBean" : {
      "title" : "x12DocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_httpServerSettingsBean" : {
      "title" : "httpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverSettingsBean"
      }, {
        "properties" : {
          "cipherSuites" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires signing messages using a message digest\r\nalgorithm. But the choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm."
          },
          "enableClientAuthenticatedSsl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the partner’s certificate should be used for authentication when the partner connects to the\r\nserver, when using SSL option is enabled. If this option is set to <code>true</code>, partners are required\r\nto present a certificate for identity verification trusted by the server before the delivery exchanges\r\nusing this server allow the connection and you must add an authentication certificate for the partner.\r\nIf this option is set to <code>false</code>, non-authenticated HTTPS is used."
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The port on which the embedded server listens for connection requests."
          },
          "maxLingerTimeSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The amount of time in seconds the connection is kept open after it is closed.\r\nA negative number (-1) indicates that the connection should not be kept open after it is closed"
          },
          "maxThreads" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The maximum number of threads the trading engine can dedicate to the server."
          },
          "minThreads" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The least number of threads the trading engine must dedicate to the server."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether the cipher suites supported by the server are stated, in order for you select the level of\r\nsecurity that suits your needs and enables communicating with others who might have different security\r\nrequirements.\r\n<p/>\r\nFor example, when an SSL connection is established, the client and server exchange information\r\nabout the cipher suites they have in common. Then they communicate using the common\r\ncipher suite that offers the highest level of security. If they do not have a cipher suite in\r\ncommon, secure communication is not possible.\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "restartableMinKiloBytes" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The minimum size of a file that triggers the system to continue the file transfer at the point where it was\r\ninterrupted before the connection was lost. The minimum size is in kilobytes. The system only resumes\r\ntransfers of files that meet this minimum. The system starts over the transfer of smaller files whose\r\nprocessing is interrupted."
          },
          "shouldSubmitCertificate" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Used for hiding the SSL server certificate URI; true if the entity was newly persisted and false otherwise"
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "tempFileHoursToLive" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The number of hours the system retains a file whose transfer has been interrupted while waiting for the\r\nconnection to be restored, if restart attempts are made.\r\nThis temporary file enables the system to resume the transfer at the point where it was interrupted."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_metadataConditionBean" : {
      "title" : "metadataConditionBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_criteriaBean"
      }, {
        "properties" : {
          "compareOperator" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Operator which specifies the relationship between the attribute name (<code>metadataName</code>) and the provided\r\nvalue (<code>metadataValue</code>). You can define attributes to be active only when certain conditions occur.\r\nThis lets you customize attributes to a high degree of specificity. You can choose one of the following operators:\r\n<ul>\r\n<li><b>EQUALS</b> - the operator tests whether an attribute exists and has a specific value</li>\r\n<li><b>NOT_EQUALS</b> - the operator tests whether an attribute exists, but does not match a specific value</li>\r\n</ul>\r\nConditions cause payloads to be delivered to the appropriate application delivery. If a payload does not satisfy\r\nthe delivery criteria for any application delivery, then the first available application delivery is used.\r\nAn application delivery with no criteria is used only if it is the first one available.",
            "$ref" : "#/definitions/xml_ns0_compareOperator"
          },
          "metadataName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the message attribute used for attaching metadata to the messages the trading engine picks up\r\nfrom applications or receives from partners.\r\n<p/>\r\nAttributes are name-value pairs whose values are extracted from messages through parsing or have\r\nfixed values. The trading engine can parse only XML messages, but attributes with fixed values can\r\napply to EDI, XML or binary documents.\r\nFor example, you can have the system parse certain XML messages for values of an attribute named\r\nPOAmount. Or, you can instruct the system to apply an attribute named SupplyChain with a fixed\r\nvalue of Retail to certain messages."
          },
          "metadataValue" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The value of the message attribute used for attaching metadata to the messages the trading engine picks up\r\nfrom applications or receives from partners."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_fileSystemB2biConsumerExchangePointBean" : {
      "title" : "fileSystemB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_TestIndicator" : {
      "type" : "string",
      "title" : "TestIndicator",
      "description" : "",
      "enum" : [ "PRODUCTION", "INTERCHANGE_TEST", "SYNTAX_TEST", "ECHO_REQUEST", "ECHO_RESPONSE" ]
    },
    "xml_ns0_AS4HttpServerExchangePointBean" : {
      "title" : "AS4HttpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_httpServerExchangePointBean"
      }, {
        "properties" : {
          "generateReceipt" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : ""
          },
          "groupAttachments" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Group Attachments - Select this option to enable the consumed message to be split into parent and dependent\r\nchild messages."
          },
          "shouldIntegrateAttachments" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Process Attachments - Select this option to process the attachments of the SOAP message."
          },
          "shouldIntegrateBody" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Process SOAP Body - Select this option to process the contents of the SOAP body."
          },
          "shouldParseMetadataFromHeader" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Parse SOAP headers into message metadata - Select this option if you want to SOAP headers to be carried as\r\nmetadata attributes with the message."
          },
          "xpaths" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If shouldParseMetadataFromHeader is selected, enter the XPath expressions to resolve the header."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_b2biConsumerExchangePointBean" : {
      "title" : "b2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_consumerExchangePointBean"
      }, {
        "properties" : {
          "parameters" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Define the parameter string to be passed for a specific type of B2Bi exchange point. For more information about the\r\nspecific parameters to be passed for each type of B2Bi exchange point, please see the admin guide.",
            "$ref" : "#/definitions/xml_ns0_mapType"
          },
          "type" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The type of the B2Bi exchange point."
          }
        }
      } ],
      "description" : ""
    },
    "json_TradacomsInboundAgreementBean" : {
      "title" : "TradacomsInboundAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_TradacomsAgreementBean"
      }, {
        "properties" : {
          "useSyntaxRuleId" : {
            "type" : "boolean",
            "description" : "Enable syntax rule identification for detection / matching."
          },
          "useSyntaxRuleVersion" : {
            "type" : "boolean",
            "description" : "Enable syntax rule version for detection / matching."
          },
          "useApplicationReference" : {
            "type" : "boolean",
            "description" : "Enable application reference for detection / matching."
          },
          "usePriorityCode" : {
            "type" : "boolean",
            "description" : "Enable transmission priority code for detection / matching."
          },
          "recipientTransmisionReference" : {
            "type" : "string",
            "description" : "Receiver Reference (<code>Out_ReceiverReference</code>). Transmission reference ID of the receiver."
          },
          "useSenderTransmissionCode" : {
            "type" : "boolean",
            "description" : "Enable sender identification code for detection / matching."
          },
          "useReceiverTransmissionCode" : {
            "type" : "boolean",
            "description" : "Enable receiver identification code for detection / matching."
          },
          "useSenderTransmissionName" : {
            "type" : "boolean",
            "description" : "Enable sender identification name for detection / matching."
          },
          "useReceiverTransmissionName" : {
            "type" : "boolean",
            "description" : "Enable receiver identification name for detection / matching."
          },
          "documentAgreements" : {
            "type" : "string",
            "description" : "List with all document agreements for current agreement."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_x509CertificateInfoBean" : {
      "title" : "x509CertificateInfoBean",
      "allOf" : [ {
        "properties" : {
          "certificateState" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Indicates whether the certificate can be used. Valid states are: <p/> <ul>\r\n<li>PENDING</li>\r\n<li>OPERATIONAL</li>\r\n<li>EXPIRED</li>\r\n<li>FAILED</li>\r\n<li>REVOKED</li>\r\n<li>UNKNOWN</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_certificateState"
          },
          "certificateType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Certificate type: <p/> <ul>\r\n<li>ROOT_CA</li>\r\n<li>INTERMEDIARY</li>\r\n<li>END_ENTITY</li>\r\n<li>SELF_SIGNED</li>\r\n</ul><p/>",
            "$ref" : "#/definitions/xml_ns0_certificateType"
          },
          "certificateUsage" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Describes the functions that the certificate can perform. The intended usage does not mean the certificate is\r\nbeing used for that purpose, only that it can be used for it. <p/> <ul>\r\n<li>ENCRYPTION</li>\r\n<li>VERIFICATION</li>\r\n<li>ANY</li>\r\n<li>OTHER</li>\r\n<li>NON_REPUDIATION</li>\r\n<li>DIGITAL_SIGNATURE</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_certificateUsage"
          },
          "friendlyName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A user-defined name for a certificate.  <p/>\r\nNaming the certificate can help identify the community or partner it belongs to."
          },
          "id" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "ID of this certificate."
          },
          "issuer" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of the person or entity that issued the certificate.<p/>"
          },
          "issuerId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The issuer is the X.500 distinguished name of the CA or entity that signed the certificate. <p/>\r\nIn cases of a self-signed certificate, the issuer and subject are the same.\r\nUsing the certificate implies trusting the signer."
          },
          "issuerUniqueId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Gets the <code>issuerUniqueID</code> value from the certificate.\r\nThe issuer unique identifier is present in the certificate\r\nto handle the possibility of reuse of issuer names over time. <p/>"
          },
          "keyUsage" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Identifies the purpose of the key in the certificate, such as encipherment, digital signature or certificate signing. <p/>"
          },
          "md5Fingerprint" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Fingerprints are a way to verify the source of a certificate. After you import or export a certificate, you can\r\ncontact your partner and ensure the MD5 fingerprints at both ends are identical. Do this before attempting to\r\nexchange documents. If the fingerprints do not match, one of the certificates might be corrupted or out of date. <p/>"
          },
          "metadata" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Metadata for this certificate. <p/>",
            "$ref" : "#/definitions/xml_ns0_mapType"
          },
          "publicKey" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Public key which is used to encrypt messages before sending. <p/>"
          },
          "publicKeyAlgorithm" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "An algorithm identifier that specifies the public key crypto system this key belongs to and any associated key parameters, such as key length <p/>"
          },
          "publicKeyExtensions" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Extensions used to store additional information regarding the certificate holder and to define certificate usage. <p/>"
          },
          "publicKeyLength" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Key length indicates encryption strength, the larger the number the stronger the key. <p/>"
          },
          "selfSigned" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Self-signed certificates are easily created. The primary disadvantage is lack of\r\nverification by a trusted third party."
          },
          "serialNumber" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The serial number uniquely identifies the certificate.  <p/>\r\nThe CA or entity that issued the certificate assigned this number. <p/>\r\nIf the issuer revokes a certificate, it can place the serial number on a certificate revocation (CRL) list."
          },
          "sha1Fingerprint" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Fingerprints are a way to verify the source of a certificate. After you import or export a certificate, you can\r\ncontact your partner and ensure the SHA1 fingerprints at both ends are identical. Do this before attempting to\r\nexchange documents. If the fingerprints do not match, one of the certificates might be corrupted or out of date. <p/>"
          },
          "signatureAlgorithm" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The algorithm the CA used to sign the certificate. <p/>"
          },
          "subject" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The name of person or entity who was issued the certificate. <p/>"
          },
          "subjectUniqueId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The subject key identifier extension provides a means of identifying\r\ncertificates that contain a particular public key."
          },
          "validFrom" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The date the certificate became valid. <p/>"
          },
          "validTo" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The date the certificate expires, provided it is not compromised or revoked before that date. <p/>"
          },
          "x509Version" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The version of the X.509 standard that applies to the certificate <p/>"
          }
        }
      }, { } ],
      "description" : ""
    },
    "xml_ns0_oftpProducerExchangePointBean" : {
      "title" : "oftpProducerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_producerExchangePointBean"
      }, {
        "properties" : {
          "SSID" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "SSID identification code - The start session identification (SSID) of the local or remote party. Trading partners\r\nexchange SSIDs to identify each other in the protocol handshake and session setup.   <p/>"
          },
          "connectTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Connect timeout (seconds) - Time in seconds the trading engine waits for a connection to the delivery exchange\r\nbefore the attempt times out. Although the default value is 30 seconds, this may be longer than the interval\r\nallowed by your operating system (OS). For example, Windows XP by default allows a maximum timeout of 20 seconds.\r\nThe actual connect timeout interval is the lesser of the OS timeout and the value set in the trading engine. <p/>"
          },
          "creditCounter" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Credit counter - The number of consecutive data exchange buffers sent by the speaker before it must wait for a\r\ncredit (CDT) command from the listener. The credit value is only applied to data flow in the data transfer phase.\r\nThe speaker's available credit is initialized to SSIDCRED when it receives a start file positive answer (SFPA)\r\ncommand from the listener. It is zeroed by the end file (EFID) command. After negotiation, the smallest size must\r\nbe selected in the answer of the responder or a protocol error aborts the session.  <p/>"
          },
          "dataExchangeBuffer" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Data exchange buffer - The length in octets of the largest acceptable data exchange buffer. The length includes\r\nthe command octet, but not the stream transmission header. After negotiation, the smallest size is selected.\r\nThe value in this field maps to the SSIDSDEB field in the SSID OFTP protocol command. <p/>"
          },
          "enableHostNameVerification" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Enable host name verification - If selected, the trading engine compares the name of the TLS server to the name\r\nin the server's certificate to ensure they are the same.<p/>"
          },
          "localSSIDOverride" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "If overrideSsidAndPassword is set to true, this SSID must be set. This SSID will be used instead of the one from\r\nthe community's OFTP delivery exchange. <p/>"
          },
          "localSSIDPasswordOverride" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Entering an override password is optional. This password overrides the password in the field named \"This server\r\nrequires a session password\", which is an optional field for a community OFTP delivery exchange. <p/>"
          },
          "networkSettings" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The Network Settings for this Exchange Point. The network settings on an OFTP Exchange Point must be one of the\r\nfollowing type: TCP, X25, ISDN.<p/>",
            "$ref" : "#/definitions/xml_ns0_networkSettingsBean"
          },
          "overrideSsidAndPassword" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this to true in order to have this partner exchange use an SSID code and password different than the values\r\nset on a community's OFTP delivery exchange. <p/>"
          },
          "readTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Read timeout (seconds) - The maximum number of seconds the server waits when reading data from a partner. <p/>"
          },
          "sessionPassword" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The OFTP session password -  The password can be no longer than eight alphanumeric characters and is case sensitive. <p/>"
          },
          "useSessionPassword" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set OFTP session password - If set to true, the partner must present this password to your community. The password\r\nis compared to the one your community has stored for the partner. <p/>"
          },
          "version" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "OFTP Protocol version. <p/>\r\n<ul>\r\nFor Odette FTP V1 <p/>\r\n<li>VERSION_1_3</li>\r\n<li>VERSION_1_4</li>\r\nFor Odette FTP V2:\r\n<li>VERSION_2_0</li>\r\n</ul> <p/>",
            "$ref" : "#/definitions/xml_ns0_protocolVersion"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_smtpServerExchangePointBean" : {
      "title" : "smtpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverExchangePointBean"
      }, {
        "properties" : {
          "attachmentsOnly" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this option to true to eliminate extraneous message fragments. This option is applicable when the\r\npartners send messages using a mail client such as Microsoft Outlook. It is available under the generic email\r\nmessage protocol, but not AS1.\r\n\r\nWhen a partner uses a mail client application to send a trading document as an attachment to an email message,\r\nthe trading engine actually receives two or more documents. These can include the MIME header, the text of the\r\nemail message and the document attachment. The trading engine tracks and processes the incidental MIME body parts\r\njust as it does any document. Although such processing does no harm, it can cause confusion.\tSetting this option\r\nto true causes the incidental MIME body parts to be ignored while preserving the important document attachments."
          },
          "emailAddress" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The email address that the remote partners use to send messages to the local community."
          },
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The local port used by the embedded SMTP server to listen for incoming connections.\r\nThe default value is 4026."
          },
          "senderIdentificationType" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify how the sender will be identified; must be set to 'PD_EMAIL_ADDRESSES' or\r\n'PARTNER_EMAIL_ACCOUNTS'.",
            "$ref" : "#/definitions/xml_ns0_emailAuthenticationType"
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Value of sequence timeout in seconds. <p/>"
          },
          "sequenced" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Set this option to true if you want all messages that are consumed by this pickup to be delivered in their\r\noriginal consumption order. <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_edifactAckType" : {
      "type" : "string",
      "title" : "edifactAckType",
      "description" : "",
      "enum" : [ "CONTROL_EANCOM_D93A", "CONTROL_EANCOM_D96A", "CONTROL_UN_EDIEL_2", "CONTROL_UN_2", "CONTROL_UN_2_1", "CONTROL_UN_2_2", "CONTROL_UN_3", "CONTROL_UN_4", "CONTROL_EDIG_S_3_2", "CONTROL_EDIG_S_4" ]
    },
    "xml_ns0_deliverySettingsBean" : {
      "title" : "deliverySettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_integrationDeliverySettingsBean"
      }, { } ],
      "description" : ""
    },
    "json_MessageAttributeBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : ""
        },
        "value" : {
          "type" : "string",
          "description" : ""
        },
        "owningMessageId" : {
          "type" : "string",
          "description" : ""
        },
        "parentMessage" : {
          "type" : "string",
          "description" : ""
        }
      },
      "title" : "MessageAttributeBean",
      "description" : ""
    },
    "json_PartyBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Specify whether the party is enabled."
        },
        "partyName" : {
          "type" : "string",
          "description" : "The friendly name for the specified party."
        },
        "defaultRoutingId" : {
          "description" : "The default Routing Id for the specified party.\r\nA Routing Id is a unique identifier that the trading engine uses as the \"to\" and \"from\" address for e-commerce\r\nmessages exchanged over the Internet. Routing Ids are used for party identification at transport level.\r\nA Routing Id can be in any format or length (up to 255 characters), including standard EDI or\r\ncustom formats that include special characters or spaces.\r\n<p/>\r\nAlthough a community or partner can have many Routing Ids, the user interface designates one per community or\r\npartner as the default. Default Routing Ids are used by default for message protocol headers when packaging\r\nmessages.\r\nFor example, when packaging an AS2 message the default Routing Ids are used for <code>as2-to</code> and\r\n<code>as2-from</code> attributes in headers, regardless of the Routing Ids parsed from the payload.",
          "$ref" : "#/definitions/json_RoutingIdBean"
        },
        "countryCode" : {
          "type" : "string",
          "description" : "The country code for the specified party which indicates its location.\r\nThe format is [ISO code]-[Country name]. For a list of codes see the Website for ISO (International Organization\r\nfor Standardization): <a href=\"http://www.iso.org/iso/home.html\">http://www.iso.org/iso/home.html</a>."
        },
        "routingIds" : {
          "type" : "string",
          "description" : "The Routing Ids used by the party."
        },
        "primaryContact" : {
          "description" : "The principal contact person for the party and the corresponding email address. You can provide\r\nadditional information, including a phone number, email and notes about the contact.",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "contacts" : {
          "type" : "string",
          "description" : "The list of contacts with the primary contact first."
        },
        "ftpUsers" : {
          "type" : "string",
          "description" : ""
        },
        "sshUsers" : {
          "type" : "string",
          "description" : ""
        },
        "WSUsers" : {
          "type" : "string",
          "description" : "The list of Web Services users defined on this party."
        }
      },
      "title" : "PartyBean",
      "description" : ""
    },
    "xml_ns0_edifactSyntaxVersion" : {
      "type" : "string",
      "title" : "edifactSyntaxVersion",
      "description" : "",
      "enum" : [ "VERSION_1", "VERSION_2", "VERSION_3", "VERSION_4", "VERSION_4_RELEASE_1" ]
    },
    "xml_ns0_vdaDocumentAgreementBean" : {
      "title" : "vdaDocumentAgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_documentAgreementBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_PGPCertificateInfoBean" : {
      "title" : "PGPCertificateInfoBean",
      "allOf" : [ {
        "properties" : {
          "fingerprint" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Fingerprints are a way to verify the source of a certificate. After you import or export a certificate, you can\r\ncontact your partner and ensure the fingerprints at both ends are identical. Do this before attempting to\r\nexchange documents. If the fingerprints do not match, one of the certificates might be corrupted or out of date. <p/>"
          },
          "friendlyName" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "A user-defined name for a certificate.  <p/>\r\nNaming the certificate can help identify the community or partner it belongs to."
          },
          "id" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "ID of this certificate."
          },
          "keyAlgorithm" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "An algorithm identifier that specifies the public key crypto system this key belongs to and any associated key parameters, such as key length <p/>"
          },
          "keyId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The keyId is string identifier for the PGP Certificate."
          },
          "keyLength" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Key length indicates encryption strength, the larger the number the stronger the key. <p/>"
          },
          "publicKeys" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "The Public Key is what its name suggests - Public. It is made available\r\nto everyone via a publicly accessible repository or directory. On the other hand,\r\nthe Private Key must remain confidential to its respective owner.",
            "$ref" : "#/definitions/xml_ns0_managedPGPPublicKeyBean"
          },
          "signatures" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "A digital signature certifies and timestamps a document",
            "$ref" : "#/definitions/xml_ns0_managedPGPSignatureBean"
          },
          "validFrom" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The date the certificate became valid. <p/>"
          },
          "validTo" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The date the certificate expires, provided it is not compromised or revoked before that date. <p/>"
          }
        }
      }, { } ],
      "description" : ""
    },
    "json_Hl7v2MessagingIdBean" : {
      "title" : "Hl7v2MessagingIdBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_MessagingIdBean"
      }, {
        "properties" : {
          "applicationNamespaceId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the namespace ID (IS) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\nThis field uniquely identifies the namespace ID (IS) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\nThe network enterprise consists of all those applications that participate in the exchange of HL7 messages within the enterprise. Entirely site-defined."
          },
          "applicationUniversalId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID (ST) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\nThis field uniquely identifies the universal ID (ST) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\nThe network enterprise consists of all those applications that participate in the exchange of HL7 messages within the enterprise. Entirely site-defined."
          },
          "applicationUniversalIdType" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID type (ID) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\nThis field uniquely identifies the universal ID type (ID) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\nThe network enterprise consists of all those applications that participate in the exchange of HL7 messages within the enterprise. Entirely site-defined."
          },
          "facilityNamespaceId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the namespace ID (IS) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n<p/>\r\nThis field uniquely identifies the namespace ID (IS) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined"
          },
          "facilityUniversalId" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID (ST) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n<p/>\r\nThis field uniquely identifies the universal ID (ST) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined"
          },
          "facilityUniversalIdType" : {
            "type" : "string",
            "description" : "This field uniquely identifies the universal ID type (ID) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n<p/>\r\nThis field uniquely identifies the universal ID type (ID) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_sslCipherSuite" : {
      "type" : "string",
      "title" : "sslCipherSuite",
      "description" : "",
      "enum" : [ "SSL_RSA_EXPORT1024_WITH_DES_CBC_SHA", "SSL_RSA_EXPORT1024_WITH_RC4_56_SHA", "SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", "SSL_RSA_EXPORT_WITH_RC4_40_MD5", "SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA", "SSL_RSA_WITH_3DES_EDE_CBC_SHA", "SSL_RSA_WITH_AES_128_CBC_SHA", "SSL_RSA_WITH_AES_256_CBC_SHA", "SSL_RSA_WITH_DES_CBC_SHA", "SSL_RSA_WITH_NULL_MD5", "SSL_RSA_WITH_NULL_SHA", "SSL_RSA_WITH_RC4_128_MD5", "SSL_RSA_WITH_RC4_128_SHA" ]
    },
    "xml_ns0_httpServerExchangePointBean" : {
      "title" : "httpServerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_serverExchangePointBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The local port used by the embedded HTTP server to listen for incoming connections. The default value is 4080."
          },
          "path" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The last component of the path that partners will use to send messages to this server.\r\nA good choice for this value would be one of the community's routing IDs.\r\nThe path to the HTTP server must be unique."
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Time in seconds that B2Bi waits for missing messages of a sequence before taking the appropriate action.\r\nThis feature avoids the blocking of processing when a sequenced message is not available. Default value is\r\n60 seconds."
          },
          "sequenced" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether all messages that are consumed by this pickup should be delivered in their original\r\nconsumption order.\r\n<p/>\r\nIn B2Bi message-handling, sequential delivery is the ability to deliver messages in the order they\r\nwere originally consumed on a specific pickup. This is sometimes referred to as first-in-first-out\r\n(FIFO) behavior.\r\n<p/>\r\nSequential message delivery is implemented only for trading engine pickups, not for integration\r\nengine pickups"
          },
          "ssl" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "syncResponseGenInBackend" : {
            "type" : "boolean",
            "xml" : {
              "namespace" : ""
            },
            "description" : "Synchronous response generated in back end - Select this option to have the back-end application generate\r\nsynchronous responses. If this option is not selected, the synchronous response is generated within the trading\r\nengine. By default, this option is not selected."
          }
        }
      } ],
      "description" : ""
    },
    "json_RejectionRuleType_x12" : {
      "type" : "string",
      "title" : "RejectionRuleType",
      "description" : "",
      "enum" : [ "NONE", "ENTIRE_INTERCHANGE", "SAME_TYPE", "CUSTOM_TYPE" ]
    },
    "json_MllpServerSettingsBean" : {
      "title" : "MllpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerSettingsBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The TCP port on which the embedded server listens for connection requests."
          },
          "minThreads" : {
            "type" : "number",
            "description" : "The least number of threads the trading engine must dedicate to the server."
          },
          "maxThreads" : {
            "type" : "number",
            "description" : "The most threads the trading engine can dedicate to the server."
          },
          "startBlockCharacter" : {
            "type" : "number",
            "description" : "The decimal byte value used to identify the start block character.\r\nStart and stop block characters enclose the message data that is sent or received in through MLLP messages.\r\nAt runtime, B2Bi converts this decimal value to hexadecimal. The default value is 11 (hexadecimal B).\r\nThe default value is the customary MLLP value.\r\nYou must use the same values for the client and server sides of the MLLP exchange."
          },
          "endBlockCharacter" : {
            "type" : "number",
            "description" : "The decimal byte value used to identify the end block character.\r\nStart and stop block characters enclose the message data that is sent or received in through MLLP messages.\r\nAt runtime, B2Bi converts this decimal value to hexadecimal.\r\nThe default value is 28 (hexadecimal 1C).\r\nThe default value is the customary MLLP value.\r\nYou must use the same values for the client and server sides of the MLLP exchange."
          },
          "acknowledgementMode" : {
            "description" : "The option for sending acknowledgements. The following options are available for the acknowledgement mode:\r\n<ul>\r\n<li><b>NONE</b> - Select this option to implement MLLP connections without acknowledgements.</li>\r\n<li><b>MLLP</b> - Select this option to enable transport-level acknowledgements for connections to this MLLP server.</li>\r\n<li><b>SYNC_FROM_BACKEND</b> Select this option if you want connections to this MLLP server kept open until an application acknowledgement is generated in the back end.</li>\r\n</ul>",
            "$ref" : "#/definitions/json_AcknowledgementMode"
          },
          "ssl" : {
            "type" : "boolean",
            "description" : "Specify whether Secure Sockets Layer protocol is in use during connections. If this option is set to\r\n<code>true</code>, the server presents a certificate for verification. To do this, the server must support SSL\r\nand a certificate in a profile must be designated as the SSL certificate. If this option is set to\r\n<code>false</code>, connections are not encrypted."
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "Select the level of security that suits your need and enables communicating with others who might have different\r\nsecurity requirements. For example, when an SSL connection is established, the client and server exchange\r\ninformation about cipher suites they have in common. Then they communicate using the common cipher suite that\r\noffers the highest level of security. If they do not have a chipper suite in common, secure communication\r\nis not possible.  <p/>\r\nIf this option is set to <code>false</code>, all cipher suites are supported by default."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "The specific cipher suites supported by the server. If empty, all cipher suites are supported by\r\ndefault. The default is less secure than specifying only certain cipher suites.\r\nThe default order in the list is the preferred order of use.\r\n<p/>\r\nA cipher suite is a collection of security algorithms used in making connections via Secure Sockets Layer or\r\nTransport Layer Security. For example, an SSL or TLS protocol requires signing messages using a message digest\r\nalgorithm. But the choice of algorithm is determined by the particular cipher suite being used for the\r\nconnection. Typically, you can select an MD5 or SHA digest algorithm.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "enableClientAuthenticatedSsl" : {
            "type" : "boolean",
            "description" : "Specify whether the partner’s certificate should be used for authentication when the partner connects to the\r\nserver using SSL. If this option is set to true, partners are required to present a certificate for identity\r\nverification trusted by the server before the delivery exchanges using this server allow the connection. You\r\nmust add an authentication certificate for the partner.\r\nIf this option is set to <code>false</code>, non-authenticated HTTPS is used."
          },
          "certificate" : {
            "type" : "string",
            "description" : "The path to get the certificate for this server. <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_persistenceMode" : {
      "type" : "string",
      "title" : "persistenceMode",
      "description" : "",
      "enum" : [ "NON_PERSISTED", "PERSISTED", "AS_DEFINED_BY_QUEUE" ]
    },
    "xml_ns0_isdnServerNetworkSettingsBean" : {
      "title" : "isdnServerNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_isdnNetworkSettingsBean"
      }, {
        "properties" : {
          "listenMSN" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "The subscriber number this embedded server answers to.\r\nThis is the number as seen by the ISDN router.\r\nTypically, prefix digits (international, external line) have been removed by the telecom equipment.\r\nCheck with your telecom operator for the correct number."
          }
        }
      } ],
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "json_X25ClientNetworkSettingsBean" : {
      "title" : "X25ClientNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_X25NetworkSettingsBean"
      }, {
        "properties" : {
          "remoteNUA" : {
            "type" : "string",
            "description" : "The network user address of the remote partner’s server to connect to (OFTP V1 X.25 only)"
          },
          "reverseCharging" : {
            "type" : "boolean",
            "description" : "When true, and when supported by the carrier and accepted by the partner upon call establishment,\r\nthe called party is charged for the call instead of the caller (OFTP V1 X.25 only)"
          },
          "protocolId" : {
            "type" : "string",
            "description" : "Custom data to send to the partner along with the call establishment request.\r\nThe data is only meaningful for the remote party. It is usually used to distinguish\r\nbetween calls that are addressed to the same NUA."
          },
          "callUserData" : {
            "type" : "string",
            "description" : "Custom data to send to the partner along with the call establishment request.\r\nThe data is only meaningful for the remote party. It is usually used to distinguish\r\nbetween calls that are addressed to the same NUA."
          }
        }
      } ],
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "json_TcpNetworkSettingsBean" : {
      "title" : "TcpNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_NetworkSettingsBean"
      }, {
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The fully qualified domain name or IP address of the OFTP server."
          },
          "port" : {
            "type" : "number",
            "description" : "The TCP port on which the server listens for connection requests. This field does not apply to OFTP V1 X.25."
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_emailB2biConsumerExchangePointBean" : {
      "title" : "emailB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "json_TradingPartnerBean" : {
      "title" : "TradingPartnerBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PartyBean"
      }, {
        "properties" : {
          "subscribedCommunities" : {
            "type" : "string",
            "description" : ""
          },
          "tradingDeliveryExchanges" : {
            "type" : "string",
            "description" : ""
          },
          "defaultDelivery" : {
            "type" : "string",
            "description" : ""
          },
          "defaultEncryptionCertificate" : {
            "type" : "string",
            "description" : ""
          },
          "publicCertificates" : {
            "type" : "string",
            "description" : ""
          },
          "emailUsers" : {
            "type" : "string",
            "description" : ""
          },
          "messagingIds" : {
            "type" : "string",
            "description" : ""
          },
          "pgpCertificates" : {
            "type" : "string",
            "description" : ""
          },
          "defaultPGPCertificateId" : {
            "type" : "string",
            "description" : ""
          },
          "defaultPGPCertificate" : {
            "type" : "string",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "xml_ns0_mimeEmailB2biConsumerExchangePointBean" : {
      "title" : "mimeEmailB2biConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_b2biConsumerExchangePointBean"
      }, { } ],
      "description" : ""
    },
    "xml_ns0_syntaxRule" : {
      "type" : "string",
      "title" : "syntaxRule",
      "description" : "",
      "enum" : [ "ANA", "ANAA" ]
    },
    "xml_ns0_hl7v2AgreementBean" : {
      "title" : "hl7v2AgreementBean",
      "allOf" : [ {
        "$ref" : "#/definitions/xml_ns0_agreementBean"
      }, {
        "properties" : {
          "characterSet" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Field used to filter messages to be handled by this agreement.</br>\r\nCharacter set options:\r\n<ul>\r\n<li><b>blank</b> (any)</li>\r\n<li><b>ASCII</b></li>\r\n<li><b>ISO 8859-1</b> ISO/IEC Part 1 - Latin - 1 Western European</li>\r\n<li><b>ISO 8859-2</b> ISO/IEC Part 2 - Latin - 2 Central European</li>\r\n<li><b>ISO 8859-3</b> ISO/IEC Part 3 - Latin - 3 South European</li>\r\n<li><b>ISO 8859-4</b> ISO/IEC Part 4 - Latin - 4 North European</li>\r\n<li><b>ISO 8859-5</b> ISO/IEC Part 5 - Latin/Cyrillic</li>\r\n<li><b>ISO 8859-6</b> ISO/IEC Part 6 - Latin/Arabic</li>\r\n<li><b>ISO 8859-7</b> ISO/IEC Part 7 - Latin/Greek</li>\r\n<li><b>ISO 8859-8</b> ISO/IEC Part 8 - Latin/Hebrew</li>\r\n<li><b>ISO 8859-9</b> ISO/IEC Part 9 - Latin - 5 Turkish</li>\r\n<li><b>ISO 8859-15</b> ISO/IEC Part 15 - Latin - 9 Western European</li>\r\n<li><b>ISO IR14</b> Code for Information exchange</li>\r\n<li><b>ISO IR87</b> Japanese Graphic Character set</li>\r\n<li><b>ISO IR159</b> Supplementary Graphic Character set</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_characterSet"
          },
          "processingId" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Field used to filter messages to be handled by this agreement.</br>\r\nProcessing ID options:\r\n<ul>\r\n<li><b>P</b> Production</li>\r\n<li><b>D</b> Debugging</li>\r\n<li><b>T</b> Training</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_processing"
          },
          "processingMode" : {
            "xml" : {
              "namespace" : ""
            },
            "description" : "Field used to filter messages to be handled by this agreement.</br>\r\nProcessing mode options:\r\n<ul>\r\n<li><b>T</b> Current processing, transmitted at intervals</li>\r\n<li><b>A</b> Archive</li>\r\n<li><b>R</b> Restore from archive</li>\r\n<li><b>I</b> Initial load</li>\r\n</ul>",
            "$ref" : "#/definitions/xml_ns0_processingMode"
          },
          "receiverApplicationNamespaceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the namespace ID (IS) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "receiverApplicationUniversalId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID (ST) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "receiverApplicationUniversalIdType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID type (ID) of the receiving application (MSH-0005) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "receiverFacilityNamespaceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the namespace ID (IS) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined\r\n</br> This is a read-only field."
          },
          "receiverFacilityUniversalId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID (ST) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined\r\n</br> This is a read-only field."
          },
          "receiverFacilityUniversalIdType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID type (ID) of the receiving facility (MSH-00006). This field identifies the receiving application among multiple\r\nidentical instances of the application running on behalf of different organizations. Entirely site-defined\r\n</br> This is a read-only field."
          },
          "senderApplicationNamespaceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the namespace ID (IS) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "senderApplicationUniversalId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID (ST) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "senderApplicationUniversalIdType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID type (ID) of the sending application (MSH-00003) among all other applications within the network enterprise.\r\n</br> This is a read-only field."
          },
          "senderFacilityNamespaceId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the namespace ID (IS) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n</br> This is a read-only field."
          },
          "senderFacilityUniversalId" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID (ST) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n</br> This is a read-only field."
          },
          "senderFacilityUniversalIdType" : {
            "type" : "string",
            "xml" : {
              "namespace" : ""
            },
            "description" : "This field uniquely identifies the universal ID type (ID) of the sending facility (MSH-00004). This field contains the address of one of several occurrences of\r\nthe same application within the sending system. Absent other considerations, the Medicare Provider ID might be used with an appropriate sub-identifier in the second component. Entirely user-defined.\r\n</br> This is a read-only field."
          }
        }
      } ],
      "description" : ""
    },
    "json_NewCookie" : {
      "title" : "NewCookie",
      "allOf" : [ {
        "$ref" : "#/definitions/json_Cookie"
      }, {
        "properties" : {
          "expiry" : {
            "type" : "number",
            "description" : ""
          },
          "httpOnly" : {
            "type" : "boolean",
            "description" : ""
          },
          "secure" : {
            "type" : "boolean",
            "description" : ""
          },
          "comment" : {
            "type" : "string",
            "description" : ""
          },
          "maxAge" : {
            "type" : "number",
            "description" : ""
          }
        }
      } ],
      "description" : ""
    },
    "json_IsdnNetworkSettingsBean" : {
      "title" : "IsdnNetworkSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_NetworkSettingsBean"
      }, {
        "properties" : {
          "bandwidthLimitedTo56k" : {
            "type" : "boolean",
            "description" : "Select this when a provider uses 56 kbps-bit transparent operation\r\nwith byte-framing from the network as its physical layer protocol\r\ninstead of the default 64-kbps with HDLC framing. For such cases,\r\nthis check box must be selected for the ISDN connection to be properly established."
          },
          "lowestIncomingChannel" : {
            "type" : "number",
            "description" : "The starting value for the incoming channels identifier’s counter. If blank, use the network’s default value."
          },
          "highestIncomingChannel" : {
            "type" : "number",
            "description" : "The highest value for the incoming channels identifier’s counter. If blank, use the network’s default value."
          },
          "lowestOutgoingChannel" : {
            "type" : "number",
            "description" : "The starting value for the outgoing channels identifier’s counter. If blank, use the network’s default value."
          },
          "highestOutgoingChannel" : {
            "type" : "number",
            "description" : "The highest value for the outgoing channels identifier’s counter. If blank, use the network’s default value."
          },
          "lowestTwoWayChannel" : {
            "type" : "number",
            "description" : "The starting value for the two-way channels identifier’s counter. If blank, use the network’s default value."
          },
          "highestTwoWayChannel" : {
            "type" : "number",
            "description" : "The highest value for the two-way channels identifier’s counter. If blank, use the network’s default value."
          },
          "layer2WindowSize" : {
            "type" : "number",
            "description" : "Specifies how many layer 2 (ISO 7776) packets can be sent\r\nbefore an acknowledgment is required from the partner. If blank, use the network’s default value."
          },
          "layer3WindowSize" : {
            "type" : "number",
            "description" : "Specifies how many layer 3 (ISO 8208) packets can be sent\r\nbefore an acknowledgment is required from the partner. If blank, use the network’s default value."
          },
          "layer3PacketSize" : {
            "type" : "number",
            "description" : "Specifies the size of the layer 3 packets. If blank, use the network’s default value."
          },
          "brickControllerId" : {
            "type" : "number",
            "description" : "reference to ISDN controller"
          }
        }
      } ],
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "json_AttributeTemplateBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "description" : "A name for this attribute to identify it."
        },
        "required" : {
          "type" : "boolean",
          "description" : "Select this option if the attribute is to be included on all exchanges."
        },
        "fieldStyle" : {
          "description" : "Select whether to display a single value, a single selectable value or a list of selectable values.",
          "$ref" : "#/definitions/json_FieldStyle"
        },
        "possibleValues" : {
          "type" : "array",
          "description" : "Enter the value or values that are available to select. Available only if the attribute field style is\r\nSINGLESELECT or MULTISELECT.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "usedForSearching" : {
          "type" : "boolean",
          "description" : "Select this check box to make this attribute a valid search criteria."
        },
        "usedForProcessing" : {
          "type" : "boolean",
          "description" : "Select this option to make this attribute available as a criteria for conditional message processing."
        }
      },
      "title" : "AttributeTemplateBean",
      "description" : ""
    },
    "json_FtpServerSettingsBean" : {
      "title" : "FtpServerSettingsBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_ServerSettingsBean"
      }, {
        "properties" : {
          "localPort" : {
            "type" : "number",
            "description" : "The port on which the embedded server listens for connection requests."
          },
          "cipherSuites" : {
            "type" : "array",
            "description" : "List with cipher suites.",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "implicitSsl" : {
            "type" : "boolean",
            "description" : "Select this option if you want to use implicit SSL rather than explicit SSL, which is the default mode. FTP supports two methods to accomplish security through a sequence of commands passed between two computers. The sequence is initiated with explicit (active) or implicit (passive) security.\r\n<ul>\r\n<li><b>Explicit security.</b> To establish the SSL link, explicit security requires the FTP client to issue\r\na specific command to the FTP server after establishing a connection. The default FTP server\r\nport is used.</li>\r\n<li><b>Implicit security.</b> Implicit security begins with an SSL connection as soon as the FTP client\r\nconnects to an FTP server. The FTP server defines a specific port for the client to be used for\r\nsecure connections.</li>\r\n</ul>\r\n<b>FTP over SSL Implicit has been deprecated and should no longer be used.</b>"
          },
          "maxConnections" : {
            "type" : "number",
            "description" : "The number of total open connections the trading engine server can make to a partner.\r\nIf you are operating in a cluster environment, this is the total number across the entire cluster, no matter how many JVM nodes are running."
          },
          "onlyPassiveMode" : {
            "type" : "boolean",
            "description" : ""
          },
          "overrideCipherSuites" : {
            "type" : "boolean",
            "description" : "If <b>true</b>, a list of cipher suites should be provided. If no override cipher suites are provided, all cipher suites are supported by default."
          },
          "passivePorts" : {
            "type" : "string",
            "description" : "Ports for inbound passive data connections from FTP clients. You can enter multiple ports.\r\nSeparate individual port numbers by a comma. Alternatively, you can specify a range of ports.\r\nThe following example uses both comma-separated port numbers and a range of ports: <b>50000,50001,50010-50020</b>"
          },
          "remoteHost" : {
            "type" : "string",
            "description" : "The fully qualified domain name or IP address that a community’s partners must use to connect to this embedded server.\r\nThe trading engine supplies a value based on the name of the host computer.\r\nIn many cases you must change this to the external name used by your network firewall or load balancer.\r\nContact your network administrator if you need help with this field."
          },
          "remotePort" : {
            "type" : "number",
            "description" : "The port number that a community’s partners must use to connect to this embedded server.\r\nContact your network administrator if you need help with this field."
          },
          "certificate" : {
            "type" : "string",
            "description" : "Path to get the certificate for this server. <p/>"
          }
        }
      } ],
      "description" : ""
    },
    "json_MqConsumerExchangePointBean" : {
      "title" : "MqConsumerExchangePointBean",
      "allOf" : [ {
        "$ref" : "#/definitions/json_PollingExchangePointBean"
      }, {
        "properties" : {
          "clientModeEnabled" : {
            "type" : "boolean",
            "description" : "The MQSeries connection type. Two options are available:\r\n<ul><li><code>true</code> - select this option to use a channel connection on the local machine or via\r\nthe network, to connect to a queue manager. </li>\r\n<li><code>false</code> – select this option to use an API connection, via shared memory, to a local queue\r\nmanager. </li></ul>"
          },
          "mqHost" : {
            "type" : "string",
            "description" : "The MQSeries server name."
          },
          "multiInstanceEnabled" : {
            "type" : "boolean",
            "description" : "Select this option if you are using an MQSeries multi-instance queue manager."
          },
          "mqStandbyServer" : {
            "type" : "string",
            "description" : "Multi-instance standby server address."
          },
          "mqPort" : {
            "type" : "number",
            "description" : "The MQSeries port number. The default port is 1414."
          },
          "mqChannel" : {
            "type" : "string",
            "description" : "The MQSeries channel."
          },
          "mqQueueName" : {
            "type" : "string",
            "description" : "The name of the MQSeries queue that receives incoming documents."
          },
          "mqQueueManager" : {
            "type" : "string",
            "description" : "The MQSeries queue manager."
          },
          "convertUsingCCSID" : {
            "type" : "boolean",
            "description" : "Enable this option if you want to convert the characters set of messages received from the queue to the set\r\nspecified in the 'mqCharset' field. Set to <code>false</code> if you want to turn off data conversion."
          },
          "mqCharset" : {
            "type" : "number",
            "description" : "The character set for converting data."
          },
          "segmentationModeEnabled" : {
            "type" : "boolean",
            "description" : "Use message segmentation."
          },
          "segmentationType" : {
            "description" : "The message segmentation type:\r\n<ul><li>MQSeries</li>\r\n<li>Application segmentation</li></ul>",
            "$ref" : "#/definitions/json_MqSegmentationType"
          },
          "segmentationSize" : {
            "type" : "number",
            "description" : "The message segmentation size in bytes."
          },
          "useSsl" : {
            "type" : "boolean",
            "description" : "Use SSL to connect to the MQSeries server."
          },
          "sslCipherSuite" : {
            "description" : "The SSL cipher suite to use for SSL encryption.",
            "$ref" : "#/definitions/json_SslCipherSuite"
          },
          "usernamePasswordCredentials" : {
            "description" : "User name and password to connect to the server.",
            "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
          },
          "maxMessagesPerConnection" : {
            "type" : "number",
            "description" : "This value specifies the maximum number of messages to be consumed over a single connection before the connection\r\nis closed and reopened on another processing node. As such, this setting effectively controls load balancing. The\r\ndefault setting of 1 achieves optimal load balancing at the cost of greater overhead per message. Depending on your\r\nmessage volume and the load on each node, this value could be increased to avoid the overhead associated with\r\nreconnecting to the transport server, at the cost  of a less well-balanced cluster."
          },
          "sequenceTimeoutSeconds" : {
            "type" : "number",
            "description" : "Value of sequence timeout in seconds."
          },
          "sequenced" : {
            "type" : "boolean",
            "description" : "Set this option to true if you want all messages that are consumed by this pickup to be delivered in their\r\noriginal consumption order."
          }
        }
      } ],
      "description" : ""
    },
    "json_PublicKeyCredentialsBean" : {
      "type" : "object",
      "properties" : {
        "@id" : {
          "type" : "string",
          "description" : ""
        },
        "alias" : {
          "type" : "string",
          "description" : "The name of the key."
        },
        "encodedClientPublicKey" : {
          "type" : "string",
          "description" : "Secure Shell key for use when key authentication is enabled for SFTP delivery exchanges."
        }
      },
      "title" : "PublicKeyCredentialsBean",
      "description" : "SSH public key information"
    }
  },
  "x-axway" : {
    "serviceType" : "rest",
    "image" : "/api/portal/v1.3/discovery/swagger/apis/88fb1882-f145-4afe-939e-b27737398da8/image",
    "basePaths" : [ "https://api-env.demo.axway.com:8065" ],
    "retirementDate" : 0,
    "corsEnabled" : true,
    "deprecated" : false,
    "availableSDK" : {
      "ios-swift" : "/discovery/sdk/88fb1882-f145-4afe-939e-b27737398da8/ios-swift",
      "titanium" : "/discovery/sdk/88fb1882-f145-4afe-939e-b27737398da8/titanium",
      "android" : "/discovery/sdk/88fb1882-f145-4afe-939e-b27737398da8/android",
      "nodejs" : "/discovery/sdk/88fb1882-f145-4afe-939e-b27737398da8/nodejs"
    },
    "apiResourceType" : "swagger20",
    "accessGrantedDate" : 1556526017512,
    "tags" : {
      "Type" : [ "Axway" ]
    },
    "expired" : false,
    "id" : "88fb1882-f145-4afe-939e-b27737398da8",
    "state" : "published"
  }
}",
                "version": "1.1.0",
                "contentType": "application/json"
            }
        }
    }
]
