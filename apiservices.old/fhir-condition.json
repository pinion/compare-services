[
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "fhir-condition.1",
        "title": "FHIR Condition (apigateway7.7-shoprite)",
        "metadata": {
            "id": "8a2e86048054cad00180760339dc1741",
            "audit": {
                "createTimestamp": "2022-04-29T15:49:24.572+0000",
                "createUserId": "service-account-2cbf8f12-05f6-428a-914e-b0101dd6c40f",
                "modifyTimestamp": "2023-07-21T03:46:44.991+0000",
                "modifyUserId": "service-account-2cbf8f12-05f6-428a-914e-b0101dd6c40f"
            },
            "scope": {
                "id": "8a2e86048054cad0018075fc06821468",
                "kind": "Environment",
                "name": "apigateway7.7-shoprite",
                "title": "apigateway7.7-shoprite",
                "selfLink": "/management/v1alpha1/environments/apigateway7.7-shoprite"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "3",
            "references": [
                {
                    "id": "8a2e82788054c3670180760334b41d52",
                    "kind": "APIService",
                    "name": "fhir-condition",
                    "scopeKind": "Environment",
                    "scopeName": "apigateway7.7-shoprite",
                    "selfLink": "/management/v1alpha1/environments/apigateway7.7-shoprite/apiservices/fhir-condition",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/apigateway7.7-shoprite/apiservicerevisions/fhir-condition.1"
        },
        "attributes": {},
        "finalizers": [],
        "tags": [
            "Industry_Healthcare",
            "Type_Demo_FHIR",
            "Category_ General",
            "Category_Clinical",
            "Standard_FHIR"
        ],
        "spec": {
            "apiService": "fhir-condition",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "DSTU2",
                "contentType": "application/json"
            }
        },
        "x-agent-details": {
            "createdBy": "EnterpriseEdgeGatewayDiscoveryAgent",
            "majorHash": "14536569547139888684",
            "minorHash": "3194428770784173378",
            "externalAPIID": "c46ae619-aab4-4d59-b87a-0974ff3e7a3e",
            "externalAPIName": "FHIR Condition",
            "externalAPIPrimaryKey": "path:/condition-routingKey:"
        }
    }
]
