[
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "vehicule-mock-api-26-11",
        "title": "Vehicule Mock API 26 11 (V7)",
        "metadata": {
            "id": "8a2e833e75f49753017601ae02801217",
            "audit": {
                "createTimestamp": "2020-11-25T23:12:29.824+0000",
                "createUserId": "DOSA_71607e5512ff435ea20837ecb17f85a7",
                "modifyTimestamp": "2023-07-21T03:47:11.288+0000",
                "modifyUserId": "DOSA_71607e5512ff435ea20837ecb17f85a7"
            },
            "scope": {
                "id": "e4efe9b572583eae0172798d82f90596",
                "kind": "Environment",
                "name": "on-premise",
                "title": "Minikube",
                "selfLink": "/management/v1alpha1/environments/on-premise"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "55219",
            "references": [
                {
                    "id": "8a2e8aed75d8459b017601ae01ac4896",
                    "kind": "APIService",
                    "name": "vehicule-mock-api-26-11",
                    "scopeKind": "Environment",
                    "scopeName": "on-premise",
                    "selfLink": "/management/v1alpha1/environments/on-premise/apiservices/vehicule-mock-api-26-11",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/on-premise/apiservicerevisions/vehicule-mock-api-26-11"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayAgent",
            "externalAPIID": "7a7c3c9a-aa1b-4d1b-8074-83b9fa20bff9"
        },
        "finalizers": [],
        "tags": [
            "APIID_18c6e2e0-930e-4517-b4cb-b92e4d1c55da"
        ],
        "spec": {
            "apiService": "vehicule-mock-api-26-11",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "live",
                "contentType": "application/json"
            }
        }
    }
]
