[
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "27e35424-bd6c-11eb-aab8-9ab74868d705.1",
        "title": "IdRatherBeWriting-open-weather_map_api-2.5.2-resolved.json (gkev7)",
        "metadata": {
            "id": "8a2e81f779a10dd70179a4192504047e",
            "audit": {
                "createTimestamp": "2021-05-25T15:16:21.892+0000",
                "createUserId": "DOSA_34646b99c77e486ea809f9017f00ce27",
                "modifyTimestamp": "2023-07-21T03:47:01.936+0000",
                "modifyUserId": "DOSA_34646b99c77e486ea809f9017f00ce27"
            },
            "scope": {
                "id": "8a2e924a7943c8d501795745d5f61815",
                "kind": "Environment",
                "name": "gkev7",
                "title": "gkev7",
                "selfLink": "/management/v1alpha1/environments/gkev7"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "5",
            "references": [
                {
                    "id": "8a2e81f779a10dd70179a419224c0475",
                    "kind": "APIService",
                    "name": "27e35424-bd6c-11eb-aab8-9ab74868d705",
                    "scopeKind": "Environment",
                    "scopeName": "gkev7",
                    "selfLink": "/management/v1alpha1/environments/gkev7/apiservices/27e35424-bd6c-11eb-aab8-9ab74868d705",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/gkev7/apiservicerevisions/27e35424-bd6c-11eb-aab8-9ab74868d705.1"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayDiscoveryAgent",
            "externalAPIID": "1a312115-c023-4fc1-8baf-856a522074f4",
            "externalAPIName": "IdRatherBeWriting-open-weather_map_api-2.5.2-resolved.json",
            "GatewayType": "Edge",
            "majorHash": "12644228957744042597",
            "minorHash": "6705419841308499834",
            "externalAPIPrimaryKey": "vhost:-path:/data/2.5/-routingKey:"
        },
        "finalizers": [],
        "tags": [
            "APIID_997782a0-0d4e-4fea-ac75-04346f3d7124"
        ],
        "spec": {
            "apiService": "27e35424-bd6c-11eb-aab8-9ab74868d705",
            "definition": {
                "type": "oas3",
                "value": "",
                "version": "2.5.2",
                "contentType": "application/json"
            }
        }
    },
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "27e35424-bd6c-11eb-aab8-9ab74868d705.2",
        "title": "IdRatherBeWriting-open-weather_map_api-2.5.2-resolved.json (gkev7)",
        "metadata": {
            "id": "8a2e8d7279a10cdb0179a41afc0f0480",
            "audit": {
                "createTimestamp": "2021-05-25T15:18:22.479+0000",
                "createUserId": "DOSA_34646b99c77e486ea809f9017f00ce27",
                "modifyTimestamp": "2023-07-21T03:47:02.027+0000",
                "modifyUserId": "DOSA_34646b99c77e486ea809f9017f00ce27"
            },
            "scope": {
                "id": "8a2e924a7943c8d501795745d5f61815",
                "kind": "Environment",
                "name": "gkev7",
                "title": "gkev7",
                "selfLink": "/management/v1alpha1/environments/gkev7"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "5",
            "references": [
                {
                    "id": "8a2e81f779a10dd70179a419224c0475",
                    "kind": "APIService",
                    "name": "27e35424-bd6c-11eb-aab8-9ab74868d705",
                    "scopeKind": "Environment",
                    "scopeName": "gkev7",
                    "selfLink": "/management/v1alpha1/environments/gkev7/apiservices/27e35424-bd6c-11eb-aab8-9ab74868d705",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/gkev7/apiservicerevisions/27e35424-bd6c-11eb-aab8-9ab74868d705.2"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayDiscoveryAgent",
            "externalAPIID": "1a312115-c023-4fc1-8baf-856a522074f4",
            "externalAPIName": "IdRatherBeWriting-open-weather_map_api-2.5.2-resolved.json",
            "GatewayType": "Edge",
            "majorHash": "4811847956208722782",
            "minorHash": "6705419841308499834",
            "externalAPIPrimaryKey": "vhost:-path:/data/2.5/-routingKey:",
            "prevAPIServiceRevisionID": "8a2e81f779a10dd70179a4192504047e"
        },
        "finalizers": [],
        "tags": [
            "APIID_997782a0-0d4e-4fea-ac75-04346f3d7124"
        ],
        "spec": {
            "apiService": "27e35424-bd6c-11eb-aab8-9ab74868d705",
            "definition": {
                "type": "oas3",
                "value": "",
                "version": "2.5.2",
                "contentType": "application/json"
            }
        }
    }
]
