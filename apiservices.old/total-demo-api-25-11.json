[
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "total-demo-api-25-11",
        "title": "Total Demo API 25 11 (V7)",
        "metadata": {
            "id": "8a2e833e75f497530175fea99cfb11a2",
            "audit": {
                "createTimestamp": "2020-11-25T09:08:50.043+0000",
                "createUserId": "DOSA_71607e5512ff435ea20837ecb17f85a7",
                "modifyTimestamp": "2023-07-21T03:47:11.211+0000",
                "modifyUserId": "DOSA_71607e5512ff435ea20837ecb17f85a7"
            },
            "scope": {
                "id": "e4efe9b572583eae0172798d82f90596",
                "kind": "Environment",
                "name": "on-premise",
                "title": "Minikube",
                "selfLink": "/management/v1alpha1/environments/on-premise"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "55176",
            "references": [
                {
                    "id": "8a2e8aed75d8459b0175fea99bd54801",
                    "kind": "APIService",
                    "name": "total-demo-api-25-11",
                    "scopeKind": "Environment",
                    "scopeName": "on-premise",
                    "selfLink": "/management/v1alpha1/environments/on-premise/apiservices/total-demo-api-25-11",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/on-premise/apiservicerevisions/total-demo-api-25-11"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayAgent",
            "externalAPIID": "e85e5df0-5e1f-4fdf-aa58-6e322b4e95a7"
        },
        "finalizers": [],
        "tags": [
            "APIID_bbb418b7-4d00-4126-97a3-c45956dfc0a8"
        ],
        "spec": {
            "apiService": "total-demo-api-25-11",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "previous",
                "contentType": "application/json"
            }
        }
    }
]
