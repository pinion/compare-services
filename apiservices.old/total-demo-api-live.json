[
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "total-demo-api-live",
        "title": "Total Demo API-Live (V7)",
        "metadata": {
            "id": "8a2e8aed75d8459b0175fe9f0e1e47d3",
            "audit": {
                "createTimestamp": "2020-11-25T08:57:18.110+0000",
                "createUserId": "DOSA_71607e5512ff435ea20837ecb17f85a7",
                "modifyTimestamp": "2023-07-21T03:47:11.160+0000",
                "modifyUserId": "DOSA_71607e5512ff435ea20837ecb17f85a7"
            },
            "scope": {
                "id": "e4efe9b572583eae0172798d82f90596",
                "kind": "Environment",
                "name": "on-premise",
                "title": "Minikube",
                "selfLink": "/management/v1alpha1/environments/on-premise"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "55164",
            "references": [
                {
                    "id": "8a2e833e75f497530175fe9f0cf61160",
                    "kind": "APIService",
                    "name": "total-demo-api-live",
                    "scopeKind": "Environment",
                    "scopeName": "on-premise",
                    "selfLink": "/management/v1alpha1/environments/on-premise/apiservices/total-demo-api-live",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/on-premise/apiservicerevisions/total-demo-api-live"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayAgent",
            "externalAPIID": "17613d93-7c00-4920-92b6-1def13a5755e"
        },
        "finalizers": [],
        "tags": [
            "APIID_ef7a0b9c-2805-4e58-96ab-479b8576b1e2",
            "internal_true"
        ],
        "spec": {
            "apiService": "total-demo-api-live",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "live",
                "contentType": "application/json"
            }
        }
    }
]
