[
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "sscldemo",
        "title": "SSCLDemo (V7)",
        "metadata": {
            "id": "8a2e8aed75d8459b0175f4b09c0f3752",
            "audit": {
                "createTimestamp": "2020-11-23T10:40:16.399+0000",
                "createUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd",
                "modifyTimestamp": "2023-07-21T03:47:10.443+0000",
                "modifyUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd"
            },
            "scope": {
                "id": "e4e57c9575008de90175216b69eb273f",
                "kind": "Environment",
                "name": "axwayv7t",
                "title": "axwayv7t",
                "selfLink": "/management/v1alpha1/environments/axwayv7t"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "54054",
            "references": [
                {
                    "id": "8a2e8aed75d8459b0175f4b09a7c374c",
                    "kind": "APIService",
                    "name": "sscldemo",
                    "scopeKind": "Environment",
                    "scopeName": "axwayv7t",
                    "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservices/sscldemo",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservicerevisions/sscldemo"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayAgent",
            "externalAPIID": "44dd6cd9-b271-460d-a356-7002068dbc42"
        },
        "finalizers": [],
        "tags": [
            "APIID_c1e6bf27-08c8-4aba-86fa-9fcbeb494f78",
            "ENV_CENTRAL",
            "ENV2_CENTRAL"
        ],
        "spec": {
            "apiService": "sscldemo",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "1.0.0",
                "contentType": "application/json"
            }
        }
    }
]
