[
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "total-demo-api-november",
        "title": "Total Demo API-November (V7)",
        "metadata": {
            "id": "8a2e8aed75d8459b0175fc7b3f54462b",
            "audit": {
                "createTimestamp": "2020-11-24T22:58:56.980+0000",
                "createUserId": "DOSA_71607e5512ff435ea20837ecb17f85a7",
                "modifyTimestamp": "2023-07-21T03:47:11.130+0000",
                "modifyUserId": "DOSA_71607e5512ff435ea20837ecb17f85a7"
            },
            "scope": {
                "id": "e4efe9b572583eae0172798d82f90596",
                "kind": "Environment",
                "name": "on-premise",
                "title": "Minikube",
                "selfLink": "/management/v1alpha1/environments/on-premise"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "55064",
            "references": [
                {
                    "id": "8a2e8aed75d8459b0175fc7b3dab4626",
                    "kind": "APIService",
                    "name": "total-demo-api-november",
                    "scopeKind": "Environment",
                    "scopeName": "on-premise",
                    "selfLink": "/management/v1alpha1/environments/on-premise/apiservices/total-demo-api-november",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/on-premise/apiservicerevisions/total-demo-api-november"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayAgent",
            "externalAPIID": "17613d93-7c00-4920-92b6-1def13a5755e"
        },
        "finalizers": [],
        "tags": [
            "APIID_ef7a0b9c-2805-4e58-96ab-479b8576b1e2",
            "internal_true"
        ],
        "spec": {
            "apiService": "total-demo-api-november",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "previous",
                "contentType": "application/json"
            }
        }
    }
]
