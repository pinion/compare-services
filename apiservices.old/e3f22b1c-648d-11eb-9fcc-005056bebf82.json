[
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82.2",
        "title": "YNAP API (V7)",
        "metadata": {
            "id": "8a2e8551774605c901775db1eaca07b2",
            "audit": {
                "createTimestamp": "2021-02-01T13:04:37.066+0000",
                "createUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd",
                "modifyTimestamp": "2023-07-21T03:47:09.228+0000",
                "modifyUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd"
            },
            "scope": {
                "id": "e4e57c9575008de90175216b69eb273f",
                "kind": "Environment",
                "name": "axwayv7t",
                "title": "axwayv7t",
                "selfLink": "/management/v1alpha1/environments/axwayv7t"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "68143",
            "references": [
                {
                    "id": "8a2e8551774605c901775db0f82c078b",
                    "kind": "APIService",
                    "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "scopeKind": "Environment",
                    "scopeName": "axwayv7t",
                    "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservices/e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservicerevisions/e3f22b1c-648d-11eb-9fcc-005056bebf82.2"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayDiscoveryAgent",
            "externalAPIID": "08ed6a9b-a06d-46dc-ac74-752f96dbb9e6",
            "externalAPIName": "YNAP API",
            "majorHash": "5720258061292476258",
            "minorHash": "9260523156977670578",
            "prevAPIServiceRevisionID": "8a2e9617774604dc01775db0f9a40703"
        },
        "finalizers": [],
        "tags": [
            "ENV_CENTRAL",
            "ENV2_CENTRAL",
            "APIID_60bd5696-7ad9-4ea7-b562-04a85c57e020"
        ],
        "spec": {
            "apiService": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "1.0.0",
                "contentType": "application/json"
            }
        }
    },
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82.3",
        "title": "YNAP API (V7)",
        "metadata": {
            "id": "8a2e8551774605c901775dccbce80852",
            "audit": {
                "createTimestamp": "2021-02-01T13:33:54.792+0000",
                "createUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd",
                "modifyTimestamp": "2023-07-21T03:47:07.125+0000",
                "modifyUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd"
            },
            "scope": {
                "id": "e4e57c9575008de90175216b69eb273f",
                "kind": "Environment",
                "name": "axwayv7t",
                "title": "axwayv7t",
                "selfLink": "/management/v1alpha1/environments/axwayv7t"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "68157",
            "references": [
                {
                    "id": "8a2e8551774605c901775db0f82c078b",
                    "kind": "APIService",
                    "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "scopeKind": "Environment",
                    "scopeName": "axwayv7t",
                    "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservices/e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservicerevisions/e3f22b1c-648d-11eb-9fcc-005056bebf82.3"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayDiscoveryAgent",
            "externalAPIID": "08ed6a9b-a06d-46dc-ac74-752f96dbb9e6",
            "externalAPIName": "YNAP API",
            "majorHash": "8275274961915904445",
            "minorHash": "9260523156977670578",
            "prevAPIServiceRevisionID": "8a2e8551774605c901775db1eaca07b2"
        },
        "finalizers": [],
        "tags": [
            "ENV_CENTRAL",
            "ENV2_CENTRAL",
            "APIID_60bd5696-7ad9-4ea7-b562-04a85c57e020"
        ],
        "spec": {
            "apiService": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
            "definition": {
                "type": "oas2",
                "value": "ewogICJzd2FnZ2VyIiA6ICIyLjAiLAogICJob3N0IiA6ICJwdHgxNTIuZGVtby5heHdheS5jb206ODA2NSIsCiAgImJhc2VQYXRoIiA6ICIvYXBpL2VtcCIsCiAgInNjaGVtZXMiIDogWyAiaHR0cHMiIF0sCiAgInBhdGhzIiA6IHsKICAgICIvdGVzdHVzZXIvY291bnQiIDogewogICAgICAiZ2V0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNvdW50IHRlc3R1c2VycyIsCiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJmaW5kVGVzdHVzZXJDb3VudCIsCiAgICAgICAgInRhZ3MiIDogWyAidGVzdHVzZXIiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iLCAiYXBwbGljYXRpb24veG1sIiwgInRleHQveWFtbCIsICJ0ZXh0L2NzdiIsICJ0ZXh0L3BsYWluIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDb25zdHJhaW5zIHZhbHVlcyBmb3IgZmllbGRzLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAid2hlcmUiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9IF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiMjAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgY291bnQgc3VjY2VlZGVkLCBhbmQgdGhlIHJlc3VsdHMgYXJlIGF2YWlsYWJsZS4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAicmVxdWlyZWQiIDogWyAia2V5IiwgInJlcXVlc3QtaWQiLCAic3VjY2VzcyIgXSwKICAgICAgICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAgICAgICAiY29kZSIgOiB7CiAgICAgICAgICAgICAgICAgICJmb3JtYXQiIDogImludDMyIiwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogImludGVnZXIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInN1Y2Nlc3MiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAiYm9vbGVhbiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAidGVzdHVzZXIiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAiaW50ZWdlciIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAibWVzc2FnZSIgOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInJlcXVlc3QtaWQiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJrZXkiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImVudW0iIDogWyAidGVzdHVzZXIiIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAidXJsIiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIiA6ICJvYmplY3QiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNDAxIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJVbmF1dGhvcml6ZWQiLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9VbmF1dGhvcml6ZWRFcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyB0aGUgcmVxdWVzdDsgY2hlY2sgb3V0IHRoZSBsb2dzIG9uIHlvdXIgc2VydmVyLiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Vycm9yTW9kZWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJObyByZXN1bHRzIHdlcmUgZm91bmQuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSByZXF1ZXN0IHRvb2sgdG9vIGxvbmcgdG8gcHJvY2VzcywgYW5kIHRoZSBzZXJ2ZXIgdGltZWQgaXQgb3V0LiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Vycm9yTW9kZWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiL3Rlc3R1c2VyL2ZpbmRBbmRNb2RpZnkiIDogewogICAgICAicHV0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIk1vZGlmaWVzIGEgc2luZ2xlIHRlc3R1c2VyLiBBbHRob3VnaCB0aGUgcXVlcnkgbWF5IG1hdGNoIG11bHRpcGxlIHRlc3R1c2Vycywgb25seSB0aGUgZmlyc3Qgb25lIHdpbGwgYmUgbW9kaWZpZWQuIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogInVwZGF0ZVRlc3R1c2VyRmluZEFuZE1vZGlmeSIsCiAgICAgICAgInRhZ3MiIDogWyAidGVzdHVzZXIiIF0sCiAgICAgICAgImNvbnN1bWVzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwgIm11bHRpcGFydC9mb3JtLWRhdGEiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iLCAiYXBwbGljYXRpb24veG1sIiwgInRleHQveWFtbCIsICJ0ZXh0L2NzdiIsICJ0ZXh0L3BsYWluIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gZmV0Y2guIFRoZSB2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLCBhbmQgbm8gZ3JlYXRlciB0aGFuIDEwMDAuIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogImxpbWl0IiwKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gc2tpcC4gVGhlIHZhbHVlIG11c3Qgbm90IGJlIGxlc3MgdGhhbiAwLiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJza2lwIiwKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDb25zdHJhaW5zIHZhbHVlcyBmb3IgZmllbGRzLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAid2hlcmUiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkEgZGljdGlvbmFyeSBvZiBvbmUgb3IgbW9yZSBmaWVsZHMgc3BlY2lmeWluZyBzb3J0aW5nIG9mIHJlc3VsdHMuIEluIGdlbmVyYWwsIHlvdSBjYW4gc29ydCBiYXNlZCBvbiBhbnkgcHJlZGVmaW5lZCBmaWVsZCB0aGF0IHlvdSBjYW4gcXVlcnkgdXNpbmcgdGhlIHdoZXJlIG9wZXJhdG9yLCBhcyB3ZWxsIGFzIG9uIGN1c3RvbSBmaWVsZHMuIFRoZSB2YWx1ZSBzaG91bGQgYmUgZW5jb2RlZCBKU09OLiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJvcmRlciIsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU2VsZWN0cyB3aGljaCBmaWVsZHMgdG8gcmV0dXJuIGZyb20gdGhlIHF1ZXJ5LiBPdGhlcnMgYXJlIGV4Y2x1ZGVkLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAic2VsIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTZWxlY3RzIHdoaWNoIGZpZWxkcyB0byBub3QgcmV0dXJuIGZyb20gdGhlIHF1ZXJ5LiBPdGhlcnMgYXJlIGluY2x1ZGVkLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAidW5zZWwiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkZpbmQgYW5kIE1vZGlmeSBib2R5IiwKICAgICAgICAgICJyZXF1aXJlZCIgOiB0cnVlLAogICAgICAgICAgImluIiA6ICJib2R5IiwKICAgICAgICAgICJuYW1lIiA6ICJGaW5kIGFuZCBNb2RpZnkiLAogICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAgICAgICAibGFzdF9uYW1lIiA6IHsKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAibGFzdF9uYW1lIGZpZWxkIiwKICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiZmlyc3RfbmFtZSIgOiB7CiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogImZpcnN0X25hbWUgZmllbGQiLAogICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJlbWFpbCIgOiB7CiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogImVtYWlsIGZpZWxkIiwKICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidHlwZSIgOiAib2JqZWN0IgogICAgICAgICAgfQogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHRoZSByZXF1ZXN0OyBjaGVjayBvdXQgdGhlIGxvZ3Mgb24geW91ciBzZXJ2ZXIuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICIyMDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBmaW5kIGFuZCBtb2RpZnkgc3VjY2VlZGVkLiIKICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJObyByZXN1bHRzIHdlcmUgZm91bmQuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSByZXF1ZXN0IHRvb2sgdG9vIGxvbmcgdG8gcHJvY2VzcywgYW5kIHRoZSBzZXJ2ZXIgdGltZWQgaXQgb3V0LiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Vycm9yTW9kZWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiL3Rlc3R1c2VyL3tpZH0iIDogewogICAgICAiZ2V0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkZpbmQgb25lIHRlc3R1c2VyIGJ5IElEIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogImZpbmRUZXN0dXNlckJ5SUQiLAogICAgICAgICJ0YWdzIiA6IFsgInRlc3R1c2VyIiBdLAogICAgICAgICJwcm9kdWNlcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiwgImFwcGxpY2F0aW9uL3htbCIsICJ0ZXh0L3lhbWwiLCAidGV4dC9jc3YiLCAidGV4dC9wbGFpbiIgXSwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHRlc3R1c2VyIElEIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiB0cnVlLAogICAgICAgICAgImluIiA6ICJwYXRoIiwKICAgICAgICAgICJuYW1lIiA6ICJpZCIsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBmaW5kIHN1Y2NlZWRlZCwgYW5kIHRoZSByZXN1bHRzIGFyZSBhdmFpbGFibGUuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgInJlcXVpcmVkIiA6IFsgImtleSIsICJyZXF1ZXN0LWlkIiwgInN1Y2Nlc3MiIF0sCiAgICAgICAgICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICAgICAgICAgImNvZGUiIDogewogICAgICAgICAgICAgICAgICAiZm9ybWF0IiA6ICJpbnQzMiIsCiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJpbnRlZ2VyIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdWNjZXNzIiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogImJvb2xlYW4iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInRlc3R1c2VyIiA6IHsKICAgICAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvdGVzdHVzZXItZnVsbCIsCiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJvYmplY3QiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm1lc3NhZ2UiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJyZXF1ZXN0LWlkIiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAia2V5IiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJlbnVtIiA6IFsgInRlc3R1c2VyIiBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInVybCIgOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSIgOiAib2JqZWN0IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjQwMSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5hdXRob3JpemVkIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvVW5hdXRob3JpemVkRXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNTAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgdGhlIHJlcXVlc3Q7IGNoZWNrIG91dCB0aGUgbG9ncyBvbiB5b3VyIHNlcnZlci4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjQwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTm8gcmVzdWx0cyB3ZXJlIGZvdW5kLiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Vycm9yTW9kZWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNTA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcmVxdWVzdCB0b29rIHRvbyBsb25nIHRvIHByb2Nlc3MsIGFuZCB0aGUgc2VydmVyIHRpbWVkIGl0IG91dC4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAicHV0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVwZGF0ZSBhIHNwZWNpZmljIHRlc3R1c2VyIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogInVwZGF0ZVRlc3R1c2VyQnlJRCIsCiAgICAgICAgInRhZ3MiIDogWyAidGVzdHVzZXIiIF0sCiAgICAgICAgImNvbnN1bWVzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwgIm11bHRpcGFydC9mb3JtLWRhdGEiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iLCAiYXBwbGljYXRpb24veG1sIiwgInRleHQveWFtbCIsICJ0ZXh0L2NzdiIsICJ0ZXh0L3BsYWluIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdGVzdHVzZXIgSUQiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAiaW4iIDogInBhdGgiLAogICAgICAgICAgIm5hbWUiIDogImlkIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJVcGRhdGUgYm9keSIsCiAgICAgICAgICAicmVxdWlyZWQiIDogdHJ1ZSwKICAgICAgICAgICJpbiIgOiAiYm9keSIsCiAgICAgICAgICAibmFtZSIgOiAiVXBkYXRlIiwKICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAgICAgImxhc3RfbmFtZSIgOiB7CiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogImxhc3RfbmFtZSBmaWVsZCIsCiAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImZpcnN0X25hbWUiIDogewogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJmaXJzdF9uYW1lIGZpZWxkIiwKICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiZW1haWwiIDogewogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJlbWFpbCBmaWVsZCIsCiAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInR5cGUiIDogIm9iamVjdCIKICAgICAgICAgIH0KICAgICAgICB9IF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiNDAxIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJVbmF1dGhvcml6ZWQiLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9VbmF1dGhvcml6ZWRFcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyB0aGUgcmVxdWVzdDsgY2hlY2sgb3V0IHRoZSBsb2dzIG9uIHlvdXIgc2VydmVyLiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Vycm9yTW9kZWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiMjA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdXBkYXRlIHN1Y2NlZWRlZC4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTm8gcmVzdWx0cyB3ZXJlIGZvdW5kLiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Vycm9yTW9kZWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNTA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcmVxdWVzdCB0b29rIHRvbyBsb25nIHRvIHByb2Nlc3MsIGFuZCB0aGUgc2VydmVyIHRpbWVkIGl0IG91dC4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAiZGVsZXRlIiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRlbGV0ZSBhIHNwZWNpZmljIHRlc3R1c2VyIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogImRlbGV0ZVRlc3R1c2VyQnlJRCIsCiAgICAgICAgInRhZ3MiIDogWyAidGVzdHVzZXIiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iLCAiYXBwbGljYXRpb24veG1sIiwgInRleHQveWFtbCIsICJ0ZXh0L2NzdiIsICJ0ZXh0L3BsYWluIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdGVzdHVzZXIgSUQiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAiaW4iIDogInBhdGgiLAogICAgICAgICAgIm5hbWUiIDogImlkIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjQwMSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5hdXRob3JpemVkIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvVW5hdXRob3JpemVkRXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNTAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgdGhlIHJlcXVlc3Q7IGNoZWNrIG91dCB0aGUgbG9ncyBvbiB5b3VyIHNlcnZlci4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjIwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGRlbGV0ZSBzdWNjZWVkZWQuIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5vIHJlc3VsdHMgd2VyZSBmb3VuZC4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHJlcXVlc3QgdG9vayB0b28gbG9uZyB0byBwcm9jZXNzLCBhbmQgdGhlIHNlcnZlciB0aW1lZCBpdCBvdXQuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICIvZW5kcG9pbnRzL2VtcGxveWVlcyIgOiB7CiAgICAgICJnZXQiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRmluZCBhbGwgbXlzcWwvZW1wbG95ZWVzIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogIkZpbmQgQWxsIG15c3FsL2VtcGxveWVlIiwKICAgICAgICAidGFncyIgOiBbICJteXNxbC9lbXBsb3llZXMiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iIF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiMjAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgZmluZCBhbGwgc3VjY2VlZGVkLCBhbmQgdGhlIHJlc3VsdHMgYXJlIGF2YWlsYWJsZS4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiaXRlbXMiIDogewogICAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvbXlzcWx+MWVtcGxveWVlcy1mdWxsIiwKICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJvYmplY3QiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNDAxIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJVbmF1dGhvcml6ZWQiLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9VbmF1dGhvcml6ZWRFcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyB0aGUgcmVxdWVzdDsgY2hlY2sgb3V0IHRoZSBsb2dzIG9uIHlvdXIgc2VydmVyLiIKICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJObyByZXN1bHRzIHdlcmUgZm91bmQuIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgInBvc3QiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQ3JlYXRlIGEgbXlzcWwvZW1wbG95ZWVzIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogIkNyZWF0ZSBteXNxbC9lbXBsb3llZSIsCiAgICAgICAgInRhZ3MiIDogWyAibXlzcWwvZW1wbG95ZWVzIiBdLAogICAgICAgICJjb25zdW1lcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiBdLAogICAgICAgICJwcm9kdWNlcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDcmVhdGUgYm9keSIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogImJvZHkiLAogICAgICAgICAgIm5hbWUiIDogImRhdGEiLAogICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL215c3FsfjFlbXBsb3llZXMtZnVsbCIKICAgICAgICAgIH0KICAgICAgICB9IF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiMjAxIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgY3JlYXRlIHN1Y2NlZWRlZC4iLAogICAgICAgICAgICAiaGVhZGVycyIgOiB7CiAgICAgICAgICAgICAgIkxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIFVSTCB0byB0aGUgbmV3bHkgY3JlYXRlZCBpbnN0YW5jZS4iLAogICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNDAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJCYWQgcmVxdWVzdC4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwMSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5hdXRob3JpemVkIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvVW5hdXRob3JpemVkRXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNTAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgdGhlIHJlcXVlc3Q7IGNoZWNrIG91dCB0aGUgbG9ncyBvbiB5b3VyIHNlcnZlci4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTm8gcmVzdWx0cyB3ZXJlIGZvdW5kLiIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJkZWxldGUiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGVsZXRlcyBhbGwgbXlzcWwvZW1wbG95ZWVzcyIsCiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJEZWxldGUgQWxsIG15c3FsL2VtcGxveWVlIiwKICAgICAgICAidGFncyIgOiBbICJteXNxbC9lbXBsb3llZXMiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iIF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiNDAxIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJVbmF1dGhvcml6ZWQiLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9VbmF1dGhvcml6ZWRFcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyB0aGUgcmVxdWVzdDsgY2hlY2sgb3V0IHRoZSBsb2dzIG9uIHlvdXIgc2VydmVyLiIKICAgICAgICAgIH0sCiAgICAgICAgICAiMjA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgZGVsZXRlIHN1Y2NlZWRlZC4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTm8gcmVzdWx0cyB3ZXJlIGZvdW5kLiIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiL2VuZHBvaW50cy9lbXBsb3llZXMve2VtcF9ub30iIDogewogICAgICAiZ2V0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkZpbmQgb25lIG15c3FsL2VtcGxveWVlcyIsCiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJGaW5kIEJ5IElEIG15c3FsL2VtcGxveWVlIiwKICAgICAgICAidGFncyIgOiBbICJteXNxbC9lbXBsb3llZXMiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iIF0sCiAgICAgICAgInBhcmFtZXRlcnMiIDogWyB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBteXNxbC9lbXBsb3llZXMgSUQiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAiaW4iIDogInBhdGgiLAogICAgICAgICAgIm5hbWUiIDogImVtcF9ubyIsCiAgICAgICAgICAidHlwZSIgOiAibnVtYmVyIgogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBmaW5kIHN1Y2NlZWRlZCwgYW5kIHRoZSByZXN1bHRzIGFyZSBhdmFpbGFibGUuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvbXlzcWx+MWVtcGxveWVlcy1mdWxsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjQwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQmFkIHJlcXVlc3QuIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHRoZSByZXF1ZXN0OyBjaGVjayBvdXQgdGhlIGxvZ3Mgb24geW91ciBzZXJ2ZXIuIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5vIHJlc3VsdHMgd2VyZSBmb3VuZC4iCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAicHV0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVwZGF0ZSBhIG15c3FsL2VtcGxveWVlcyIsCiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJVcGRhdGUgbXlzcWwvZW1wbG95ZWUiLAogICAgICAgICJ0YWdzIiA6IFsgIm15c3FsL2VtcGxveWVlcyIgXSwKICAgICAgICAiY29uc3VtZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicHJvZHVjZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIG15c3FsL2VtcGxveWVlcyBJRCIsCiAgICAgICAgICAicmVxdWlyZWQiIDogdHJ1ZSwKICAgICAgICAgICJpbiIgOiAicGF0aCIsCiAgICAgICAgICAibmFtZSIgOiAiZW1wX25vIiwKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJVcGRhdGUgYm9keSIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogImJvZHkiLAogICAgICAgICAgIm5hbWUiIDogImRhdGEiLAogICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL215c3FsfjFlbXBsb3llZXMiCiAgICAgICAgICB9CiAgICAgICAgfSBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjQwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQmFkIHJlcXVlc3QuIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHRoZSByZXF1ZXN0OyBjaGVjayBvdXQgdGhlIGxvZ3Mgb24geW91ciBzZXJ2ZXIuIgogICAgICAgICAgfSwKICAgICAgICAgICIyMDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSB1cGRhdGUgc3VjY2VlZGVkLiIKICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJObyByZXN1bHRzIHdlcmUgZm91bmQuIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgImRlbGV0ZSIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZWxldGUgYSBzcGVjaWZpYyBteXNxbC9lbXBsb3llZXMiLAogICAgICAgICJvcGVyYXRpb25JZCIgOiAiRGVsZXRlIE9uZSBteXNxbC9lbXBsb3llZSIsCiAgICAgICAgInRhZ3MiIDogWyAibXlzcWwvZW1wbG95ZWVzIiBdLAogICAgICAgICJwcm9kdWNlcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgbXlzcWwvZW1wbG95ZWVzIElEIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiB0cnVlLAogICAgICAgICAgImluIiA6ICJwYXRoIiwKICAgICAgICAgICJuYW1lIiA6ICJlbXBfbm8iLAogICAgICAgICAgInR5cGUiIDogIm51bWJlciIKICAgICAgICB9IF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiNDAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJCYWQgcmVxdWVzdC4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwMSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5hdXRob3JpemVkIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvVW5hdXRob3JpemVkRXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNTAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgdGhlIHJlcXVlc3Q7IGNoZWNrIG91dCB0aGUgbG9ncyBvbiB5b3VyIHNlcnZlci4iCiAgICAgICAgICB9LAogICAgICAgICAgIjIwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGRlbGV0ZSBzdWNjZWVkZWQuIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5vIHJlc3VsdHMgd2VyZSBmb3VuZC4iCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIi90ZXN0dXNlciIgOiB7CiAgICAgICJnZXQiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRmluZCBhbGwgdGVzdHVzZXJzIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogImZpbmRUZXN0dXNlciIsCiAgICAgICAgInRhZ3MiIDogWyAidGVzdHVzZXIiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iLCAiYXBwbGljYXRpb24veG1sIiwgInRleHQveWFtbCIsICJ0ZXh0L2NzdiIsICJ0ZXh0L3BsYWluIiBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjIwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGZpbmQgYWxsIHN1Y2NlZWRlZCwgYW5kIHRoZSByZXN1bHRzIGFyZSBhdmFpbGFibGUuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgInJlcXVpcmVkIiA6IFsgImtleSIsICJyZXF1ZXN0LWlkIiwgInN1Y2Nlc3MiIF0sCiAgICAgICAgICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICAgICAgICAgImNvZGUiIDogewogICAgICAgICAgICAgICAgICAiZm9ybWF0IiA6ICJpbnQzMiIsCiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJpbnRlZ2VyIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdWNjZXNzIiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogImJvb2xlYW4iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInRlc3R1c2VycyIgOiB7CiAgICAgICAgICAgICAgICAgICJpdGVtcyIgOiB7CiAgICAgICAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvdGVzdHVzZXItZnVsbCIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiIDogIm9iamVjdCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogImFycmF5IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJtZXNzYWdlIiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAicmVxdWVzdC1pZCIgOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImtleSIgOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAiZW51bSIgOiBbICJ0ZXN0dXNlcnMiIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAidXJsIiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIiA6ICJvYmplY3QiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNDAxIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJVbmF1dGhvcml6ZWQiLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9VbmF1dGhvcml6ZWRFcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyB0aGUgcmVxdWVzdDsgY2hlY2sgb3V0IHRoZSBsb2dzIG9uIHlvdXIgc2VydmVyLiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Vycm9yTW9kZWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJObyByZXN1bHRzIHdlcmUgZm91bmQuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSByZXF1ZXN0IHRvb2sgdG9vIGxvbmcgdG8gcHJvY2VzcywgYW5kIHRoZSBzZXJ2ZXIgdGltZWQgaXQgb3V0LiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Vycm9yTW9kZWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJwb3N0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNyZWF0ZSBhIHRlc3R1c2VyIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogImNyZWF0ZVRlc3R1c2VyIiwKICAgICAgICAidGFncyIgOiBbICJ0ZXN0dXNlciIgXSwKICAgICAgICAiY29uc3VtZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIsICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLCAibXVsdGlwYXJ0L2Zvcm0tZGF0YSIgXSwKICAgICAgICAicHJvZHVjZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIsICJhcHBsaWNhdGlvbi94bWwiLCAidGV4dC95YW1sIiwgInRleHQvY3N2IiwgInRleHQvcGxhaW4iIF0sCiAgICAgICAgInBhcmFtZXRlcnMiIDogWyB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNyZWF0ZSBib2R5IiwKICAgICAgICAgICJyZXF1aXJlZCIgOiB0cnVlLAogICAgICAgICAgImluIiA6ICJib2R5IiwKICAgICAgICAgICJuYW1lIiA6ICJDcmVhdGUiLAogICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAgICAgICAibGFzdF9uYW1lIiA6IHsKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAibGFzdF9uYW1lIGZpZWxkIiwKICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiZmlyc3RfbmFtZSIgOiB7CiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogImZpcnN0X25hbWUgZmllbGQiLAogICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJlbWFpbCIgOiB7CiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogImVtYWlsIGZpZWxkIiwKICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidHlwZSIgOiAib2JqZWN0IgogICAgICAgICAgfQogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBjcmVhdGUgc3VjY2VlZGVkLiIsCiAgICAgICAgICAgICJoZWFkZXJzIiA6IHsKICAgICAgICAgICAgICAiTG9jYXRpb24iIDogewogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgVVJMIHRvIHRoZSBuZXdseSBjcmVhdGVkIGluc3RhbmNlLiIsCiAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHRoZSByZXF1ZXN0OyBjaGVjayBvdXQgdGhlIGxvZ3Mgb24geW91ciBzZXJ2ZXIuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5vIHJlc3VsdHMgd2VyZSBmb3VuZC4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHJlcXVlc3QgdG9vayB0b28gbG9uZyB0byBwcm9jZXNzLCBhbmQgdGhlIHNlcnZlciB0aW1lZCBpdCBvdXQuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgImRlbGV0ZSIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJEZWxldGVzIGFsbCB0ZXN0dXNlcnMiLAogICAgICAgICJvcGVyYXRpb25JZCIgOiAiZGVsZXRlVGVzdHVzZXIiLAogICAgICAgICJ0YWdzIiA6IFsgInRlc3R1c2VyIiBdLAogICAgICAgICJwcm9kdWNlcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiwgImFwcGxpY2F0aW9uL3htbCIsICJ0ZXh0L3lhbWwiLCAidGV4dC9jc3YiLCAidGV4dC9wbGFpbiIgXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHRoZSByZXF1ZXN0OyBjaGVjayBvdXQgdGhlIGxvZ3Mgb24geW91ciBzZXJ2ZXIuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICIyMDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBkZWxldGUgc3VjY2VlZGVkLiIKICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJObyByZXN1bHRzIHdlcmUgZm91bmQuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSByZXF1ZXN0IHRvb2sgdG9vIGxvbmcgdG8gcHJvY2VzcywgYW5kIHRoZSBzZXJ2ZXIgdGltZWQgaXQgb3V0LiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL0Vycm9yTW9kZWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiL2VuZHBvaW50cy9lbXBsb3llZXMvZGlzdGluY3Qve2ZpZWxkfSIgOiB7CiAgICAgICJnZXQiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRmluZCBkaXN0aW5jdCBteXNxbC9lbXBsb3llZXMiLAogICAgICAgICJvcGVyYXRpb25JZCIgOiAiRGlzdGluY3QgbXlzcWwvZW1wbG95ZWUiLAogICAgICAgICJ0YWdzIiA6IFsgIm15c3FsL2VtcGxveWVlcyIgXSwKICAgICAgICAicHJvZHVjZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGZpZWxkIG5hbWUgdGhhdCBtdXN0IGJlIGRpc3RpbmN0LiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogdHJ1ZSwKICAgICAgICAgICJpbiIgOiAicGF0aCIsCiAgICAgICAgICAibmFtZSIgOiAiZmllbGQiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBudW1iZXIgb2YgcmVjb3JkcyB0byBmZXRjaC4gVGhlIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAsIGFuZCBubyBncmVhdGVyIHRoYW4gMTAwMC4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgIm1pbmltdW0iIDogMCwKICAgICAgICAgICJtYXhpbXVtIiA6IDEwMDAsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJsaW1pdCIsCiAgICAgICAgICAidHlwZSIgOiAibnVtYmVyIgogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIG51bWJlciBvZiByZWNvcmRzIHRvIHNraXAuIFRoZSB2YWx1ZSBtdXN0IG5vdCBiZSBsZXNzIHRoYW4gMC4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgIm1pbmltdW0iIDogMCwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogInNraXAiLAogICAgICAgICAgInR5cGUiIDogIm51bWJlciIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNvbnN0cmFpbnMgdmFsdWVzIGZvciBmaWVsZHMuIFRoZSB2YWx1ZSBzaG91bGQgYmUgZW5jb2RlZCBKU09OLiIsCiAgICAgICAgICAiZm9ybWF0IiA6ICJqc29uIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogIndoZXJlIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIGRpY3Rpb25hcnkgb2Ygb25lIG9yIG1vcmUgZmllbGRzIHNwZWNpZnlpbmcgc29ydGluZyBvZiByZXN1bHRzLiBJbiBnZW5lcmFsLCB5b3UgY2FuIHNvcnQgYmFzZWQgb24gYW55IHByZWRlZmluZWQgZmllbGQgdGhhdCB5b3UgY2FuIHF1ZXJ5IHVzaW5nIHRoZSB3aGVyZSBvcGVyYXRvciwgYXMgd2VsbCBhcyBvbiBjdXN0b20gZmllbGRzLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgImZvcm1hdCIgOiAianNvbiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJvcmRlciIsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkRpc3RpbmN0IGZpZWxkcyByZXNwb25zZSIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICJpdGVtcyIgOiB7CiAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInVuaXF1ZUl0ZW1zIiA6IHRydWUsCiAgICAgICAgICAgICAgInR5cGUiIDogImFycmF5IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjQwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQmFkIHJlcXVlc3QuIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHRoZSByZXF1ZXN0OyBjaGVjayBvdXQgdGhlIGxvZ3Mgb24geW91ciBzZXJ2ZXIuIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5vIHJlc3VsdHMgd2VyZSBmb3VuZC4iCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIi9lbmRwb2ludHMvZW1wbG95ZWVzL3Vwc2VydCIgOiB7CiAgICAgICJwb3N0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNyZWF0ZSBvciB1cGRhdGUgYSBteXNxbC9lbXBsb3llZXMiLAogICAgICAgICJvcGVyYXRpb25JZCIgOiAiVXBzZXJ0IG15c3FsL2VtcGxveWVlIiwKICAgICAgICAidGFncyIgOiBbICJteXNxbC9lbXBsb3llZXMiIF0sCiAgICAgICAgImNvbnN1bWVzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iIF0sCiAgICAgICAgInBhcmFtZXRlcnMiIDogWyB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVwc2VydCBib2R5IiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAiYm9keSIsCiAgICAgICAgICAibmFtZSIgOiAiZGF0YSIsCiAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvbXlzcWx+MWVtcGxveWVlcy1mdWxsIgogICAgICAgICAgfQogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSB1cHNlcnQgc3VjY2VlZGVkLCBhbmQgcmVzdWx0ZWQgaW4gYW4gaW5zZXJ0LiIsCiAgICAgICAgICAgICJoZWFkZXJzIiA6IHsKICAgICAgICAgICAgICAiTG9jYXRpb24iIDogewogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgVVJMIHRvIHRoZSBuZXdseSBjcmVhdGVkIGluc3RhbmNlLiIsCiAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI0MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkJhZCByZXF1ZXN0LiIKICAgICAgICAgIH0sCiAgICAgICAgICAiNDAxIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJVbmF1dGhvcml6ZWQiLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9VbmF1dGhvcml6ZWRFcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI1MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyB0aGUgcmVxdWVzdDsgY2hlY2sgb3V0IHRoZSBsb2dzIG9uIHlvdXIgc2VydmVyLiIKICAgICAgICAgIH0sCiAgICAgICAgICAiMjA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdXBzZXJ0IHN1Y2NlZWRlZCwgYW5kIHJlc3VsdGVkIGluIGFuIHVwZGF0ZS4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTm8gcmVzdWx0cyB3ZXJlIGZvdW5kLiIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiL3Rlc3RhcGkve2lkfSIgOiB7CiAgICAgICJnZXQiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAidGhpcyBpcyBhbiBhcGkgdGhhdCBzaG93cyBob3cgdG8gaW1wbGVtZW50IGFuIEFQSSIsCiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJmaW5kVGVzdGFwaUJ5SUQiLAogICAgICAgICJ0YWdzIiA6IFsgInRlc3RhcGkiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iLCAiYXBwbGljYXRpb24veG1sIiwgInRleHQveWFtbCIsICJ0ZXh0L2NzdiIsICJ0ZXh0L3BsYWluIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJ0aGUgdGVzdCB1c2VyIGlkIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiB0cnVlLAogICAgICAgICAgImluIiA6ICJwYXRoIiwKICAgICAgICAgICJuYW1lIiA6ICJpZCIsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk9LIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIi9ncmVldCIgOiB7CiAgICAgICJnZXQiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogIkdyZWV0IiwKICAgICAgICAic3VtbWFyeSIgOiAiR3JlZXQgYSB1c2VyIiwKICAgICAgICAidGFncyIgOiBbICJoZWxsb3dvcmxkIiBdLAogICAgICAgICJwcm9kdWNlcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdXNlcm5hbWUiLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJ1c2VybmFtZSIsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0gXSwKICAgICAgICAicmVzcG9uc2VzIiA6IHsKICAgICAgICAgICIyMDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogImdyZWV0aW5nIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvc2NoZW1hLnNzY2wtZGItZGVtb19ncmVldGluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI0MDAiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogImJhZCByZXF1ZXN0IiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvc2NoZW1hLnNzY2wtZGItZGVtb19lcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIi90ZXN0dXNlci9kaXN0aW5jdC97ZmllbGR9IiA6IHsKICAgICAgImdldCIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJGaW5kIGRpc3RpbmN0IHRlc3R1c2VycyIsCiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJmaW5kVGVzdHVzZXJEaXN0aW5jdEJ5RklFTEQiLAogICAgICAgICJ0YWdzIiA6IFsgInRlc3R1c2VyIiBdLAogICAgICAgICJwcm9kdWNlcyIgOiBbICJhcHBsaWNhdGlvbi9qc29uIiwgImFwcGxpY2F0aW9uL3htbCIsICJ0ZXh0L3lhbWwiLCAidGV4dC9jc3YiLCAidGV4dC9wbGFpbiIgXSwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIG51bWJlciBvZiByZWNvcmRzIHRvIGZldGNoLiBUaGUgdmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCwgYW5kIG5vIGdyZWF0ZXIgdGhhbiAxMDAwLiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJsaW1pdCIsCiAgICAgICAgICAidHlwZSIgOiAibnVtYmVyIgogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIG51bWJlciBvZiByZWNvcmRzIHRvIHNraXAuIFRoZSB2YWx1ZSBtdXN0IG5vdCBiZSBsZXNzIHRoYW4gMC4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAic2tpcCIsCiAgICAgICAgICAidHlwZSIgOiAibnVtYmVyIgogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQ29uc3RyYWlucyB2YWx1ZXMgZm9yIGZpZWxkcy4gVGhlIHZhbHVlIHNob3VsZCBiZSBlbmNvZGVkIEpTT04uIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogIndoZXJlIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIGRpY3Rpb25hcnkgb2Ygb25lIG9yIG1vcmUgZmllbGRzIHNwZWNpZnlpbmcgc29ydGluZyBvZiByZXN1bHRzLiBJbiBnZW5lcmFsLCB5b3UgY2FuIHNvcnQgYmFzZWQgb24gYW55IHByZWRlZmluZWQgZmllbGQgdGhhdCB5b3UgY2FuIHF1ZXJ5IHVzaW5nIHRoZSB3aGVyZSBvcGVyYXRvciwgYXMgd2VsbCBhcyBvbiBjdXN0b20gZmllbGRzLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAib3JkZXIiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBmaWVsZCBuYW1lIHRoYXQgbXVzdCBiZSBkaXN0aW5jdC4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IHRydWUsCiAgICAgICAgICAiaW4iIDogInBhdGgiLAogICAgICAgICAgIm5hbWUiIDogImZpZWxkIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjIwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRGlzdGluY3QgZmllbGRzIHJlc3BvbnNlLiIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICJyZXF1aXJlZCIgOiBbICJrZXkiLCAicmVxdWVzdC1pZCIsICJzdWNjZXNzIiBdLAogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAgICAgICAgICJjb2RlIiA6IHsKICAgICAgICAgICAgICAgICAgImZvcm1hdCIgOiAiaW50MzIiLAogICAgICAgICAgICAgICAgICAidHlwZSIgOiAiaW50ZWdlciIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAic3VjY2VzcyIgOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJib29sZWFuIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ0ZXN0dXNlcnMiIDogewogICAgICAgICAgICAgICAgICAiaXRlbXMiIDogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJ1bmlxdWVJdGVtcyIgOiB0cnVlLAogICAgICAgICAgICAgICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm1lc3NhZ2UiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJyZXF1ZXN0LWlkIiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAia2V5IiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJlbnVtIiA6IFsgInRlc3R1c2VycyIgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ1cmwiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGUiIDogIm9iamVjdCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHRoZSByZXF1ZXN0OyBjaGVjayBvdXQgdGhlIGxvZ3Mgb24geW91ciBzZXJ2ZXIuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5vIHJlc3VsdHMgd2VyZSBmb3VuZC4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHJlcXVlc3QgdG9vayB0b28gbG9uZyB0byBwcm9jZXNzLCBhbmQgdGhlIHNlcnZlciB0aW1lZCBpdCBvdXQuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICIvdGVzdHVzZXIvcXVlcnkiIDogewogICAgICAiZ2V0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIlF1ZXJ5IHRlc3R1c2VycyIsCiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJmaW5kVGVzdHVzZXJRdWVyeSIsCiAgICAgICAgInRhZ3MiIDogWyAidGVzdHVzZXIiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iLCAiYXBwbGljYXRpb24veG1sIiwgInRleHQveWFtbCIsICJ0ZXh0L2NzdiIsICJ0ZXh0L3BsYWluIiBdLAogICAgICAgICJwYXJhbWV0ZXJzIiA6IFsgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gZmV0Y2guIFRoZSB2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLCBhbmQgbm8gZ3JlYXRlciB0aGFuIDEwMDAuIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogImxpbWl0IiwKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gc2tpcC4gVGhlIHZhbHVlIG11c3Qgbm90IGJlIGxlc3MgdGhhbiAwLiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJza2lwIiwKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJDb25zdHJhaW5zIHZhbHVlcyBmb3IgZmllbGRzLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAid2hlcmUiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkEgZGljdGlvbmFyeSBvZiBvbmUgb3IgbW9yZSBmaWVsZHMgc3BlY2lmeWluZyBzb3J0aW5nIG9mIHJlc3VsdHMuIEluIGdlbmVyYWwsIHlvdSBjYW4gc29ydCBiYXNlZCBvbiBhbnkgcHJlZGVmaW5lZCBmaWVsZCB0aGF0IHlvdSBjYW4gcXVlcnkgdXNpbmcgdGhlIHdoZXJlIG9wZXJhdG9yLCBhcyB3ZWxsIGFzIG9uIGN1c3RvbSBmaWVsZHMuIFRoZSB2YWx1ZSBzaG91bGQgYmUgZW5jb2RlZCBKU09OLiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJvcmRlciIsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU2VsZWN0cyB3aGljaCBmaWVsZHMgdG8gcmV0dXJuIGZyb20gdGhlIHF1ZXJ5LiBPdGhlcnMgYXJlIGV4Y2x1ZGVkLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAic2VsIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTZWxlY3RzIHdoaWNoIGZpZWxkcyB0byBub3QgcmV0dXJuIGZyb20gdGhlIHF1ZXJ5LiBPdGhlcnMgYXJlIGluY2x1ZGVkLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAidW5zZWwiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9IF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiMjAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcXVlcnkgc3VjY2VlZGVkLCBhbmQgdGhlIHJlc3VsdHMgYXJlIGF2YWlsYWJsZS4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAicmVxdWlyZWQiIDogWyAia2V5IiwgInJlcXVlc3QtaWQiLCAic3VjY2VzcyIgXSwKICAgICAgICAgICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgICAgICAgICAiY29kZSIgOiB7CiAgICAgICAgICAgICAgICAgICJmb3JtYXQiIDogImludDMyIiwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogImludGVnZXIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInN1Y2Nlc3MiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAiYm9vbGVhbiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAidGVzdHVzZXJzIiA6IHsKICAgICAgICAgICAgICAgICAgIml0ZW1zIiA6IHsKICAgICAgICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy90ZXN0dXNlci1mdWxsIiwKICAgICAgICAgICAgICAgICAgICAidHlwZSIgOiAib2JqZWN0IgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm1lc3NhZ2UiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJyZXF1ZXN0LWlkIiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAia2V5IiA6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJlbnVtIiA6IFsgInRlc3R1c2VycyIgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ1cmwiIDogewogICAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGUiIDogIm9iamVjdCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHRoZSByZXF1ZXN0OyBjaGVjayBvdXQgdGhlIGxvZ3Mgb24geW91ciBzZXJ2ZXIuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5vIHJlc3VsdHMgd2VyZSBmb3VuZC4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHJlcXVlc3QgdG9vayB0b28gbG9uZyB0byBwcm9jZXNzLCBhbmQgdGhlIHNlcnZlciB0aW1lZCBpdCBvdXQuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICIvZW5kcG9pbnRzL2VtcGxveWVlcy9maW5kQW5kTW9kaWZ5IiA6IHsKICAgICAgInB1dCIgOiB7CiAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJNb2RpZmllcyBhIHNpbmdsZSBteXNxbC9lbXBsb3llZS4gQWx0aG91Z2ggdGhlIHF1ZXJ5IG1heSBtYXRjaCBtdWx0aXBsZSBteXNxbC9lbXBsb3llZXMsIG9ubHkgdGhlIGZpcnN0IG9uZSB3aWxsIGJlIG1vZGlmaWVkLiIsCiAgICAgICAgIm9wZXJhdGlvbklkIiA6ICJGaW5kIGFuZCBNb2RpZnkgbXlzcWwvZW1wbG95ZWUiLAogICAgICAgICJ0YWdzIiA6IFsgIm15c3FsL2VtcGxveWVlcyIgXSwKICAgICAgICAiY29uc3VtZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicHJvZHVjZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiRmluZCBhbmQgbW9kaWZ5IGJvZHkiLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJib2R5IiwKICAgICAgICAgICJuYW1lIiA6ICJkYXRhIiwKICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9teXNxbH4xZW1wbG95ZWVzIgogICAgICAgICAgfQogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU2V0IHRvIHRydWUgdG8gYWxsb3cgdGhlIG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgbW9kZWwuIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogInVwc2VydCIsCiAgICAgICAgICAidHlwZSIgOiAiYm9vbGVhbiIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBudW1iZXIgb2YgcmVjb3JkcyB0byBmZXRjaC4gVGhlIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAsIGFuZCBubyBncmVhdGVyIHRoYW4gMTAwMC4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgIm1pbmltdW0iIDogMCwKICAgICAgICAgICJtYXhpbXVtIiA6IDEwMDAsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJsaW1pdCIsCiAgICAgICAgICAidHlwZSIgOiAibnVtYmVyIgogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIG51bWJlciBvZiByZWNvcmRzIHRvIHNraXAuIFRoZSB2YWx1ZSBtdXN0IG5vdCBiZSBsZXNzIHRoYW4gMC4iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgIm1pbmltdW0iIDogMCwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogInNraXAiLAogICAgICAgICAgInR5cGUiIDogIm51bWJlciIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNvbnN0cmFpbnMgdmFsdWVzIGZvciBmaWVsZHMuIFRoZSB2YWx1ZSBzaG91bGQgYmUgZW5jb2RlZCBKU09OLiIsCiAgICAgICAgICAiZm9ybWF0IiA6ICJqc29uIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogIndoZXJlIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJBIGRpY3Rpb25hcnkgb2Ygb25lIG9yIG1vcmUgZmllbGRzIHNwZWNpZnlpbmcgc29ydGluZyBvZiByZXN1bHRzLiBJbiBnZW5lcmFsLCB5b3UgY2FuIHNvcnQgYmFzZWQgb24gYW55IHByZWRlZmluZWQgZmllbGQgdGhhdCB5b3UgY2FuIHF1ZXJ5IHVzaW5nIHRoZSB3aGVyZSBvcGVyYXRvciwgYXMgd2VsbCBhcyBvbiBjdXN0b20gZmllbGRzLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgImZvcm1hdCIgOiAianNvbiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJvcmRlciIsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU2VsZWN0cyB3aGljaCBmaWVsZHMgdG8gcmV0dXJuIGZyb20gdGhlIHF1ZXJ5LiBPdGhlcnMgYXJlIGV4Y2x1ZGVkLiBUaGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgSlNPTi4iLAogICAgICAgICAgImZvcm1hdCIgOiAianNvbiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAiaW4iIDogInF1ZXJ5IiwKICAgICAgICAgICJuYW1lIiA6ICJzZWwiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlNlbGVjdHMgd2hpY2ggZmllbGRzIHRvIG5vdCByZXR1cm4gZnJvbSB0aGUgcXVlcnkuIE90aGVycyBhcmUgaW5jbHVkZWQuIFRoZSB2YWx1ZSBzaG91bGQgYmUgZW5jb2RlZCBKU09OLiIsCiAgICAgICAgICAiZm9ybWF0IiA6ICJqc29uIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogInVuc2VsIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjQwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQmFkIHJlcXVlc3QuIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDEiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVuYXV0aG9yaXplZCIsCiAgICAgICAgICAgICJzY2hlbWEiIDogewogICAgICAgICAgICAgICIkcmVmIiA6ICIjL2RlZmluaXRpb25zL1VuYXV0aG9yaXplZEVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHRoZSByZXF1ZXN0OyBjaGVjayBvdXQgdGhlIGxvZ3Mgb24geW91ciBzZXJ2ZXIuIgogICAgICAgICAgfSwKICAgICAgICAgICIyMDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBmaW5kIGFuZCBtb2RpZnkgc3VjY2VlZGVkLiIKICAgICAgICAgIH0sCiAgICAgICAgICAiNDA0IiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJObyByZXN1bHRzIHdlcmUgZm91bmQuIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICIvdGVzdHVzZXIvdXBzZXJ0IiA6IHsKICAgICAgInBvc3QiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQ3JlYXRlIG9yIHVwZGF0ZSBhIHRlc3R1c2VyIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogImNyZWF0ZVRlc3R1c2VyVXBzZXJ0IiwKICAgICAgICAidGFncyIgOiBbICJ0ZXN0dXNlciIgXSwKICAgICAgICAiY29uc3VtZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIsICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLCAibXVsdGlwYXJ0L2Zvcm0tZGF0YSIgXSwKICAgICAgICAicHJvZHVjZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIsICJhcHBsaWNhdGlvbi94bWwiLCAidGV4dC95YW1sIiwgInRleHQvY3N2IiwgInRleHQvcGxhaW4iIF0sCiAgICAgICAgInBhcmFtZXRlcnMiIDogWyB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlVwc2VydCBib2R5IiwKICAgICAgICAgICJyZXF1aXJlZCIgOiB0cnVlLAogICAgICAgICAgImluIiA6ICJib2R5IiwKICAgICAgICAgICJuYW1lIiA6ICJVcHNlcnQiLAogICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAgICAgICAibGFzdF9uYW1lIiA6IHsKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAibGFzdF9uYW1lIGZpZWxkIiwKICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiaWQiIDogewogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgdGVzdHVzZXIgSUQiLAogICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJmaXJzdF9uYW1lIiA6IHsKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiZmlyc3RfbmFtZSBmaWVsZCIsCiAgICAgICAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImVtYWlsIiA6IHsKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiZW1haWwgZmllbGQiLAogICAgICAgICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0eXBlIiA6ICJvYmplY3QiCiAgICAgICAgICB9CiAgICAgICAgfSBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjIwMSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHVwc2VydCBzdWNjZWVkZWQsIGFuZCByZXN1bHRlZCBpbiBhbiBpbnNlcnQuIiwKICAgICAgICAgICAgImhlYWRlcnMiIDogewogICAgICAgICAgICAgICJMb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBVUkwgdG8gdGhlIG5ld2x5IGNyZWF0ZWQgaW5zdGFuY2UuIiwKICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjQwMSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5hdXRob3JpemVkIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvVW5hdXRob3JpemVkRXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNTAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgdGhlIHJlcXVlc3Q7IGNoZWNrIG91dCB0aGUgbG9ncyBvbiB5b3VyIHNlcnZlci4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjIwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHVwc2VydCBzdWNjZWVkZWQsIGFuZCByZXN1bHRlZCBpbiBhbiB1cGRhdGUuIgogICAgICAgICAgfSwKICAgICAgICAgICI0MDQiIDogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIk5vIHJlc3VsdHMgd2VyZSBmb3VuZC4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiJHJlZiIgOiAiIy9kZWZpbml0aW9ucy9FcnJvck1vZGVsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIjUwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIHJlcXVlc3QgdG9vayB0b28gbG9uZyB0byBwcm9jZXNzLCBhbmQgdGhlIHNlcnZlciB0aW1lZCBpdCBvdXQuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvRXJyb3JNb2RlbCIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICIvZW5kcG9pbnRzL2VtcGxveWVlcy9xdWVyeSIgOiB7CiAgICAgICJnZXQiIDogewogICAgICAgICJkZXNjcmlwdGlvbiIgOiAiUXVlcnkgYSBteXNxbC9lbXBsb3llZXMiLAogICAgICAgICJvcGVyYXRpb25JZCIgOiAiUXVlcnkgbXlzcWwvZW1wbG95ZWUiLAogICAgICAgICJ0YWdzIiA6IFsgIm15c3FsL2VtcGxveWVlcyIgXSwKICAgICAgICAicHJvZHVjZXMiIDogWyAiYXBwbGljYXRpb24vanNvbiIgXSwKICAgICAgICAicGFyYW1ldGVycyIgOiBbIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIG51bWJlciBvZiByZWNvcmRzIHRvIGZldGNoLiBUaGUgdmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCwgYW5kIG5vIGdyZWF0ZXIgdGhhbiAxMDAwLiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAibWluaW11bSIgOiAwLAogICAgICAgICAgIm1heGltdW0iIDogMTAwMCwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogImxpbWl0IiwKICAgICAgICAgICJ0eXBlIiA6ICJudW1iZXIiCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gc2tpcC4gVGhlIHZhbHVlIG11c3Qgbm90IGJlIGxlc3MgdGhhbiAwLiIsCiAgICAgICAgICAicmVxdWlyZWQiIDogZmFsc2UsCiAgICAgICAgICAibWluaW11bSIgOiAwLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAic2tpcCIsCiAgICAgICAgICAidHlwZSIgOiAibnVtYmVyIgogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiQ29uc3RyYWlucyB2YWx1ZXMgZm9yIGZpZWxkcy4gVGhlIHZhbHVlIHNob3VsZCBiZSBlbmNvZGVkIEpTT04uIiwKICAgICAgICAgICJmb3JtYXQiIDogImpzb24iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAid2hlcmUiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LCB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkEgZGljdGlvbmFyeSBvZiBvbmUgb3IgbW9yZSBmaWVsZHMgc3BlY2lmeWluZyBzb3J0aW5nIG9mIHJlc3VsdHMuIEluIGdlbmVyYWwsIHlvdSBjYW4gc29ydCBiYXNlZCBvbiBhbnkgcHJlZGVmaW5lZCBmaWVsZCB0aGF0IHlvdSBjYW4gcXVlcnkgdXNpbmcgdGhlIHdoZXJlIG9wZXJhdG9yLCBhcyB3ZWxsIGFzIG9uIGN1c3RvbSBmaWVsZHMuIFRoZSB2YWx1ZSBzaG91bGQgYmUgZW5jb2RlZCBKU09OLiIsCiAgICAgICAgICAiZm9ybWF0IiA6ICJqc29uIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogIm9yZGVyIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwgewogICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTZWxlY3RzIHdoaWNoIGZpZWxkcyB0byByZXR1cm4gZnJvbSB0aGUgcXVlcnkuIE90aGVycyBhcmUgZXhjbHVkZWQuIFRoZSB2YWx1ZSBzaG91bGQgYmUgZW5jb2RlZCBKU09OLiIsCiAgICAgICAgICAiZm9ybWF0IiA6ICJqc29uIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogInNlbCIsCiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0sIHsKICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiU2VsZWN0cyB3aGljaCBmaWVsZHMgdG8gbm90IHJldHVybiBmcm9tIHRoZSBxdWVyeS4gT3RoZXJzIGFyZSBpbmNsdWRlZC4gVGhlIHZhbHVlIHNob3VsZCBiZSBlbmNvZGVkIEpTT04uIiwKICAgICAgICAgICJmb3JtYXQiIDogImpzb24iLAogICAgICAgICAgInJlcXVpcmVkIiA6IGZhbHNlLAogICAgICAgICAgImluIiA6ICJxdWVyeSIsCiAgICAgICAgICAibmFtZSIgOiAidW5zZWwiLAogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9IF0sCiAgICAgICAgInJlc3BvbnNlcyIgOiB7CiAgICAgICAgICAiMjAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJUaGUgcXVlcnkgc3VjY2VlZGVkLCBhbmQgdGhlIHJlc3VsdHMgYXJlIGF2YWlsYWJsZS4iLAogICAgICAgICAgICAic2NoZW1hIiA6IHsKICAgICAgICAgICAgICAiaXRlbXMiIDogewogICAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvbXlzcWx+MWVtcGxveWVlcy1mdWxsIiwKICAgICAgICAgICAgICAgICJ0eXBlIiA6ICJvYmplY3QiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNDAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJCYWQgcmVxdWVzdC4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwMSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5hdXRob3JpemVkIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvVW5hdXRob3JpemVkRXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNTAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgdGhlIHJlcXVlc3Q7IGNoZWNrIG91dCB0aGUgbG9ncyBvbiB5b3VyIHNlcnZlci4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTm8gcmVzdWx0cyB3ZXJlIGZvdW5kLiIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiL2VuZHBvaW50cy9lbXBsb3llZXMvY291bnQiIDogewogICAgICAiZ2V0IiA6IHsKICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNvdW50IGEgbXlzcWwvZW1wbG95ZWVzIiwKICAgICAgICAib3BlcmF0aW9uSWQiIDogIkNvdW50IG15c3FsL2VtcGxveWVlIiwKICAgICAgICAidGFncyIgOiBbICJteXNxbC9lbXBsb3llZXMiIF0sCiAgICAgICAgInByb2R1Y2VzIiA6IFsgImFwcGxpY2F0aW9uL2pzb24iIF0sCiAgICAgICAgInBhcmFtZXRlcnMiIDogWyB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIkNvbnN0cmFpbnMgdmFsdWVzIGZvciBmaWVsZHMuIFRoZSB2YWx1ZSBzaG91bGQgYmUgZW5jb2RlZCBKU09OLiIsCiAgICAgICAgICAiZm9ybWF0IiA6ICJqc29uIiwKICAgICAgICAgICJyZXF1aXJlZCIgOiBmYWxzZSwKICAgICAgICAgICJpbiIgOiAicXVlcnkiLAogICAgICAgICAgIm5hbWUiIDogIndoZXJlIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSBdLAogICAgICAgICJyZXNwb25zZXMiIDogewogICAgICAgICAgIjIwMCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVGhlIGNvdW50IHN1Y2NlZWRlZCwgYW5kIHRoZSByZXN1bHRzIGFyZSBhdmFpbGFibGUuIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgInR5cGUiIDogImludGVnZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNDAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJCYWQgcmVxdWVzdC4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwMSIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiVW5hdXRob3JpemVkIiwKICAgICAgICAgICAgInNjaGVtYSIgOiB7CiAgICAgICAgICAgICAgIiRyZWYiIDogIiMvZGVmaW5pdGlvbnMvVW5hdXRob3JpemVkRXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAiNTAwIiA6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIiA6ICJTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgdGhlIHJlcXVlc3Q7IGNoZWNrIG91dCB0aGUgbG9ncyBvbiB5b3VyIHNlcnZlci4iCiAgICAgICAgICB9LAogICAgICAgICAgIjQwNCIgOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiIgOiAiTm8gcmVzdWx0cyB3ZXJlIGZvdW5kLiIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogICJkZWZpbml0aW9ucyIgOiB7CiAgICAidGVzdHVzZXItZnVsbCIgOiB7CiAgICAgICJyZXF1aXJlZCIgOiBbICJpZCIgXSwKICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICJmaXJzdF9uYW1lIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAibGFzdF9uYW1lIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAiZW1haWwiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJpZCIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0KICAgICAgfSwKICAgICAgInR5cGUiIDogIm9iamVjdCIKICAgIH0sCiAgICAic2NoZW1hLnNzY2wtZGItZGVtb19ncmVldGluZyIgOiB7CiAgICAgICJkZXNjcmlwdGlvbiIgOiAiQSBncmVldGluZyBtZXNzYWdlIGZvciB0aGUgdXNlciIsCiAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICB9LAogICAgIlJlc3BvbnNlTW9kZWwiIDogewogICAgICAicmVxdWlyZWQiIDogWyAicmVxdWVzdC1pZCIsICJzdWNjZXNzIiBdLAogICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgImNvZGUiIDogewogICAgICAgICAgImZvcm1hdCIgOiAiaW50MzIiLAogICAgICAgICAgInR5cGUiIDogImludGVnZXIiCiAgICAgICAgfSwKICAgICAgICAic3VjY2VzcyIgOiB7CiAgICAgICAgICAidHlwZSIgOiAiYm9vbGVhbiIKICAgICAgICB9LAogICAgICAgICJyZXF1ZXN0LWlkIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAibWVzc2FnZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgInVybCIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0KICAgICAgfSwKICAgICAgInR5cGUiIDogIm9iamVjdCIKICAgIH0sCiAgICAiRXJyb3JNb2RlbCIgOiB7CiAgICAgICJyZXF1aXJlZCIgOiBbICJjb2RlIiwgIm1lc3NhZ2UiLCAicmVxdWVzdC1pZCIsICJzdWNjZXNzIiBdLAogICAgICAicHJvcGVydGllcyIgOiB7CiAgICAgICAgImNvZGUiIDogewogICAgICAgICAgImZvcm1hdCIgOiAiaW50MzIiLAogICAgICAgICAgInR5cGUiIDogImludGVnZXIiCiAgICAgICAgfSwKICAgICAgICAic3VjY2VzcyIgOiB7CiAgICAgICAgICAiZGVmYXVsdCIgOiBmYWxzZSwKICAgICAgICAgICJ0eXBlIiA6ICJib29sZWFuIgogICAgICAgIH0sCiAgICAgICAgInJlcXVlc3QtaWQiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJtZXNzYWdlIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAidXJsIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfQogICAgICB9LAogICAgICAidHlwZSIgOiAib2JqZWN0IgogICAgfSwKICAgICJteXNxbC9lbXBsb3llZXMtZnVsbCIgOiB7CiAgICAgICJyZXF1aXJlZCIgOiBbICJlbXBfbm8iIF0sCiAgICAgICJwcm9wZXJ0aWVzIiA6IHsKICAgICAgICAiYmlydGhfZGF0ZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgImZpcnN0X25hbWUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJsYXN0X25hbWUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJnZW5kZXIiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJoaXJlX2RhdGUiIDogewogICAgICAgICAgInR5cGUiIDogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJlbXBfbm8iIDogewogICAgICAgICAgInR5cGUiIDogIm51bWJlciIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJ0eXBlIiA6ICJvYmplY3QiCiAgICB9LAogICAgIlVuYXV0aG9yaXplZEVycm9yIiA6IHsKICAgICAgInJlcXVpcmVkIiA6IFsgImlkIiwgIm1lc3NhZ2UiLCAic3VjY2VzcyIgXSwKICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICJzdWNjZXNzIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJib29sZWFuIgogICAgICAgIH0sCiAgICAgICAgImlkIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAibWVzc2FnZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0KICAgICAgfSwKICAgICAgInR5cGUiIDogIm9iamVjdCIKICAgIH0sCiAgICAibXlzcWwvZW1wbG95ZWVzIiA6IHsKICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICJiaXJ0aF9kYXRlIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAiZmlyc3RfbmFtZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgImxhc3RfbmFtZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgImdlbmRlciIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgImhpcmVfZGF0ZSIgOiB7CiAgICAgICAgICAidHlwZSIgOiAic3RyaW5nIgogICAgICAgIH0KICAgICAgfSwKICAgICAgInR5cGUiIDogIm9iamVjdCIKICAgIH0sCiAgICAic2NoZW1hLnNzY2wtZGItZGVtb19lcnJvciIgOiB7CiAgICAgICJyZXF1aXJlZCIgOiBbICJlcnJvciIgXSwKICAgICAgInByb3BlcnRpZXMiIDogewogICAgICAgICJlcnJvciIgOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBlcnJvciBtZXNzYWdlIiwKICAgICAgICAgICJ0eXBlIiA6ICJzdHJpbmciCiAgICAgICAgfQogICAgICB9LAogICAgICAidHlwZSIgOiAib2JqZWN0IgogICAgfQogIH0sCiAgInNlY3VyaXR5RGVmaW5pdGlvbnMiIDogewogICAgIkFQSSBLZXkiIDogewogICAgICAidHlwZSIgOiAiYXBpS2V5IiwKICAgICAgImRlc2NyaXB0aW9uIiA6ICJBUEkgS2V5IiwKICAgICAgIm5hbWUiIDogIktleUlkIiwKICAgICAgImluIiA6ICJoZWFkZXIiCiAgICB9CiAgfSwKICAic2VjdXJpdHkiIDogWyB7CiAgICAiQVBJIEtleSIgOiBbIF0KICB9IF0sCiAgImluZm8iIDogewogICAgInRpdGxlIiA6ICJZTkFQIEFQSSIsCiAgICAiZGVzY3JpcHRpb24iIDogIkFuIEFQSSBCdWlsZGVyIHNlcnZpY2UiLAogICAgInZlcnNpb24iIDogIjEuMC4wIgogIH0sCiAgIngtYXh3YXkiIDogewogICAgImNvcnNFbmFibGVkIiA6IHRydWUsCiAgICAiYmFzZVBhdGhzIiA6IFsgIiIgXSwKICAgICJzZXJ2aWNlVHlwZSIgOiAicmVzdCIsCiAgICAiZGVwcmVjYXRlZCIgOiBmYWxzZSwKICAgICJ0YWdzIiA6IHsKICAgICAgIkVOVjIiIDogWyAiQ0VOVFJBTCIgXSwKICAgICAgIkVOViIgOiBbICJDRU5UUkFMIiBdCiAgICB9LAogICAgImltYWdlIiA6ICIvYXBpL3BvcnRhbC92MS4zL2Rpc2NvdmVyeS9zd2FnZ2VyL2FwaXMvMDhlZDZhOWItYTA2ZC00NmRjLWFjNzQtNzUyZjk2ZGJiOWU2L2ltYWdlIiwKICAgICJhdmFpbGFibGVTREsiIDogewogICAgICAiaW9zLXN3aWZ0IiA6ICIvZGlzY292ZXJ5L3Nkay8wOGVkNmE5Yi1hMDZkLTQ2ZGMtYWM3NC03NTJmOTZkYmI5ZTYvaW9zLXN3aWZ0IiwKICAgICAgInRpdGFuaXVtIiA6ICIvZGlzY292ZXJ5L3Nkay8wOGVkNmE5Yi1hMDZkLTQ2ZGMtYWM3NC03NTJmOTZkYmI5ZTYvdGl0YW5pdW0iLAogICAgICAiYW5kcm9pZCIgOiAiL2Rpc2NvdmVyeS9zZGsvMDhlZDZhOWItYTA2ZC00NmRjLWFjNzQtNzUyZjk2ZGJiOWU2L2FuZHJvaWQiLAogICAgICAibm9kZWpzIiA6ICIvZGlzY292ZXJ5L3Nkay8wOGVkNmE5Yi1hMDZkLTQ2ZGMtYWM3NC03NTJmOTZkYmI5ZTYvbm9kZWpzIgogICAgfSwKICAgICJjdXN0b21Qcm9wZXJ0aWVzIiA6IHsgfQogIH0KfQ==",
                "version": "1.0.0",
                "contentType": "application/json"
            }
        }
    },
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82.5",
        "title": "YNAP API (V7)",
        "metadata": {
            "id": "8a2e8551774605c901775dcd9b83086f",
            "audit": {
                "createTimestamp": "2021-02-01T13:34:51.779+0000",
                "createUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd",
                "modifyTimestamp": "2023-07-21T03:47:07.246+0000",
                "modifyUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd"
            },
            "scope": {
                "id": "e4e57c9575008de90175216b69eb273f",
                "kind": "Environment",
                "name": "axwayv7t",
                "title": "axwayv7t",
                "selfLink": "/management/v1alpha1/environments/axwayv7t"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "68159",
            "references": [
                {
                    "id": "8a2e8551774605c901775db0f82c078b",
                    "kind": "APIService",
                    "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "scopeKind": "Environment",
                    "scopeName": "axwayv7t",
                    "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservices/e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservicerevisions/e3f22b1c-648d-11eb-9fcc-005056bebf82.5"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayDiscoveryAgent",
            "externalAPIID": "08ed6a9b-a06d-46dc-ac74-752f96dbb9e6",
            "externalAPIName": "YNAP API",
            "majorHash": "16866526994888931492",
            "minorHash": "9260523156977670578",
            "prevAPIServiceRevisionID": "8a2e9617774604dc01775dcd27c7078b"
        },
        "finalizers": [],
        "tags": [
            "ENV_CENTRAL",
            "ENV2_CENTRAL",
            "APIID_60bd5696-7ad9-4ea7-b562-04a85c57e020"
        ],
        "spec": {
            "apiService": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "1.0.0",
                "contentType": "application/json"
            }
        }
    },
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82.1",
        "title": "YNAP API (V7)",
        "metadata": {
            "id": "8a2e9617774604dc01775db0f9a40703",
            "audit": {
                "createTimestamp": "2021-02-01T13:03:35.332+0000",
                "createUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd",
                "modifyTimestamp": "2023-07-21T03:47:09.146+0000",
                "modifyUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd"
            },
            "scope": {
                "id": "e4e57c9575008de90175216b69eb273f",
                "kind": "Environment",
                "name": "axwayv7t",
                "title": "axwayv7t",
                "selfLink": "/management/v1alpha1/environments/axwayv7t"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "68140",
            "references": [
                {
                    "id": "8a2e8551774605c901775db0f82c078b",
                    "kind": "APIService",
                    "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "scopeKind": "Environment",
                    "scopeName": "axwayv7t",
                    "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservices/e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservicerevisions/e3f22b1c-648d-11eb-9fcc-005056bebf82.1"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayDiscoveryAgent",
            "externalAPIID": "08ed6a9b-a06d-46dc-ac74-752f96dbb9e6",
            "externalAPIName": "YNAP API",
            "majorHash": "8275274961915904445",
            "minorHash": "9260523156977670578"
        },
        "finalizers": [],
        "tags": [
            "ENV_CENTRAL",
            "ENV2_CENTRAL",
            "APIID_60bd5696-7ad9-4ea7-b562-04a85c57e020"
        ],
        "spec": {
            "apiService": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "1.0.0",
                "contentType": "application/json"
            }
        }
    },
    {
        "group": "management",
        "apiVersion": "v1alpha1",
        "kind": "APIServiceRevision",
        "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82.4",
        "title": "YNAP API (V7)",
        "metadata": {
            "id": "8a2e9617774604dc01775dcd27c7078b",
            "audit": {
                "createTimestamp": "2021-02-01T13:34:22.151+0000",
                "createUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd",
                "modifyTimestamp": "2023-07-21T03:47:07.178+0000",
                "modifyUserId": "DOSA_f4a3c93d5889442fbfc23a3592d2afcd"
            },
            "scope": {
                "id": "e4e57c9575008de90175216b69eb273f",
                "kind": "Environment",
                "name": "axwayv7t",
                "title": "axwayv7t",
                "selfLink": "/management/v1alpha1/environments/axwayv7t"
            },
            "acl": [],
            "accessRights": {
                "canChangeOwner": true,
                "canDelete": true,
                "canWrite": true,
                "canRead": true
            },
            "resourceVersion": "68158",
            "references": [
                {
                    "id": "8a2e8551774605c901775db0f82c078b",
                    "kind": "APIService",
                    "name": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "scopeKind": "Environment",
                    "scopeName": "axwayv7t",
                    "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservices/e3f22b1c-648d-11eb-9fcc-005056bebf82",
                    "type": "hard",
                    "group": "management"
                }
            ],
            "selfLink": "/management/v1alpha1/environments/axwayv7t/apiservicerevisions/e3f22b1c-648d-11eb-9fcc-005056bebf82.4"
        },
        "attributes": {
            "createdBy": "EnterpriseEdgeGatewayDiscoveryAgent",
            "externalAPIID": "08ed6a9b-a06d-46dc-ac74-752f96dbb9e6",
            "externalAPIName": "YNAP API",
            "majorHash": "10443664794380772595",
            "minorHash": "9260523156977670578",
            "prevAPIServiceRevisionID": "8a2e8551774605c901775dccbce80852"
        },
        "finalizers": [],
        "tags": [
            "ENV_CENTRAL",
            "ENV2_CENTRAL",
            "APIID_60bd5696-7ad9-4ea7-b562-04a85c57e020"
        ],
        "spec": {
            "apiService": "e3f22b1c-648d-11eb-9fcc-005056bebf82",
            "definition": {
                "type": "oas2",
                "value": "",
                "version": "1.0.0",
                "contentType": "application/json"
            }
        }
    }
]
