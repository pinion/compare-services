{
  "swagger" : "2.0",
  "host" : "ptx152.demo.axway.com:8065",
  "basePath" : "/api/v1",
  "schemes" : [ "https" ],
  "paths" : {
    "/agreements/{id}/documentAgreements" : {
      "get" : {
        "description" : "Returns a collection of document agreement objects that are available for a specific agreement.",
        "operationId" : "resource_AgreementResource_getDocumentAgreements_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the agreement. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Available values: name, type, version. Example: name='X12Document'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name, type, version. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Adds a document agreement to an agreement specified by the unique identifier. A document agreement is a B2Bi\r\nobject that is used to specify how a document type (within a messaging standard and standard version) is to be\r\nhandled in an inbound agreement between exchange partners. A service can be added to define how the document will\r\nbe processed. For a service to be associated to a document agreement some criteria must be met. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12DocumentAgreement\",\r\n \"enabled\": true,\r\n \"documentFormat\": \"X12\",\r\n \"documentName\": \"002000 810\",\r\n \"type\": \"810\",\r\n \"version\": \"002000\",\r\n \"documentServiceId\": \"12311\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addDocumentAgreement_POST",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Contains the document agreement in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_DocumentAgreementBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/pgp/{id}" : {
      "get" : {
        "description" : "Retrieve personal PGP certificate (public part) with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPrivatePGPCertificate_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Certificate ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PGPCertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/inlineProcessors/{id}" : {
      "delete" : {
        "description" : "DELETE custom processor with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_removeInlineProcessor_DELETE",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "Custom processor ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/routingIds" : {
      "get" : {
        "description" : "Retrieve all the routing IDs of given party",
        "operationId" : "resource_TradingPartnerResource_getRoutingIds_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Available fields: type, id. Example: id='X12AXWAY'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: type, id. Default: id.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a routing ID to a party.\r\nExample:\r\n<pre>\r\n {\r\n \"routingId\": \"ZZAXWAY\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_addRoutingId_POST",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The RoutingIdBean to be added . <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_RoutingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/sftpSubDirectory" : {
      "put" : {
        "description" : "Update SFTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"PartnerSFTP\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_modifySftpSubDirectory_PUT",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/ftpSubDirectory/{id}" : {
      "get" : {
        "description" : "GET FTP subdirectory information that has given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getFtpSubDirectory_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE subdirectory with given {id} from FTP protocol",
        "operationId" : "resource_ApplicationExchangePointResource_removeFtpSubDirectory_DELETE",
        "tags" : [ "ApplicationExchangePointResource" ],
        "parameters" : [ {
          "description" : "FTP subdirectory ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/pickup" : {
      "put" : {
        "description" : "Update a pickup protocol. Example:\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"FTPServer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS3\",\r\n \"friendlyName\": \"FTP Trading Pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"metadataFixedItems\": {\r\n \"BusinessProtocol\": \"AS3\"\r\n },\r\n \"restrictConsumableFileSize\": false,\r\n \"maxConsumableFileSize\": 0,\r\n \"metatadaTemplate\": {\r\n \"defaultMetadataTemplate\": \"\",\r\n \"enabledByProtocol\": false,\r\n \"metadataTemplatePolicy\": \"NEVER\",\r\n \"priorityOverFixedAttributes\": false\r\n },\r\n \"useCommunityMessageDelivery\": false,\r\n \"useContentProcessing\": false,\r\n \"ediSplitterEnabled\": true,\r\n \"pickupGroupStatus\": null,\r\n \"pickupGroup\": null,\r\n \"remoteUrl\": \"ftp://Community@somehost.com:4022/path\",\r\n localPort\": 4022,\r\n \"defaultUser\": {\r\n \"userName\": \"axway\",\r\n \"password\": \"12345\",\r\n \"ftpSubDirectories\": [\"/pathaxway\"]\r\n },\r\n sequenced\": false,\r\n \"sequenceTimeoutSeconds\": 60,\r\n \"modifyFtpServerDirectory\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updatePickupExchangePoint_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Pickup protocol update information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConsumerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/inlinePostProcessors/{id}" : {
      "delete" : {
        "description" : "DELETE custom post processor with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_removeInlinePostProcessor_DELETE",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "Custom post processor ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/sftpSubDirectory/{id}" : {
      "get" : {
        "description" : "GET SFTP subdirectory information that has given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSftpSubDirectory_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE subdirectory with given {id} from SFTP protocol",
        "operationId" : "resource_ApplicationExchangePointResource_removeSftpSubDirectory_DELETE",
        "tags" : [ "ApplicationExchangePointResource" ],
        "parameters" : [ {
          "description" : "SFTP subdirectory ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/components/{id}" : {
      "get" : {
        "description" : "Retrieve an additional Processing Step specified by a given ID.  <b>Required</b>.",
        "operationId" : "resource_DocumentServiceResource_getOutputComponent_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the Processing Step associated to a Service output",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentServiceOutputComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove an additional Processing Step with given ID from a specific Service output.",
        "operationId" : "resource_DocumentServiceResource_removeOutputComponent_DELETE",
        "tags" : [ "DocumentServiceResource" ],
        "parameters" : [ {
          "description" : "The ID of the Processing Step to be deleted.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreements/{id}/outputs" : {
      "get" : {
        "description" : "Returns the list of outputs specific to a document agreement. An output contains configuration parameters that\r\nspecify how the document will be delivered or enveloped.",
        "operationId" : "resource_AgreementResource_getDocumentAgreementOutputs_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/component/configurations/{id}" : {
      "get" : {
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfiguration_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/{id}/outputs" : {
      "get" : {
        "description" : "Return the list of outputs for a Service with given ID.",
        "operationId" : "resource_DocumentServiceResource_getDocumentServiceOutputs_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the Service. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/ftpSubDirectory/{id}" : {
      "get" : {
        "description" : "GET FTP subdirectory information that has given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getFtpSubDirectory_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE subdirectory with given {id} from FTP protocol",
        "operationId" : "resource_CommunityExchangePointResource_removeFtpSubDirectory_DELETE",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "FTP subdirectory ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/inlinePostProcessors" : {
      "get" : {
        "description" : "GET list with custom logic as an integral part of the post processing pipeline for the exchange point with {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getInlinePostProcessors_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new custom processor as an integral part of the post processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addInlinePostProcessor_POST",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/sshUser/{id}" : {
      "get" : {
        "description" : "Retrieve a SFTP User account owned by a party",
        "operationId" : "resource_TradingPartnerResource_getSshUser_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the SFTP User account.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a SFTP User account owned by a party",
        "operationId" : "resource_TradingPartnerResource_removeSshUser_DELETE",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID of the SFTP User account.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/{id}/inlineProcessors" : {
      "get" : {
        "description" : "GET list with custom logic as an integral part of the processing pipeline for the exchange point with {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getInlineProcessors_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new custom processor as an integral part of the processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addInlineProcessor_POST",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/subscriptions" : {
      "get" : {
        "description" : "Retrieve all trading partners subscribed under a community",
        "operationId" : "resource_CommunityResource_getSubscribedPartners_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the community.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/ftpSubDirectory" : {
      "put" : {
        "description" : "Update FTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Partner\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_modifyFtpSubDirectory_PUT",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/pgp/private/{id}/export" : {
      "get" : {
        "description" : "Export private PGP certificate with specified {certificateId}.\r\nCertificate will be exported in .asc or .gpg format.",
        "operationId" : "resource_CommunitySecurityResource_exportPrivatePGPCertificate_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "description" : "Private certificate ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Tells us whether you want this certificate to be armoured or not. Optional. Default: false.",
          "required" : false,
          "in" : "query",
          "name" : "isArmored",
          "default" : "false",
          "type" : "boolean"
        }, {
          "description" : "Password for the store and certificate. Optional. Default: empty string.",
          "required" : false,
          "in" : "query",
          "name" : "password",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile/{id}" : {
      "get" : {
        "description" : "Returns a Metadata Profile with the specified ID.",
        "operationId" : "resource_MetadataProfileResource_getMetadataProfile_GET",
        "tags" : [ "MetadataProfileResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the desired metadataprofile profile. <b>Required</b>",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MetadataProfileBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Deletes the Metadata Profile of given ID.",
        "operationId" : "resource_MetadataProfileResource_removeMetadataProfile_DELETE",
        "tags" : [ "MetadataProfileResource" ],
        "parameters" : [ {
          "description" : "The ID o the Metadata profile to be deleted. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/emailUsers/{id}" : {
      "get" : {
        "description" : "Returns the email user account with given ID.",
        "operationId" : "resource_TradingPartnerResource_getEmailUserBean_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_EmailUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Deletes an email user account that is no longer in use.",
        "operationId" : "resource_TradingPartnerResource_removeEmailUser_DELETE",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/messagingId/{id}" : {
      "get" : {
        "description" : "Retrieve a single messaging ID given by {id}",
        "operationId" : "resource_TradingPartnerResource_getMessagingId_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the messaging ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a party messaging ID having the ID {id}",
        "operationId" : "resource_TradingPartnerResource_removeMessagingId_DELETE",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID of the messaging ID to be removed.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/schedules" : {
      "put" : {
        "description" : "Update a given scheduler. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updateSchedule_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/postDetectionComponent/configurations/arguments" : {
      "put" : {
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_updateArgument_PUT",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{partyId}/trading/pickup/status" : {
      "put" : {
        "description" : "Enable or disable all pickups for receiving partner messages. When disabling all pickups, the default pickup will\r\nnot be disabled.",
        "operationId" : "resource_CommunityExchangePointResource_changeStatusOnPickupExchanges_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "The ID of the community. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "partyId",
          "type" : "string"
        }, {
          "description" : "True to enable all trading pickups or false to disable all trading pickups. Optional, available values:\r\ntrue, false. Default false.",
          "required" : false,
          "in" : "query",
          "name" : "enable",
          "default" : "false",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreement/attributes/templates/{id}" : {
      "get" : {
        "description" : "Returns a specific attribute that has been added to the document agreement attributes template.",
        "operationId" : "resource_AgreementResource_getDocumentAttributeField_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AttributeTemplateBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Removes from the document agreement attributes template the attribute specified by the unique identifier.",
        "operationId" : "resource_AgreementResource_deleteDocumentAttributeTemplate_DELETE",
        "tags" : [ "AgreementResource" ],
        "parameters" : [ {
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/component/{id}/configurations" : {
      "get" : {
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/{id}/trust" : {
      "put" : {
        "description" : "Make a public certificate trusted by the community",
        "operationId" : "resource_TradingPartnersSecurityResource_trustCertificate_PUT",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "parameters" : [ {
          "description" : "The certificate ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The community ID. <b>Required</b>.",
          "required" : false,
          "in" : "query",
          "name" : "communityId",
          "type" : "string"
        }, {
          "description" : "Optional, available values: transport, trading. Default: transport.",
          "required" : false,
          "in" : "query",
          "name" : "usage",
          "default" : "transport",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/functionalGroups/{id}/sequenceNumbers" : {
      "get" : {
        "description" : "Returns the list of sequence numbers specific to a functional group agreement. Each of the sequence numbers\r\ncontains the counter for a specific generator. This applies only to EDIFACT and X12 outbound functional group\r\nagreements.",
        "operationId" : "resource_AgreementResource_getFunctionalGroupSequenceNumbers_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the functional group agreement. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "description" : "Updates the counter for a generator on the specified functional group agreement . This applies only to EDIFACT and\r\nX12 outbound functional group agreements. Example:\r\n<pre>\r\n {\r\n \"value\": 999999,\r\n \"identifier\": \"GS06\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyFunctionalGroupSequenceNumber_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the functional group agreement. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Contains the counter in the specific format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SequenceNumberBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners" : {
      "get" : {
        "description" : "Retrieve all parties",
        "operationId" : "resource_TradingPartnerResource_getParties_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A defined filter used to filter the results. Available fields: _id, partyName, countryCode. Example: partyName='AXWAY'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "partyName",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Update the information for a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primaryContact\":\r\n \t\t{\r\n \t\t\"primary\": true,\r\n \t\t\"name\": \"Interchange\",\r\n \t\t\"email\": \"Interchange@axway.com\",\r\n \t\t\"phone\": \"\",\r\n \t\t\"notes\": null,\r\n \t\t\"title\": null\r\n \t\t},\r\n \"enabled\": true,\r\n \"defaultRoutingId\":\r\n \t\t{\r\n \t\t\"type\": \"\",\r\n \t\t\"routingId\": \"Interchange\"\r\n \t\t},\r\n \"partyName\": \"Interchange\",\r\n \"@id\": \"12345\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateParty_PUT",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_TradingPartnerBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primaryContact\":\r\n \t\t{\r\n \t\t\"primary\": true,\r\n \t\t\"name\": \"Interchange\",\r\n \t\t\"email\": \"Interchange@axway.com\",\r\n \t\t\"phone\": \"\",\r\n \t\t\"notes\": null,\r\n \t\t\"title\": null\r\n \t\t},\r\n \"enabled\": true,\r\n \"defaultRoutingId\":\r\n \t\t{\r\n \t\t\"type\": \"\",\r\n \t\t\"routingId\": \"Interchange\"\r\n \t\t},\r\n \"partyName\": \"Interchange\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_addParty_POST",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A CommunityBean or a TradingPartnerBean.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_TradingPartnerBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/application/exchange/pickup/{id}/addressing" : {
      "get" : {
        "description" : "GET sender/receiver rules for consumed files by application pickup with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getAddressingRules_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Application pickup ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AddressingRulesBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "description" : "Update sender/receiver rules for files consumed by application pickup with given {id}. Example:\r\n<pre>\r\n {\r\n \"fromAddress\": {\r\n \"addressingAction\": \"USE_FIXED_PARTY\",\r\n \"parseEdi\": false,\r\n \"edifactUseInternal\": false,\r\n \"parseXml\": false,\r\n \"xpaths\": [],\r\n \"fixedPartyId\": \"123456\"\r\n },\r\n \"toAddress\": {\r\n \"addressingAction\": \"USE_METADATA_OR_PROTOCOL_ADDRESS\",\r\n \"parseEdi\": false,\r\n \"edifactUseInternal\": false,\r\n \"parseXml\": false,\r\n \"xpaths\": [],\r\n \"fixedPartyId\": null\r\n }\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updateAddressingRules_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Application pickup ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Information about sender/receiver rules. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AddressingRulesBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/sftpSubDirectory" : {
      "get" : {
        "description" : "GET subdirectories information for SFTP protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getSftpSubDirectories_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new subdirectory to SFTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"CommunitySFTP\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addSftpSubDirectory_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/pgp/public" : {
      "get" : {
        "description" : "Retrieve all personal PGP certificates used by community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPublicPGPCertificates_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/sshkeys/{id}" : {
      "get" : {
        "description" : "Retrieve SSH key (public information) with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getSshPublicKeyForPrivate_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SSH key ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PublicKeyCredentialsBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Delete from the system SSH key with given {id}",
        "operationId" : "resource_CommunitySecurityResource_deleteSshPrivateKey_DELETE",
        "tags" : [ "CommunitySecurityResource" ],
        "parameters" : [ {
          "description" : "SSH key ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/component/{id}/configurations" : {
      "get" : {
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_AgreementResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/public/{id}/export" : {
      "get" : {
        "description" : "Export trusted certificate with specified {id} from the system",
        "operationId" : "resource_CommunitySecurityResource_exportPublicCertificate_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "description" : "Trusted certificate ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Certificate format. Optional, available values:\r\n<ul>\r\n<li><i>.cer</i> DER encoded binary X.509</li>\r\n<li><i>.p7b,.p7c</i> Cryptographic Message Syntax Standard PKCS #7</li>\r\n</ul>Default: p7b.",
          "required" : false,
          "in" : "query",
          "name" : "format",
          "default" : "p7b",
          "type" : "string"
        }, {
          "description" : "In case of <i>.p7b, .p7c</i> choose to include the other certificates in the chain. Optional, available values:\r\ntrue, false. Default: true.",
          "required" : false,
          "in" : "query",
          "name" : "includeChain",
          "default" : "true",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/inlineProcessors" : {
      "put" : {
        "description" : "Update a given custom processor. Example:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updateInlineProcessor_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/ftpUser/{id}" : {
      "get" : {
        "description" : "Retrieve a FTP User account owned by a party",
        "operationId" : "resource_CommunityResource_getFtpUserBean_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the FTP User account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a FTP User account owned by a party",
        "operationId" : "resource_CommunityResource_removeFtpUser_DELETE",
        "tags" : [ "CommunityResource" ],
        "parameters" : [ {
          "description" : "The ID of the FTP User account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/messagingId/{id}" : {
      "get" : {
        "description" : "Retrieve a single messaging ID given by {id}",
        "operationId" : "resource_CommunityResource_getMessagingId_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the messaging ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a party messaging ID having the ID {id}",
        "operationId" : "resource_CommunityResource_removeMessagingId_DELETE",
        "tags" : [ "CommunityResource" ],
        "parameters" : [ {
          "description" : "The ID of the messaging ID to be removed.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/component/configurations/arguments" : {
      "put" : {
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_updateArgument_PUT",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/routingIds" : {
      "get" : {
        "description" : "Retrieve all the routing IDs of given party",
        "operationId" : "resource_CommunityResource_getRoutingIds_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Available fields: type, id. Example: id='X12AXWAY'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: type, id. Default: id.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a routing ID to a party.\r\nExample:\r\n<pre>\r\n {\r\n \"routingId\": \"ZZAXWAY\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addRoutingId_POST",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The RoutingIdBean to be added . <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_RoutingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/{id}/export" : {
      "get" : {
        "description" : "Export a certificate",
        "operationId" : "resource_TradingPartnersSecurityResource_exportPublicCertificate_GET",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "description" : "The ID of the certificate to export. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The format in which the certificate will be exported. Optional, available values: p7b, cer. Default: p7b.",
          "required" : false,
          "in" : "query",
          "name" : "format",
          "default" : "p7b",
          "type" : "string"
        }, {
          "description" : "This option includes all certificates in the chain of trust for the certificate. Optional, available values: true, false. Default: true.",
          "required" : false,
          "in" : "query",
          "name" : "includeChain",
          "default" : "true",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/{id}" : {
      "get" : {
        "description" : "GET application delivery with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getDeliveryExchangePoint_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Application delivery ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ProducerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE application delivery with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeDeliveryExchangePoint_DELETE",
        "tags" : [ "ApplicationExchangePointResource" ],
        "parameters" : [ {
          "description" : "Application delivery ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile/outputs" : {
      "put" : {
        "description" : "Updates the configuration for a specific output. Depending on the service type the metadata profile can have\r\none or multiple outputs. Example:\r\n<pre>\r\n {\r\n \"@class\": \"MPDeliverToSender\",\r\n \"useOutboundAgreement\": \"true\",\r\n \"outboundAgreements\": [\r\n  {\r\n   \"id\": null,\r\n   \"senderId\": \"11111\",\r\n   \"receiverId\": \"22222\",\r\n   \"agreementId\": \"12345\",\r\n   \"overrideTransportReceiver\": false,\r\n   \"transportReceiverId\": null,\r\n   \"transportReceiverRoutingId\": null,\r\n   \"deliveryExchangeId\": \"1234567\"\r\n  }\r\n ],\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_MetadataProfileResource_modifyMetadataProfileOutput_PUT",
        "tags" : [ "MetadataProfileResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the output in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MetadataProfileOutputBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/trading/sponsor" : {
      "get" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getSponsor_GET",
        "tags" : [ "WebTraderResource" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyTradingInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/communities/messagingId" : {
      "put" : {
        "description" : "Update a messaging ID.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"X12MessagingId\",\r\n \"primary\": true,\r\n \"enabled\": true,\r\n \"name\": \"X12 MID\",\r\n \"routingId\": \"ZZ:AXWAY:COM\",\r\n \"interchangeIdQualifier\": \"ZZ\",\r\n \"interchangeId\": \"AXWAY\",\r\n \"applicationId\": \"COM\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_modifyMessagingId_PUT",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MessagingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreement/{id}/attributes" : {
      "get" : {
        "description" : "Returns the list of attributes and their values for a document agreement specified by the unique identifier.",
        "operationId" : "resource_AgreementResource_getDocumentAgreementAttributes_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "description" : "Updates the values of an attribute that is associated to a specific document agreement. To set a value the\r\nattribute must be defined in the document agreement attributes template. Each attribute can have one or more\r\nvalue defined.  If an attribute is required, a value must be provided. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"clearedAtRuntime\": false,\r\n \"values\": [\r\n \"value\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyDocumentAgreementAttribute_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Contains the attribute in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AttributeValueBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/registered" : {
      "get" : {
        "description" : "Returns the collection of resources that reside on the integration engine. A resource is used in a component to\r\nassociate a piece of message-processing code with a set of specific parameters and message formats.",
        "operationId" : "resource_ComponentResource_getRegisteredComponents_GET",
        "tags" : [ "ComponentResource" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/inlinePostProcessors/{id}" : {
      "delete" : {
        "description" : "DELETE custom post processor with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeInlinePostProcessor_DELETE",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "parameters" : [ {
          "description" : "Custom post processor ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/routingIds/{id}/default" : {
      "put" : {
        "description" : "Set the default Routing ID on a party.\r\nExample:\r\n<pre>\r\n {\r\n \"type\": \"XXT\",\r\n \"routingId\": \"ZZAXWAY\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_setDefaultRoutingId_PUT",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID Routing ID to be set as default on a party. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/contacts/{id}" : {
      "get" : {
        "description" : "Retrieve a contact information",
        "operationId" : "resource_CommunityResource_getContact_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the contact.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ContactBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a contact of the party",
        "operationId" : "resource_CommunityResource_deleteContact_DELETE",
        "tags" : [ "CommunityResource" ],
        "parameters" : [ {
          "description" : "The id of the contact to be removed.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/pgp/public/{id}/export" : {
      "get" : {
        "description" : "Export public PGPCertificate with specified {certificateId}.\r\nCertificate will be exported in .asc or .gpg format.",
        "operationId" : "resource_TradingPartnersSecurityResource_exportPublicPGPCertificate_GET",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "description" : "Public certificate ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Tells us whether you want this certificate to be armoured or not. Optional. Default: false.",
          "required" : false,
          "in" : "query",
          "name" : "isArmored",
          "default" : "false",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/{id}/schedules" : {
      "get" : {
        "description" : "GET list with schedulers for the exchange point with {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getSchedules_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a new scheduler for the exchange point with {id}. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addSchedule_POST",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/services/postDetectionComponent/configurations/{id}/arguments" : {
      "get" : {
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getArguments_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities" : {
      "get" : {
        "description" : "Retrieve all parties",
        "operationId" : "resource_CommunityResource_getParties_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A defined filter used to filter the results. Available fields: _id, partyName, countryCode. Example: partyName='AXWAY'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "partyName",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Update the information for a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primaryContact\":\r\n \t\t{\r\n \t\t\"primary\": true,\r\n \t\t\"name\": \"Interchange\",\r\n \t\t\"email\": \"Interchange@axway.com\",\r\n \t\t\"phone\": \"\",\r\n \t\t\"notes\": null,\r\n \t\t\"title\": null\r\n \t\t},\r\n \"enabled\": true,\r\n \"defaultRoutingId\":\r\n \t\t{\r\n \t\t\"type\": \"\",\r\n \t\t\"routingId\": \"Interchange\"\r\n \t\t},\r\n \"partyName\": \"Interchange\",\r\n \"@id\": \"12345\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateParty_PUT",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_CommunityBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primaryContact\":\r\n \t\t{\r\n \t\t\"primary\": true,\r\n \t\t\"name\": \"Interchange\",\r\n \t\t\"email\": \"Interchange@axway.com\",\r\n \t\t\"phone\": \"\",\r\n \t\t\"notes\": null,\r\n \t\t\"title\": null\r\n \t\t},\r\n \"enabled\": true,\r\n \"defaultRoutingId\":\r\n \t\t{\r\n \t\t\"type\": \"\",\r\n \t\t\"routingId\": \"Interchange\"\r\n \t\t},\r\n \"partyName\": \"Interchange\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addParty_POST",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A CommunityBean or a TradingPartnerBean.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_CommunityBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/contacts/{id}" : {
      "get" : {
        "description" : "Retrieve a contact information",
        "operationId" : "resource_TradingPartnerResource_getContact_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the contact.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ContactBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a contact of the party",
        "operationId" : "resource_TradingPartnerResource_deleteContact_DELETE",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The id of the contact to be removed.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/inlineProcessors/{id}" : {
      "delete" : {
        "description" : "DELETE custom processor with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeInlineProcessor_DELETE",
        "tags" : [ "ApplicationExchangePointResource" ],
        "parameters" : [ {
          "description" : "Custom processor ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/inlineProcessors" : {
      "put" : {
        "description" : "Update a given custom processor. Example:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_updateInlineProcessor_PUT",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/ftpUser" : {
      "put" : {
        "description" : "Update information for a specific FTP user. Example:\r\n<pre>\r\n {\r\n \"userName\": \"Community\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [\r\n \"/path\"\r\n ],\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_modifyFtpUser_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/{id}/functionalGroups" : {
      "get" : {
        "description" : "Updates the configuration of a specific functional group.",
        "operationId" : "resource_AgreementResource_getFunctionalGroups_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='X12FunctionalGroup'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "description" : "Adds a functional group to an agreement specified by a unique identifier. When one or more transactions sets are\r\nreceived from a trading partner in an interchange, the transaction sets will be grouped in functional groups\r\nwithin the envelope. Transactions set that are grouped together are identified by the same functional group ID.\r\nThe agreements that support functional grouping are X12 and EDIFACT. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12InboundFunctionalGroup\",\r\n \"name\": \"Default\",\r\n \"functionalGroupId\": \"\",\r\n \"senderMessagingId\": \"12311\",\r\n \"receiverMessagingId\": \"12322\",\r\n \"responsibleAgencyCode\": null,\r\n \"identifierCode\": \"\",\r\n \"useFunctionalGroupId\": false,\r\n \"useSenderMessagingId\": true,\r\n \"useReceiverMessagingId\": true,\r\n \"useResponsibleAgencyCode\": false,\r\n \"useIdentifierCode\": false\"@id\": \"83001\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addFunctionalGroup_POST",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Contains the functional group in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FunctionalGroupBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FunctionalGroupBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/{certificateId}" : {
      "delete" : {
        "description" : "Remove a public certificate with the ID {id} from a trading partner.",
        "operationId" : "resource_TradingPartnersSecurityResource_deletePublicCertificate_DELETE",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "parameters" : [ {
          "description" : "The ID of the public certificate that will be removed from the trading partner. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "certificateId",
          "type" : "string"
        }, {
          "description" : "The partner ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/ftpUser" : {
      "put" : {
        "description" : "Update a FTP User account owned by a party.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"axway\",\r\n \"password\": \"1234\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [],\r\n \"@id\": \"12345\"\r\n }\r\n\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateFtpUser_PUT",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/emailUsers" : {
      "put" : {
        "description" : "Updates an email user account.\r\nExample:\r\n<pre>\r\n {\r\n \"emailAddress\" : \"*@newhost.com\",\r\n \"enabled\" : true,\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateEmailUser_PUT",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_EmailUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/inlineProcessors" : {
      "get" : {
        "description" : "GET list with custom logic as an integral part of the processing pipeline for the exchange point with {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getInlineProcessors_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new custom processor as an integral part of the processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addInlineProcessor_POST",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{id}/inlinePostProcessors" : {
      "get" : {
        "description" : "GET list with custom logic as an integral part of the post processing pipeline for the exchange point with {id}",
        "operationId" : "resource_CommunityExchangePointResource_getInlinePostProcessors_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new custom processor as an integral part of the post processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addInlinePostProcessor_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/messages/{id}/attributes" : {
      "get" : {
        "description" : "Returns a collection of Attributes that are available for a specific Message.",
        "operationId" : "resource_MessagesResource_getMessageAttributes_GET",
        "tags" : [ "MessagesResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The Id of the Message. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Available values: _id, name, value. Example: value='true'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: _id, name, value. Default: _id.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "_id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add additional Attribute to the Message having the given Id.\r\nExample:\r\n<pre>\r\n {\r\n \"name\": \"MessageForwardedToIntegration\",\r\n \"value\": \"true\"\r\n }\r\n </pre>",
        "operationId" : "resource_MessagesResource_addMessageAttribute_POST",
        "tags" : [ "MessagesResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The Id of the Message. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The bean containing the additional Attributes to be added. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MessageAttributeBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/private" : {
      "get" : {
        "description" : "Retrieve all personal certificates (public part) used by community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPrivateCertificates_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/deliverySettings" : {
      "get" : {
        "description" : "Retrieve all application delivery settings of a community",
        "operationId" : "resource_CommunityResource_getIntegrationDeliveries_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the community.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add an application delivery settings to a community.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"IntegrationDeliverySettings\",\r\n \"enabled\": true,\r\n \"applicationDeliveryId\": \"999999\",\r\n \"deliveryCriteria\":\r\n  {\r\n \"@class\": \"ConjunctorBean\",\r\n \"conjunctor\": \"AND\",\r\n \"children\":\r\n [\r\n {\r\n \"@class\": \"MetadataCondition\",\r\n \"metadataName\": \"DocumentType\",\r\n \"compareOperator\": \"EQUALS\",\r\n \"metadataValue\": \"ORDERS\"\r\n },\r\n {\r\n \"@class\": \"MetadataCondition\",\r\n \"metadataName\": \"UnpackagedBusinessProtocol\",\r\n \"compareOperator\": \"EQUALS\",\r\n \"metadataValue\": \"AS1\"\r\n }\r\n ]\r\n }\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addIntegrationDelivery_POST",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the community.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The IntegrationDeliverySettingsBean bean to be added.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_IntegrationDeliverySettingsBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/agreements/documentAgreements/outputs/{id}" : {
      "get" : {
        "description" : "Returns the configuration for an output specified by a unique identifier.",
        "operationId" : "resource_AgreementResource_getDocumentAgreementOutput_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the output.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentAgreementOutputBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/pickup/{id}/addressing" : {
      "get" : {
        "description" : "GET information about sender/receiver rules for pickup with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getAddressingRules_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Pickup protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AddressingRulesBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "description" : "Update sender/receiver rules information for a pickup with given {id}. Example:\r\n<pre>\r\n {\r\n \"fromAddress\": {\r\n \"addressingAction\": \"USE_FIXED_PARTY\",\r\n \"parseEdi\": false,\r\n \"edifactUseInternal\": false,\r\n \"parseXml\": false,\r\n \"xpaths\": [],\r\n \"fixedPartyId\": \"123456\"\r\n },\r\n \"toAddress\": {\r\n \"addressingAction\": \"USE_METADATA_OR_PROTOCOL_ADDRESS\",\r\n \"parseEdi\": false,\r\n \"edifactUseInternal\": false,\r\n \"parseXml\": false,\r\n \"xpaths\": [],\r\n \"fixedPartyId\": null\r\n }\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updateAddressingRules_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Pickup protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Addressing information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AddressingRulesBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/wsUsers" : {
      "put" : {
        "description" : "Updates an user account that can be used either with an AS4 or an WebServices exchange point.\r\nExample:\r\n<pre>\r\n {\r\n \"user\": \"axway\",\r\n \"password\": \"123\",\r\n \"enabled\": true,\r\n \"policy\": \"Default policy\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateWsUser_PUT",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_WSUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/sshUser" : {
      "get" : {
        "description" : "GET users information for SFTP protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getSshUsers_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new user on SFTP protocol with given {id}. This operation decouples the old user from current protocol.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"CommunitySFTP\",\r\n \"password\": \"Axway123\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addSshUser_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/sshUser" : {
      "get" : {
        "description" : "Retrieve SFTP User accounts owned by a party",
        "operationId" : "resource_TradingPartnerResource_getSshUsers_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/delivery/{id}" : {
      "get" : {
        "description" : "GET Details of a delivery protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getDeliveryExchangePoint_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Pickup delivery protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ProducerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/logout" : {
      "post" : {
        "description" : "Logs out and invalidates the established session cookie from a successful login request.",
        "operationId" : "resource_AuthenticationResource_logout_POST",
        "tags" : [ "AuthenticationResource" ],
        "produces" : [ "application/json", "application/xml" ],
        "responses" : {
          "200" : {
            "description" : "Logout successful.",
            "schema" : {
              "$ref" : "#/definitions/json_Response"
            }
          },
          "401" : {
            "description" : "Error logging out."
          },
          "404" : {
            "description" : "Session information missing."
          }
        }
      }
    },
    "/communities/exchange/inlinePostProcessors" : {
      "put" : {
        "description" : "Update a given custom post processor. Example:\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updatePostInlineProcessor_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Custom post processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/contacts" : {
      "put" : {
        "description" : "Update a contact of a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primary\": true,\r\n \"name\": \"Contact\",\r\n \"email\": \"contact@axway.com\",\r\n \"phone\": \"123456789\",\r\n \"notes\": \"Notes\",\r\n \"title\": \"Title\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateContact_PUT",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/wsUsers/{id}" : {
      "get" : {
        "description" : "Returns the user account with given ID.",
        "operationId" : "resource_TradingPartnerResource_getWsUserBean_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the user account.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_WSUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Deletes a user account that is no longer in use.",
        "operationId" : "resource_TradingPartnerResource_removeWsUser_DELETE",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID of the user account.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/component/configurations/{id}" : {
      "get" : {
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_AgreementResource_ConfigurationResource_getConfiguration_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/private/{id}/export" : {
      "get" : {
        "description" : "Export private certificate with specified {certificateId}.\r\nCertificate will be exported in Personal Information Exchange PKCS #12 (.p12,.pfx) format",
        "operationId" : "resource_CommunitySecurityResource_exportPrivateCertificate_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "description" : "Private certificate ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Password for the store and certificate. Optional. Default: empty string.",
          "required" : false,
          "in" : "query",
          "name" : "password",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/routingIds/{id}" : {
      "get" : {
        "description" : "Retrieve a routing ID of the party",
        "operationId" : "resource_CommunityResource_getRoutingId_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the routing ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_RoutingIdBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a routing ID from a party",
        "operationId" : "resource_CommunityResource_removeRoutingId_DELETE",
        "tags" : [ "CommunityResource" ],
        "parameters" : [ {
          "description" : "The ID of the routing ID to be removed. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery" : {
      "get" : {
        "description" : "GET operation for retrieving all application deliveries",
        "operationId" : "resource_ApplicationExchangePointResource_getDeliveryExchangePoints_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPDelivery'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Update an application delivery. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FileSystemProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"Raw\",\r\n \"friendlyName\": \"FS delivery\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n \"holdMessagesForPickup\": false,\r\n \"directory\": \"C:/B2BiShare/common/data/in\",\r\n \"preserveFilenameMode\": \"SEQUENCE\",\r\n \"preserveFilename\": true,\r\n \"metadataHierarchy\": [],\r\n \"userDefinedDeliveryFilename\": \"\",\r\n \"userDefinedDuplicateFilename\": \"\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updateDeliveryExchangePoint_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Application delivery information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a new application delivery. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FileSystemProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"Raw\",\r\n \"friendlyName\": \"FS delivery\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n \"holdMessagesForPickup\": false,\r\n \"directory\": \"C:/B2BiShare/common/data/in\",\r\n \"preserveFilenameMode\": \"SEQUENCE\",\r\n \"preserveFilename\": true,\r\n \"metadataHierarchy\": [],\r\n \"userDefinedDeliveryFilename\": \"\",\r\n \"userDefinedDuplicateFilename\": \"\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addDeliveryExchangePoint_POST",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Application delivery information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/application/exchange/sshUser" : {
      "put" : {
        "description" : "Update information for a specific SSH user. Example:\r\n<pre>\r\n {\r\n \"userName\": \"CommunitySFTP\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ],\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_modifySshUser_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/inlinePostProcessors" : {
      "put" : {
        "description" : "Update a given custom post processor. Example:\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_updatePostInlineProcessor_PUT",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Custom post processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/ftpSubDirectory" : {
      "put" : {
        "description" : "Update FTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Community\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_modifyFtpSubDirectory_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{partyId}/trading/delivery" : {
      "get" : {
        "description" : "GET operation for retrieving all pickup delivery protocols from community with given {partyId}",
        "operationId" : "resource_CommunityExchangePointResource_getDeliveryExchangePoints_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "partyId",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPPickup'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/user" : {
      "get" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getWebtraderUserDetails_GET",
        "tags" : [ "WebTraderResource" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Only used for Webtrader login.\r\nUpdates the logged in WT user's settings.",
        "operationId" : "resource_WebTraderResource_setWebTraderInfo_PUT",
        "tags" : [ "WebTraderResource" ],
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_WebtraderUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/messages/{id}" : {
      "get" : {
        "description" : "Returns a Message having the given Id.",
        "operationId" : "resource_MessagesResource_getMessage_GET",
        "tags" : [ "MessagesResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The Id of the Message. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessageBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/delivery/{deliveryId}/default" : {
      "put" : {
        "description" : "Make a trading delivery with given {exchangePointId} the default delivery used for trading with a partner",
        "operationId" : "resource_TradingPartnerExchangePointResource_setDefaultExchangePoint_PUT",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "parameters" : [ {
          "description" : "The ID of the trading delivery exchange point to be set as default.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "deliveryId",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Object has been modified successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/login" : {
      "post" : {
        "description" : "Validates and sets the session cookie for a valid user's credentials.  The authentication\r\nheader is a Basic authentication value.\r\n<p>",
        "operationId" : "resource_AuthenticationResource_login_POST",
        "tags" : [ "AuthenticationResource" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "description" : "The basic authentication header containing the user's credentials. <b>Required</b>.",
          "required" : false,
          "in" : "header",
          "name" : "Authorization",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Login successful.",
            "schema" : {
              "$ref" : "#/definitions/json_Response"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          }
        }
      }
    },
    "/messages/attributes" : {
      "put" : {
        "description" : "Update the specified Attribute.\r\nExample:\r\n<pre>\r\n {\r\n \"name\": \"MessageForwardedToIntegration\",\r\n \"value\": \"true\",\r\n \"@id\": \"23456\"\r\n }\r\n </pre>",
        "operationId" : "resource_MessagesResource_modifyMessageAttribute_PUT",
        "tags" : [ "MessagesResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing the Attributes configuration. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MessageAttributeBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/emailUsers" : {
      "get" : {
        "description" : "Returns all the email user accounts belonging to the party with given ID.",
        "operationId" : "resource_TradingPartnerResource_getEmailUsers_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the part. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/ftpUser/{id}" : {
      "get" : {
        "description" : "Retrieve a FTP User account owned by a party",
        "operationId" : "resource_TradingPartnerResource_getFtpUserBean_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the FTP User account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a FTP User account owned by a party",
        "operationId" : "resource_TradingPartnerResource_removeFtpUser_DELETE",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID of the FTP User account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/{id}" : {
      "get" : {
        "description" : "Returns an agreement of given ID.",
        "operationId" : "resource_AgreementResource_getAgreement_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the agreement. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AgreementBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Deletes the agreement specified by the unique identifier. An agreement that is in use cannot be deleted.",
        "operationId" : "resource_AgreementResource_removeAgreement_DELETE",
        "tags" : [ "AgreementResource" ],
        "parameters" : [ {
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/schedules" : {
      "get" : {
        "description" : "GET list with schedulers for the exchange point with {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSchedules_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a new scheduler for the exchange point with {id}. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addSchedule_POST",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/services/{id}" : {
      "get" : {
        "description" : "Returns a Service of given ID.",
        "operationId" : "resource_DocumentServiceResource_getDocumentService_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the desired Service. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentServiceBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Delete a Service of given ID. To delete an existing service, you must first disassociate it from all agreements\r\nand other usages.",
        "operationId" : "resource_DocumentServiceResource_deleteDocumentService_DELETE",
        "tags" : [ "DocumentServiceResource" ],
        "parameters" : [ {
          "description" : "The ID of the  Service to be deleted. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/{id}/sequenceNumbers" : {
      "get" : {
        "description" : "Returns the list of sequence numbers specific to an agreement. Each of the sequence numbers contains the counter for a\r\nspecific generator.",
        "operationId" : "resource_AgreementResource_getAgreementSequenceNumbers_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the agreement. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "description" : "Updates the counter for a generator on the specified agreement. Depending on the configuration the agreement can\r\nhave zero or multiple sequence numbers that can be set. Example:\r\n<pre>\r\n {\r\n \"value\": 999999,\r\n \"identifier\": \"GS06\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyAgreementSequenceNumber_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the agreement. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Contains the counter in the specific format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SequenceNumberBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/pgp/private/{certificateId}/defaults" : {
      "put" : {
        "description" : "Set given PGP certificate as default on community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_setPGPCertificateDefaults_PUT",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "certificateId",
          "type" : "string"
        }, {
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/as4Users" : {
      "get" : {
        "description" : "Returns the user accounts associated with an AS4 exchange point with given id.",
        "operationId" : "resource_CommunityExchangePointResource_getAs4Users_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Creates a new user account that is attached to the exchange point with given id. You can add either an\r\naccount owned by the community or an account owned by a specific partner, that can be used to automatically\r\nidentify the partner as the sender. Example:\r\n<pre>\r\n {\r\n \"user\": \"userAS4\",\r\n \"password\": \"Axway123\",\r\n \"enabled\": true,\r\n \"policy\": \"Default policy\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addAs4User_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ID of the party owning the user. If empty, user will belong to the community. Optional. Default: empty.",
          "required" : false,
          "in" : "query",
          "name" : "partyId",
          "type" : "string"
        }, {
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_WSUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/{id}/inlinePostProcessors" : {
      "get" : {
        "description" : "GET list with custom logic as an integral part of the post processing pipeline for the exchange point with {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getInlinePostProcessors_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new custom processor as an integral part of the post processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addInlinePostProcessor_POST",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/application/exchange/inlinePostProcessors/{id}" : {
      "delete" : {
        "description" : "DELETE custom post processor with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeInlinePostProcessor_DELETE",
        "tags" : [ "ApplicationExchangePointResource" ],
        "parameters" : [ {
          "description" : "Custom post processor ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/user/contact/primary" : {
      "put" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_setPrimaryContact_PUT",
        "tags" : [ "WebTraderResource" ],
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "to update the primary contact details for the logged in webtrader user",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Set the contact information for the logged in webtrader user.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/communities/exchange/trading/pickup/{deliveryId}/default" : {
      "put" : {
        "description" : "Make the trading pickup with given {exchangePointId} the default pickup used for trading by the community with ID {partyId}",
        "operationId" : "resource_CommunityExchangePointResource_setDefaultExchangePoint_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "The ID of the trading pickup exchange point to be set as default. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "deliveryId",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/configurations/{id}/arguments" : {
      "get" : {
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_getArguments_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/user/password/requirements" : {
      "get" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getWebtraderUserPasswordRequirements_GET",
        "tags" : [ "WebTraderResource" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "description" : "",
              "type" : "string"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/application/exchange/sftpSubDirectory" : {
      "put" : {
        "description" : "Update SFTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"CommunitySFTP\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_modifySftpSubDirectory_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/ftpUser/{id}" : {
      "get" : {
        "description" : "GET information about FTP user with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getFtpUser_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP user ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE FTP user with given {id} from integration",
        "operationId" : "resource_ApplicationExchangePointResource_removeFtpUser_DELETE",
        "tags" : [ "ApplicationExchangePointResource" ],
        "parameters" : [ {
          "description" : "FTP user ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/{id}/sshUser" : {
      "get" : {
        "description" : "GET user information for SFTP protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getSshUser_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol Id.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new user on SFTP protocol with given {id}. This operation decouples the old user from current\r\nprotocol.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"CommunitySFTP\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addSshUser_POST",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "User information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/{id}" : {
      "get" : {
        "description" : "Retrieve personal certificate (public part) with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPrivateCertificate_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Certificate ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_X509CertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/contacts" : {
      "get" : {
        "description" : "Retrieve all contacts of a party",
        "operationId" : "resource_CommunityResource_getContacts_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "A defined filter used to filter results. Available fields: name, email, phone, title. Example: name='Axway Contact'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a contact to a party.\r\nExample:\r\n\r\n<pre>\r\n {\r\n \"primary\": true,\r\n \"name\": \"Contact\",\r\n \"email\": \"contact@axway.com\",\r\n \"phone\": \"123456789\",\r\n \"notes\": \"Notes\",\r\n \"title\": \"Title\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addContact_POST",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ContactBean to be added.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/delivery/{id}" : {
      "get" : {
        "description" : "GET the delivery exchange protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getDeliveryExchangePoint_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ProducerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE operation for a delivery exchange protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeDeliveryExchangePoint_DELETE",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "parameters" : [ {
          "description" : "Delivery exchange protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/attributes/templates/{id}" : {
      "get" : {
        "description" : "Returns a specific attribute that has been added to the agreement attributes template.",
        "operationId" : "resource_AgreementResource_getAttributeField_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AttributeTemplateBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Removes from the agreement attributes template the attribute specified by the unique identifier.",
        "operationId" : "resource_AgreementResource_deleteAttributeTemplate_DELETE",
        "tags" : [ "AgreementResource" ],
        "parameters" : [ {
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/deliverySettings/{id}" : {
      "get" : {
        "description" : "Retrieve an application delivery setting of a community",
        "operationId" : "resource_CommunityResource_getIntegrationDelivery_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the integration delivery setting.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_IntegrationDeliverySettingsBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove an application delivery setting having the ID {id}",
        "operationId" : "resource_CommunityResource_removeIntegrationDelivery_DELETE",
        "tags" : [ "CommunityResource" ],
        "parameters" : [ {
          "description" : "The ID of the integration delivery setting to be removed. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/messagingId" : {
      "put" : {
        "description" : "Update a messaging ID.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"X12MessagingId\",\r\n \"primary\": true,\r\n \"enabled\": true,\r\n \"name\": \"X12 MID\",\r\n \"routingId\": \"ZZ:AXWAY:COM\",\r\n \"interchangeIdQualifier\": \"ZZ\",\r\n \"interchangeId\": \"AXWAY\",\r\n \"applicationId\": \"COM\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_modifyMessagingId_PUT",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MessagingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/pickup/{pickupId}" : {
      "delete" : {
        "description" : "Removes a trading or application exchange from a pickup group.",
        "operationId" : "resource_PickupGroupResource_removeExchangeFromPickupGroup_DELETE",
        "tags" : [ "PickupGroupResource" ],
        "parameters" : [ {
          "description" : "The ID of the exchange to be removed from the group. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "pickupId",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/configurations/{id}/arguments" : {
      "get" : {
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_ComponentResource_getArguments_GET",
        "tags" : [ "ComponentResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreements/outputs" : {
      "put" : {
        "description" : "Updates the configuration for a specific output. Depending on the service type the document agreement can have\r\none or multiple outputs. Example:\r\n<pre>\r\n {\r\n \"@class\": \"DeliverToPartnerOutput\",\r\n \"outputType\": \"USE_OUTBOUND_AGREEMENT\",\r\n \"useEnvelopingProfile\": false,\r\n \"outboundAgreements\": [],\r\n \"id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyDocumentAgreementOutput_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the output in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_DocumentAgreementOutputBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/contacts" : {
      "get" : {
        "description" : "Retrieve all contacts of a party",
        "operationId" : "resource_TradingPartnerResource_getContacts_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "A defined filter used to filter results. Available fields: name, email, phone, title. Example: name='Axway Contact'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a contact to a party.\r\nExample:\r\n\r\n<pre>\r\n {\r\n \"primary\": true,\r\n \"name\": \"Contact\",\r\n \"email\": \"contact@axway.com\",\r\n \"phone\": \"123456789\",\r\n \"notes\": \"Notes\",\r\n \"title\": \"Title\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_addContact_POST",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ContactBean to be added.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/{partyId}/trading/delivery" : {
      "get" : {
        "description" : "GET operation for retrieving all delivery exchange protocols from partner with given {partyId}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getDeliveryExchangePoints_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Partner ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "partyId",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPDelivery'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Create new delivery exchange protocol for partner with {partyId}. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FTPProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS3\",\r\n \"friendlyName\": \"FTP Partner Delivery\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n  \"holdMessagesForPickup\": false,\r\n  \"host\": \"somehost.com\",\r\n  \"port\": 21,\r\n \"pickupDirectory\": \"pickup\",\r\n  \"connectTimeoutSeconds\": 30,\r\n \"readTimeoutSeconds\": 30,\r\n \"passive\": true,\r\n \"transferType\": \"BINARY\",\r\n  \"commandSetConfigPath\": \"ftpcommandset.xml\",\r\n  \"attemptRestarts\": false,\r\n \"restartableMinKiloBytes\": 100,\r\n \"tempFileHoursToLive\": 4,\r\n \"deliveryFilenameMode\": \"PRESERVE_ORIGINAL\",\r\n  \"userDefinedDeliveryFilename\": \"\",\r\n \"duplicateFileNameMode\": \"AUTO_GENERATE\",\r\n  \"userDefinedDuplicateFilename\": \"\",\r\n  \"userCommands\": [],\r\n  \"fixOutputFilenames\": false,\r\n \"fileCollisionMode\": \"USE_TEMP_FILES_WITH_INBOX\",\r\n  \"inboxPath\": \"inbox\",\r\n  \"tempFileExtension\": \".tmp\",\r\n  \"metadataHierarchy\": [],\r\n  \"activePorts\": \"\",\r\n  \"usernamePasswordCredentials\": {\r\n  \"username\": \"axway\",\r\n  \"password\": \"axway\"\r\n  },\r\n  \"deleteAfterDownload\": true,\r\n  \"enableFiltering\": false,\r\n  \"filterPattern\": null,\r\n  \"applyNegativeFiltering\": false,\r\n  \"ssl\": false\r\n  }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addDeliveryExchangePoint_POST",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Partner ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "partyId",
          "type" : "string"
        }, {
          "description" : "Delivery exchange protocol information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/unassignedPickups" : {
      "get" : {
        "description" : "Returns all pickup exchanges (application and trading) that are not assigned to a pickup group.",
        "operationId" : "resource_PickupGroupResource_getAllUnassignedPickupExchanges_GET",
        "tags" : [ "PickupGroupResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The business protocol of the pickup exchange. Optional, available values: AS1, AS2, AS3, AS4, CXML, Email, OFTP_1_3,\r\nOFTP_2_0, PeSIT, PGP, Raw, SecureFile. Default: all.",
          "required" : false,
          "in" : "query",
          "name" : "business",
          "default" : "all",
          "type" : "string"
        }, {
          "description" : "Whether the pickup exchanges should be complete or not. Optional, available values: true, false, all. Default: all.",
          "required" : false,
          "in" : "query",
          "name" : "complete",
          "default" : "all",
          "type" : "string"
        }, {
          "description" : "Whether the pickup exchanges should be enabled or not. Optional, available values: true, false, all. Default: all.",
          "required" : false,
          "in" : "query",
          "name" : "enabled",
          "default" : "all",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "The transport protocol of the pickup exchange. Optional, available values: File system, FTP, FTPS, HTTP, HTTPS,\r\nIntegration, JMS, MLLP, MLLP TLS, MQSeries, MQSeries SSL, OFTP, OFTP TLS, PeSIT, PeSIT TLS, Pluggable, Pluggable server, POP, POP3S, SFTP,\r\nSMTP, SMTPS, WebDAV, X.420, X.435. Default: all.",
          "required" : false,
          "in" : "query",
          "name" : "transport",
          "default" : "all",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/services/outputs/component/{id}" : {
      "get" : {
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getComponent_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/{id}/ftpSubDirectory" : {
      "get" : {
        "description" : "GET subdirectory information for FTP protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getFtpSubDirectoryByExchangePointId_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new subdirectory to FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Partner\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addFtpSubDirectory_POST",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Subdirectory information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/wsUsers" : {
      "get" : {
        "description" : "Returns all the Web Services user accounts belonging to the party with given id.",
        "operationId" : "resource_CommunityResource_getWsUsers_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/ftpUser" : {
      "put" : {
        "description" : "Update a FTP User account owned by a party.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"axway\",\r\n \"password\": \"1234\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [],\r\n \"@id\": \"12345\"\r\n }\r\n\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateFtpUser_PUT",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/sshUser" : {
      "get" : {
        "description" : "Retrieve SFTP User accounts owned by a party",
        "operationId" : "resource_CommunityResource_getSshUsers_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/public/{certificateId}/untrust" : {
      "put" : {
        "description" : "Modify list of trusted certificates on community",
        "operationId" : "resource_CommunitySecurityResource_trustCertificate_PUT",
        "tags" : [ "CommunitySecurityResource" ],
        "parameters" : [ {
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "certificateId",
          "type" : "string"
        }, {
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Usages of this certificate. Optional, available values: transport, trading. Default: transport.",
          "required" : false,
          "in" : "query",
          "name" : "usage",
          "default" : "transport",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/as4Users/attach/{userId}" : {
      "post" : {
        "description" : "Add an existing user account to an AS4 exchange point with a given id.",
        "operationId" : "resource_CommunityExchangePointResource_modifyAs4User_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "userId",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully."
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/agreements/component/configurations/{id}/arguments" : {
      "get" : {
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_AgreementResource_ConfigurationResource_getArguments_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/component/configurations/{id}/arguments" : {
      "get" : {
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getArguments_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/deliverySettings" : {
      "put" : {
        "description" : "Update an application delivery setting.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"IntegrationDeliverySettings\",\r\n \"enabled\": true,\r\n \"applicationDeliveryId\": \"999999\",\r\n \"deliveryCriteria\":\r\n {\r\n \"@class\": \"ConjunctorBean\",\r\n \"conjunctor\": \"AND\",\r\n \"children\":\r\n [\r\n {\r\n \"@class\": \"MetadataCondition\",\r\n \"metadataName\": \"DocumentType\",\r\n \"compareOperator\": \"EQUALS\",\r\n \"metadataValue\": \"ORDERS\"\r\n },\r\n {\r\n \"@class\": \"MetadataCondition\",\r\n \"metadataName\": \"UnpackagedBusinessProtocol\",\r\n \"compareOperator\": \"EQUALS\",\r\n \"metadataValue\": \"AS1\"\r\n }\r\n ]\r\n },\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateIntegrationDelivery_PUT",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing the updates.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_IntegrationDeliverySettingsBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/{id}/configurations" : {
      "get" : {
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_ComponentResource_getConfigurationsForOwner_GET",
        "tags" : [ "ComponentResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/sshUser" : {
      "get" : {
        "description" : "GET user information for SFTP protocol with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSshUserByExchangePoint_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new user on SFTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"userName\": \"CommunitySFTP\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addSshUser_POST",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/certificate/public/export" : {
      "get" : {
        "description" : "Export trusted certificate from embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_exportPublicServerCertificate_GET",
        "tags" : [ "EmbeddedServerResource" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "description" : "Embedded server ID.<b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Certificate format. Optional, available values:\r\n<ul>\r\n<li><i>.cer</i> DER encoded binary X.509</li>\r\n<li><i>.p7b,.p7c</i> Cryptographic Message Syntax Standard PKCS #7</li>\r\n</ul> Default: p7b.",
          "required" : false,
          "in" : "query",
          "name" : "format",
          "default" : "p7b",
          "type" : "string"
        }, {
          "description" : "In case of <i>.p7b, .p7c</i> choose to include the other certificates in the chain. Optional,\r\navailable values: true, false. Default: true.",
          "required" : false,
          "in" : "query",
          "name" : "includeChain",
          "default" : "true",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server" : {
      "get" : {
        "description" : "List containing embedded server settings",
        "operationId" : "resource_EmbeddedServerResource_getServerSettings_GET",
        "tags" : [ "EmbeddedServerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Update a given embedded server. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FTPServerSettings\",\r\n \"name\": \"Trading FTP Server\",\r\n \"readTimeoutSeconds\": 30,\r\n \"bindAddresses\": [],\r\n \"forwardingEnabled\": false,\r\n \"forwardingPorts\": [],\r\n \"securityTerminationEnabled\": false,\r\n \"ipAddressCheckEnabled\": false,\r\n \"ipAddressPartnerMatchEnabled\": false,\r\n \"localPort\": 4022,\r\n \"remoteHost\": \"somehost.com\",\r\n \"remotePort\": 4022,\r\n \"maxConnections\": 500,\r\n \"passivePorts\": \"0\",\r\n \"implicitSsl\": false,\r\n \"onlyPassiveMode\": false,\r\n \"overrideCipherSuites\": false,\r\n \"cipherSuites\": [],\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_EmbeddedServerResource_updateServerSettings_PUT",
        "tags" : [ "EmbeddedServerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Embedded server settings.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ServerSettingsBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ServerSettingsBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/subscriptions" : {
      "get" : {
        "description" : "Retrieve all the communities where this partner is subscribed",
        "operationId" : "resource_TradingPartnerResource_getSubscribedCommunities_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the partner.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Subscribe the partner to a community",
        "operationId" : "resource_TradingPartnerResource_subscribe_POST",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID of the partner to be subscribed. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ID of the community to which the partner will be subscribed. <b>Required</b>.",
          "required" : false,
          "in" : "query",
          "name" : "communityId",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully."
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Unsubscribe a partner from a community",
        "operationId" : "resource_TradingPartnerResource_unsubscribe_DELETE",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID of the partner to be unsubscribed. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ID of the community from which will be unsubscribed. <b>Required</b>.",
          "required" : false,
          "in" : "query",
          "name" : "communityId",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/{id}" : {
      "get" : {
        "description" : "Retrieve a public certificate from a trading partner",
        "operationId" : "resource_TradingPartnersSecurityResource_getPublicCertificate_GET",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the public certificate. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_X509CertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate" : {
      "get" : {
        "description" : "Retrieve all public certificates of the trading partner",
        "operationId" : "resource_TradingPartnersSecurityResource_getPublicCertificates_GET",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the partner.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/sshUser" : {
      "put" : {
        "description" : "Update a SFTP User account owned by a party.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"axway\",\r\n \"password\": \"123\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ],\r\n \"@id\": \"12345\"\r\n }\r\n\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateSshUser_PUT",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/configurations/arguments" : {
      "put" : {
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ComponentResource_updateArgument_PUT",
        "tags" : [ "ComponentResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/ftpUser" : {
      "get" : {
        "description" : "GET user information for FTP protocol with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getFtpUsersByExchangePointId_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new user on FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"userName\": \"Community\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addFtpUser_POST",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/pickup" : {
      "get" : {
        "description" : "GET operation for retrieving all application pickups",
        "operationId" : "resource_ApplicationExchangePointResource_gePickupExchangePoints_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPPickup'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Update an application pickup. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FileSystemConsumer\",\r\n \"enabled\": true,\r\n \"friendlyName\": \"FS pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 10,\r\n \"metadataFixedItems\": {},\r\n \"restrictConsumableFileSize\": false,\r\n \"maxConsumableFileSize\": 0,\r\n \"metatadaTemplate\": {\r\n \"defaultMetadataTemplate\": \"\",\r\n \"enabledByProtocol\": false,\r\n \"metadataTemplatePolicy\": \"NEVER\",\r\n \"priorityOverFixedAttributes\": false\r\n },\r\n \"useCommunityMessageDelivery\": false,\r\n \"useContentProcessing\": false,\r\n \"ediSplitterEnabled\": false,\r\n \"usePreferredNodes\": false,\r\n \"preferredNodes\": [],\r\n \"pollingIntervalSeconds\": 60,\r\n \"maxMessagesPerPollingInterval\": 100,\r\n \"directory\": \"C:/InterchangeShare/common/data/out\",\r\n \"filterOption\": false,\r\n \"negativeFilterOption\": false,\r\n \"filterConditions\": null,\r\n \"metadataHierarchy\": []\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updatePickupExchangePoint_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Application pickup information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConsumerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a new application pickup. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FileSystemConsumer\",\r\n \"enabled\": true,\r\n \"friendlyName\": \"FS pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 10,\r\n \"metadataFixedItems\": {},\r\n \"restrictConsumableFileSize\": false,\r\n \"maxConsumableFileSize\": 0,\r\n \"metatadaTemplate\": {\r\n \"defaultMetadataTemplate\": \"\",\r\n \"enabledByProtocol\": false,\r\n \"metadataTemplatePolicy\": \"NEVER\",\r\n \"priorityOverFixedAttributes\": false\r\n },\r\n \"useCommunityMessageDelivery\": false,\r\n \"useContentProcessing\": false,\r\n \"ediSplitterEnabled\": false,\r\n \"usePreferredNodes\": false,\r\n \"preferredNodes\": [],\r\n \"pollingIntervalSeconds\": 60,\r\n \"maxMessagesPerPollingInterval\": 100,\r\n \"directory\": \"C:/InterchangeShare/common/data/out\",\r\n \"filterOption\": false,\r\n \"negativeFilterOption\": false,\r\n \"filterConditions\": null,\r\n \"metadataHierarchy\": []\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addPickupExchangePoint_POST",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Application pickup information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConsumerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/embedded/server/{id}" : {
      "get" : {
        "description" : "GET embedded server settings with given {id}",
        "operationId" : "resource_EmbeddedServerResource_getServerSetting_GET",
        "tags" : [ "EmbeddedServerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Server settings ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ServerSettingsBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/wsUsers" : {
      "put" : {
        "description" : "Updates an user account that can be used either with an AS4 or an WebServices exchange point.\r\nExample:\r\n<pre>\r\n {\r\n \"user\": \"axway\",\r\n \"password\": \"123\",\r\n \"enabled\": true,\r\n \"policy\": \"Default policy\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateWsUser_PUT",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_WSUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/ftpUser" : {
      "get" : {
        "description" : "Retrieve FTP User accounts owned by a party",
        "operationId" : "resource_CommunityResource_getFtpUsers_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/ftpSubDirectory" : {
      "get" : {
        "description" : "GET subdirectories information for FTP protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getFtpSubDirectories_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new subdirectory to FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Community\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addFtpSubDirectory_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/messages/attributes/{id}" : {
      "get" : {
        "description" : "Returns an Attribute specified by a unique identifier.",
        "operationId" : "resource_MessagesResource_getMessageAttribute_GET",
        "tags" : [ "MessagesResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The Id of the Attribute. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessageAttributeBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}" : {
      "get" : {
        "description" : "Retrieve a party having the ID {id}",
        "operationId" : "resource_TradingPartnerResource_getParty_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_TradingPartnerBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a party having the ID {id}",
        "operationId" : "resource_TradingPartnerResource_deleteParty_DELETE",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/schedules/{id}" : {
      "delete" : {
        "description" : "DELETE scheduler with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_removeSchedule_DELETE",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "Scheduler ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/certificate/private/export" : {
      "get" : {
        "description" : "Export private certificate from embedded server with given {id}.\r\nCertificate will be exported in Personal Information Exchange PKCS #12 (.p12,.pfx) format",
        "operationId" : "resource_EmbeddedServerResource_exportPrivateServerCertificate_GET",
        "tags" : [ "EmbeddedServerResource" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "description" : "Embedded server ID.<b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Password for the store and certificate. Optional. Default: empty string.",
          "required" : false,
          "in" : "query",
          "name" : "password",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/pgp/public" : {
      "get" : {
        "description" : "Retrieve all public PGP certificates used by partner with given {id}",
        "operationId" : "resource_TradingPartnersSecurityResource_getPublicPGPCertificates_GET",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Partner ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/key/dsa" : {
      "get" : {
        "description" : "GET DSA key from embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_getPublicDSAKey_GET",
        "tags" : [ "EmbeddedServerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Embedded server ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "description" : "",
              "type" : "string"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/schedules" : {
      "put" : {
        "description" : "Update a given scheduler. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_updateSchedule_PUT",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/functionalGroups" : {
      "put" : {
        "description" : "Updates the configuration of a specific functional group. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12InboundFunctionalGroup\",\r\n \"name\": \"Default\",\r\n \"functionalGroupId\": \"\",\r\n \"senderMessagingId\": \"12311\",\r\n \"receiverMessagingId\": \"12322\",\r\n \"responsibleAgencyCode\": null,\r\n \"identifierCode\": \"\",\r\n \"useFunctionalGroupId\": false,\r\n \"useSenderMessagingId\": true,\r\n \"useReceiverMessagingId\": true,\r\n \"useResponsibleAgencyCode\": false,\r\n \"useIdentifierCode\": false\"@id\": \"83001\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyFunctionalGroup_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the functional group in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FunctionalGroupBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FunctionalGroupBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/pgp/private/generate" : {
      "post" : {
        "description" : "Generate a personal PGP certificate for community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_generatePrivatePGPCertificate_POST",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Certificate name/alias inside the system. Optional. Default: community name.",
          "required" : false,
          "in" : "query",
          "name" : "friendlyName",
          "type" : "string"
        }, {
          "description" : "Strength of the key. Optional, available values: 512, 1024, 2048, 3072, 4096. Default: 2048",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "keyLength",
          "default" : 2048,
          "type" : "integer"
        }, {
          "description" : "Algorithm used for signing and encrypting. Optional, available values: RSA, DSA. Default: RSA",
          "required" : false,
          "in" : "query",
          "name" : "keyType",
          "default" : "RSA",
          "type" : "string"
        }, {
          "description" : "Unit of time. Optional, available values: Years, Months, Days. Default: Years.",
          "required" : false,
          "in" : "query",
          "name" : "validPeriod",
          "default" : "Years",
          "type" : "string"
        }, {
          "description" : "Number of units given in <i>validPeriod</i> field. Optional, min = 1. Default: 2.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "validTime",
          "default" : 2,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/certificate/pgp/public/{id}/export" : {
      "get" : {
        "description" : "Export public PGP certificate with specified {pgpCertificateId}.\r\nCertificate will be exported in .asc or .gpg format.",
        "operationId" : "resource_CommunitySecurityResource_exportPublicPGPCertificate_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "description" : "Private certificate ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Tells us whether you want this certificate to be armoured or not. Optional. Default: false.",
          "required" : false,
          "in" : "query",
          "name" : "isArmored",
          "default" : "false",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services" : {
      "get" : {
        "description" : "Returns a collection of Service objects that exist in the system. A Service is used to specify the processing\r\nsequence for handling the message exchanged between endpoints. There are two types of services: Partner Services\r\nwhich are used in the context of Agreements, and Metadata Services which are used in the context of Metadata\r\nProfiles.",
        "operationId" : "resource_DocumentServiceResource_getDocumentServices_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Filter by document format. Optional, available values: EDIFACT, HL7v2, IDOC, INHOUSE, NACHA,\r\nTRADACOMS, VDA, X12, XML. Parameter has no default value.",
          "required" : false,
          "in" : "query",
          "name" : "documentFormat",
          "type" : "string"
        }, {
          "description" : "Filter by document type. Optional, available values: existing document types based on version. Parameter has no default value.",
          "required" : false,
          "in" : "query",
          "name" : "documentType",
          "type" : "string"
        }, {
          "description" : "Filter by document version. Optional, available values: existing document version based on format. Parameter has no default value.",
          "required" : false,
          "in" : "query",
          "name" : "documentVersion",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Optional, available fields: name. Example: name='Service'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Update the specified Service object. Example:\r\n<pre>\r\n {\r\n \"@class\": \"PartnerDocumentService\",\r\n \"name\": \"X12 Partner Service\",\r\n \"enabled\": true,\r\n \"componentId\": \"12311\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_updateDocumentService_PUT",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing the definition of the Service. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_DocumentServiceBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a new Service in the system. Example:\r\n<pre>\r\n {\r\n \"@class\": \"PartnerDocumentService\",\r\n \"name\": \"X12 Partner Service\",\r\n \"deliveryMethod\": \"DELIVER_TO_PARTNER\",\r\n \"enabled\": true,\r\n \"componentId\": \"123456\",\r\n \"documentFormat\": \"X12\",\r\n \"documentVersion\": \"002000\",\r\n \"documentType\": \"810\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_addDocumentService_POST",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing the definition of the Service. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_DocumentServiceBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/agreements/documentAgreements" : {
      "get" : {
        "description" : "Returns a collection of document agreement objects that are available.",
        "operationId" : "resource_AgreementResource_getDocumentAgreements_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A defined filter used for filtering the results. Available values: name, type, version. Example: name='X12Document'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name, type, version. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Updates the configuration of a specific document agreement. Any updates on document type, version and name will be\r\nignored, since they cannot be modified once the document agreement has been created. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12DocumentAgreement\",\r\n \"enabled\": true,\r\n \"documentFormat\": \"X12\",\r\n \"documentName\": \"002000 810\",\r\n \"type\": \"810\",\r\n \"version\": \"002000\",\r\n \"documentServiceId\": \"12311\".\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyDocumentAgreement_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the document agreement in the requested format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_DocumentAgreementBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/emailUsers/{userId}" : {
      "delete" : {
        "description" : "Removes an user account form an SMTP exchange point with given id.",
        "operationId" : "resource_CommunityExchangePointResource_detachEmailUser_DELETE",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "userId",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/user/contact/alternate" : {
      "put" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_setAlternateContact_PUT",
        "tags" : [ "WebTraderResource" ],
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "to update the alternate contact details for the logged in webtrader user",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Set the alternate contact information for the logged in webtrader user.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/communities/exchange/trading/sftpSubDirectory/{id}" : {
      "get" : {
        "description" : "GET subdirectory information that has given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getSftpSubDirectory_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE subdirectory with given {id} from SFTP protocol",
        "operationId" : "resource_CommunityExchangePointResource_removeSftpSubDirectory_DELETE",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "SFTP subdirectory ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/public" : {
      "get" : {
        "description" : "Retrieve all trusted certificates used by community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getPublicCertificates_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Optional, available values:\r\n<ul>\r\n<li><i>transport</i> retrieves trusted certificates used at the transport level</li>\r\n<li><i>trading</i> retrieves trusted certificates used at the trading level</li>\r\n</ul> Default: transport.",
          "required" : false,
          "in" : "query",
          "name" : "usage",
          "default" : "transport",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{id}/schedules" : {
      "get" : {
        "description" : "GET list with schedulers for the exchange point with {id}",
        "operationId" : "resource_CommunityExchangePointResource_getSchedules_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a new scheduler for the exchange point with {id}. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addSchedule_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/{id}/sftpSubDirectory" : {
      "get" : {
        "description" : "GET subdirectory information for SFTP protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getSftpSubDirectoryByExchangePoint_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new subdirectory to SFTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"PartnerSFTP\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addSftpSubDirectory_POST",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Subdirectory information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/trading" : {
      "get" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getOwnerInfo_GET",
        "tags" : [ "WebTraderResource" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyTradingInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/security/certificate/pgp/{id}" : {
      "get" : {
        "description" : "Retrieve public PGP certificate with given {id}",
        "operationId" : "resource_TradingPartnersSecurityResource_getPublicPGPCertificate_GET",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Certificate ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PGPCertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/{id}/configurations" : {
      "get" : {
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/delivery" : {
      "put" : {
        "description" : "Update a delivery exchange protocol.  Example:\r\n<pre>\r\n {\r\n \"@class\": \"FTPProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS3\",\r\n \"friendlyName\": \"FTP Partner Delivery\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n  \"holdMessagesForPickup\": false,\r\n  \"host\": \"somehost.com\",\r\n  \"port\": 21,\r\n \"pickupDirectory\": \"pickup\",\r\n  \"connectTimeoutSeconds\": 30,\r\n \"readTimeoutSeconds\": 30,\r\n \"passive\": true,\r\n \"transferType\": \"BINARY\",\r\n  \"commandSetConfigPath\": \"ftpcommandset.xml\",\r\n  \"attemptRestarts\": false,\r\n \"restartableMinKiloBytes\": 100,\r\n \"tempFileHoursToLive\": 4,\r\n \"deliveryFilenameMode\": \"PRESERVE_ORIGINAL\",\r\n  \"userDefinedDeliveryFilename\": \"\",\r\n \"duplicateFileNameMode\": \"AUTO_GENERATE\",\r\n  \"userDefinedDuplicateFilename\": \"\",\r\n  \"userCommands\": [],\r\n  \"fixOutputFilenames\": false,\r\n \"fileCollisionMode\": \"USE_TEMP_FILES_WITH_INBOX\",\r\n  \"inboxPath\": \"inbox\",\r\n  \"tempFileExtension\": \".tmp\",\r\n  \"metadataHierarchy\": [],\r\n  \"activePorts\": \"\",\r\n  \"usernamePasswordCredentials\": {\r\n  \"username\": \"axway\",\r\n  \"password\": \"axway\"\r\n  },\r\n  \"deleteAfterDownload\": true,\r\n  \"enableFiltering\": false,\r\n  \"filterPattern\": null,\r\n  \"applyNegativeFiltering\": false,\r\n  \"ssl\": false,\r\n  \"@id\": \"123456\"\r\n  }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_updateDeliveryExchangePoint_PUT",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Delivery exchange protocol update information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/messagingId" : {
      "get" : {
        "description" : "Retrieve all the messaging IDs of the party.",
        "operationId" : "resource_TradingPartnerResource_getMessagingIds_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "A filter used to filter the results. Optional, available fields: enabled, name. Example: name='X12MID'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        }, {
          "description" : "Filter by standard. Optional, available values: EDIFACT, HL7v2, IDOC, INHOUSE, NACHA,\r\nTRADACOMS, VDA, X12, XML. Default value is empty string.",
          "required" : false,
          "in" : "query",
          "name" : "standard",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a new messaging id to a party.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"X12MessagingId\",\r\n \"primary\": true,\r\n \"enabled\": true,\r\n \"name\": \"X12 MID\",\r\n \"routingId\": \"ZZ:AXWAY:COM\",\r\n \"interchangeIdQualifier\": \"ZZ\",\r\n \"interchangeId\": \"AXWAY\",\r\n \"applicationId\": \"COM\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\"\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_addMessagingId_POST",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The MessagingIdBean bean to be added.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MessagingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/assignedGroup/{pickupId}" : {
      "get" : {
        "description" : "Returns the pickup group  that contains the pickup exchange with the given ID.",
        "operationId" : "resource_PickupGroupResource_getAssignedPickupGroup_GET",
        "tags" : [ "PickupGroupResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the pickup exchange. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "pickupId",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PickupGroupBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/global/external/smtp/server" : {
      "get" : {
        "description" : "Retrieve the global external SMTP/SMTPS server settings.",
        "operationId" : "resource_GlobalExternalSmtpServerResource_getServerDefinition_GET",
        "tags" : [ "GlobalExternalSmtpServerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "",
          "required" : false,
          "in" : "query",
          "name" : "ssl",
          "default" : "false",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SmtpServerDefinitionBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "description" : "Update the global external SMTP server settings. Example:\r\n<pre>\r\n {\r\n \"host\": \"somehost.com\",\r\n \"port\": \"5025\",\r\n \"friendlyName\": \"Global External SMTP\",\r\n \"usernamePasswordCredentials\": {\r\n \"username\": \"username\",\r\n \"password\": \"axway\"\r\n },\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_GlobalExternalSmtpServerResource_updateServerDefinition_PUT",
        "tags" : [ "GlobalExternalSmtpServerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The global external SMTP server settings in the requested format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SmtpServerDefinitionBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Configure the global external SMTP server settings. Example:\r\n<pre>\r\n {\r\n \"host\": \"somehost.com\",\r\n \"port\": \"5025\",\r\n \"friendlyName\": \"Global External SMTP\",\r\n \"usernamePasswordCredentials\": {\r\n \"username\": \"username\",\r\n \"password\": \"axway\"\r\n }\r\n }\r\n </pre>",
        "operationId" : "resource_GlobalExternalSmtpServerResource_addServerDefinition_POST",
        "tags" : [ "GlobalExternalSmtpServerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The global external SMTP server settings in the requested format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SmtpServerDefinitionBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/services/component/configurations/{id}/arguments" : {
      "get" : {
        "description" : "The configuration parameters are grouped into different categories. To configure these parameters, you must\r\naccess the list of arguments specific to a category. You can specify the input format or the output formats of\r\nthe document, and provide values for specific parameters that are used to describe the characteristics of\r\nthe component object. The identifier is returned within the configuration bean.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getArguments_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID used to specify the list of arguments.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/inlinePostProcessors" : {
      "put" : {
        "description" : "Update a given custom post processor. Example:\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updatePostInlineProcessor_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Custom post processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/{id}/pickups" : {
      "get" : {
        "description" : "Returns the pickup exchanges assigned to the given group.",
        "operationId" : "resource_PickupGroupResource_getAssignedExchangesForPickupGroup_GET",
        "tags" : [ "PickupGroupResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the desired pickup group. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The business protocol of the pickup exchange. Optional, available values: AS1, AS2, AS3, AS4, CXML, Email,\r\nOFTP_1_3, OFTP_2_0, PeSIT, PGP, Raw, SecureFile. Default: all.",
          "required" : false,
          "in" : "query",
          "name" : "business",
          "default" : "all",
          "type" : "string"
        }, {
          "description" : "Whether the pickup exchanges should be complete or not. Optional, available values: true, false, all. Default: all.",
          "required" : false,
          "in" : "query",
          "name" : "complete",
          "default" : "all",
          "type" : "string"
        }, {
          "description" : "Whether the pickup exchanges should be enabled or not. Optional, available values: true, false, all. Default: all.",
          "required" : false,
          "in" : "query",
          "name" : "enabled",
          "default" : "all",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "The transport protocol of the pickup exchange. Optional, available values: File system, FTP, FTPS, HTTP, HTTPS,\r\nIntegration, JMS, MLLP, MLLP TLS, MQSeries, MQSeries SSL, OFTP, OFTP TLS, PeSIT, PeSIT TLS, Pluggable,\r\nPluggable server, POP, POP3S, SFTP, SMTP, SMTPS, WebDAV, X.420, X.435. Default: all.",
          "required" : false,
          "in" : "query",
          "name" : "transport",
          "default" : "all",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/ftpSubDirectory" : {
      "put" : {
        "description" : "Update FTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Community\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_modifyFtpSubDirectory_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/sshUser/{id}" : {
      "get" : {
        "description" : "Retrieve a SFTP User account owned by a party",
        "operationId" : "resource_CommunityResource_getSshUser_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the SFTP User account.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a SFTP User account owned by a party",
        "operationId" : "resource_CommunityResource_removeSshUser_DELETE",
        "tags" : [ "CommunityResource" ],
        "parameters" : [ {
          "description" : "The ID of the SFTP User account.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile/{id}/outputs" : {
      "get" : {
        "description" : "Returns the list of outputs specific to a metadata profile. An output contains configuration parameters that\r\nspecify how the metadata profile and the corresponding metadata service will be used or enveloped.",
        "operationId" : "resource_MetadataProfileResource_getMetadataProfileOutputs_GET",
        "tags" : [ "MetadataProfileResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the metadataProfile for which the outputs are retrieved.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/emailUsers" : {
      "get" : {
        "description" : "Returns the user accounts associated with an email exchange point with given id.",
        "operationId" : "resource_CommunityExchangePointResource_getEmailUsers_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.\r\n* @return Returns the user in the expected format.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Creates a new email user account that is attached to the exchange point with given id. You can add an account\r\nowned by a specific partner, that can be used to automatically identify the partner as the sender. Example:\r\n<pre>\r\n {\r\n \"emailAddress\": \"*@host.com\",\r\n \"enabled\": true\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addEmailUser_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ID of the partner for which this user account is created. <b>Required.</b>",
          "required" : false,
          "in" : "query",
          "name" : "partyId",
          "type" : "string"
        }, {
          "description" : "Contains the user account in the requested format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_EmailUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/postDetectionComponent/configurations/{id}" : {
      "get" : {
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfiguration_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/attributes/templates" : {
      "get" : {
        "description" : "Returns the list of attributes assigned to the Service Attributes Template. An attribute can be used to provide\r\nadditional runtime processing context.",
        "operationId" : "resource_DocumentServiceResource_getAttributesTemplate_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Update a template field defined in the Service Attribute Template. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"required\": false,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_updateAttributeTemplate_PUT",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing the attribute updates.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "post" : {
        "description" : "Add a new attribute field to the Service Attributes Template. For a single-selection or a multi-selection\r\ntemplate field, you can define a list of possible values. Make the attribute required if it is to be included\r\non all exchanges. You must then provide a value for processing for every Service record. If the Service attribute\r\ndoes not contain a particular mandatory value, the Service becomes incomplete. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"required\": false\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_addAttributeTemplate_POST",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The attribute field to be added to the template.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/webtrader/trading/partners/{routingId}" : {
      "get" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getTraderInfo_GET",
        "tags" : [ "WebTraderResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "for which to get trading information details. The routing id value has to be in base64 format",
          "required" : true,
          "in" : "path",
          "name" : "routingId",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PartyTradingInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/tradingPartners/exchange/schedules/{id}" : {
      "delete" : {
        "description" : "DELETE scheduler with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeSchedule_DELETE",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "parameters" : [ {
          "description" : "Scheduler ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/messages" : {
      "get" : {
        "description" : "Returns a collection of the available Messages.",
        "operationId" : "resource_MessagesResource_getMessages_GET",
        "tags" : [ "MessagesResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A defined filter used for filtering the results. Available values: _id, coreId. Example: coreId='ci1476869359858.940@host_te'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: _id, coreId. Default: coreId.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "coreId",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "400" : {
            "description" : "The request could not be understood by the server due to malformed syntax. Validation errors; see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Update the specified Message.\r\nExample:\r\n<pre>\r\n {\r\n \"senderPartyID\": \"45678\",\r\n \"receiverPartyID\": \"56789\",\r\n \"senderRoutingID\": \"23456\",\r\n \"receiverRoutingID\": \"34567\",\r\n \"documentClass\": \"XML\",\r\n \"contentMimeType\": \"application/xml\",\r\n \"ediControlID\": null,\r\n \"consumptionFilename\": \"edi3xml.xml\",\r\n \"productionFilename\": \"edi3xml-prod.xml\",\r\n \"direction\": \"Outbound\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_MessagesResource_updateMessage_PUT",
        "tags" : [ "MessagesResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing the definition of the Message. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MessageBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/attributes/templates/{id}" : {
      "get" : {
        "description" : "Returns a specific attribute assigned to the Service Attributes Template.",
        "operationId" : "resource_DocumentServiceResource_getAttributeField_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the attribute assigned to the template.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AttributeTemplateBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove an attribute from the Service Attributes Template.",
        "operationId" : "resource_DocumentServiceResource_deleteAttributeTemplate_DELETE",
        "tags" : [ "DocumentServiceResource" ],
        "parameters" : [ {
          "description" : "The ID of the attribute.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/certificate" : {
      "get" : {
        "description" : "Retrieve personal certificate (public part) for embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_getPrivateServerCertificate_GET",
        "tags" : [ "EmbeddedServerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Embedded server ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_X509CertificateInfoBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE certificate from embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_deletePrivateServerCertificate_DELETE",
        "tags" : [ "EmbeddedServerResource" ],
        "parameters" : [ {
          "description" : "Embedded server ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/{id}/attributes" : {
      "get" : {
        "description" : "Returns the list with attributes and their values for an agreement with given ID. Attributes are metadata used\r\nby the integration engine and are structured in pairs. An attribute comprises a name and either an associated\r\nvalue or a list of values.",
        "operationId" : "resource_AgreementResource_getAgreementAttributes_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "description" : "Updates the values of an attribute that is associated to a specific agreement. To set a value, the attribute must\r\nbe defined in the agreement attributes template. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"clearedAtRuntime\": true,\r\n \"values\": []\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyAgreementAttribute_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Contains the attribute in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AttributeValueBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/users/security/certificate/private" : {
      "get" : {
        "description" : "Retrieve a collection of personal certificates (public parts) from the currently authenticated user's certificate store",
        "operationId" : "resource_UserSecurityResource_getAllCertificates_GET",
        "tags" : [ "UserSecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The maximum number of rows to return, starting from the offset.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first n rows.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          }
        }
      }
    },
    "/services/postDetectionComponent/{id}/configurations" : {
      "get" : {
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/ftpUser" : {
      "get" : {
        "description" : "Retrieve FTP User accounts owned by a party",
        "operationId" : "resource_TradingPartnerResource_getFtpUsers_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/{certificateId}/defaults" : {
      "put" : {
        "description" : "Make a certificate default for encryption",
        "operationId" : "resource_TradingPartnersSecurityResource_setCertificateDefaults_PUT",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The certificate ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "certificateId",
          "type" : "string"
        }, {
          "description" : "The partner ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "If this should be default encryption certificate. Optional, available values: true, false, null. Default: null.",
          "required" : false,
          "in" : "query",
          "name" : "defaultEncryption",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/pgp/{certificateId}" : {
      "delete" : {
        "description" : "Remove the PGP certificate with {certificateId} from partner with {id}",
        "operationId" : "resource_TradingPartnersSecurityResource_deletePGPPublicCertificate_DELETE",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "parameters" : [ {
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "certificateId",
          "type" : "string"
        }, {
          "description" : "Partner ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/component/configurations/arguments" : {
      "put" : {
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_updateArgument_PUT",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/{id}/sftpSubDirectory" : {
      "get" : {
        "description" : "GET subdirectory information for SFTP protocol with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSftpSubDirectoryByExchangePoint_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new subdirectory to SFTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"CommunitySFTP\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addSftpSubDirectory_POST",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SFTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/sshUser/{id}" : {
      "get" : {
        "description" : "GET SSH user information with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getSshUser_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SSH user ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SshUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE SSH user with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeSshUser_DELETE",
        "tags" : [ "ApplicationExchangePointResource" ],
        "parameters" : [ {
          "description" : "SSH user ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/security/{id}/certificate/pgp/public/{certificateId}/defaults" : {
      "put" : {
        "description" : "Set given PGP certificate as default on partner with given {id}",
        "operationId" : "resource_TradingPartnersSecurityResource_setPGPCertificateDefault_PUT",
        "tags" : [ "TradingPartnersSecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "certificateId",
          "type" : "string"
        }, {
          "description" : "Partner ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/routingIds/{id}" : {
      "get" : {
        "description" : "Retrieve a routing ID of the party",
        "operationId" : "resource_TradingPartnerResource_getRoutingId_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the routing ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_RoutingIdBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a routing ID from a party",
        "operationId" : "resource_TradingPartnerResource_removeRoutingId_DELETE",
        "tags" : [ "TradingPartnerResource" ],
        "parameters" : [ {
          "description" : "The ID of the routing ID to be removed. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/schedules" : {
      "put" : {
        "description" : "Update a given scheduler. Example:\r\n<pre>\r\n {\r\n \"dayOfWeek\": 1,\r\n \"startHour\": 0,\r\n \"startMinute\": 0,\r\n \"endMinute\": 59,\r\n \"endHour\": 23,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_updateSchedule_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Scheduler information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ExchangePointScheduleBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/webtrader/trading/partners" : {
      "get" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_getTradingPartner_GET",
        "tags" : [ "WebTraderResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "max partner trading info to return in the response",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "from which to return the results from",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "to filter the results by. It supports wildcard searches",
          "required" : false,
          "in" : "query",
          "name" : "partyName",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/components/{id}" : {
      "get" : {
        "description" : "Retrieves the details of a component with given id.",
        "operationId" : "resource_ComponentResource_getComponent_GET",
        "tags" : [ "ComponentResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the component. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Deletes a component with given ID.  A component that is in use cannot be deleted. For this operation to be\r\nsuccessful you need to remove all usages.",
        "operationId" : "resource_ComponentResource_delete_DELETE",
        "tags" : [ "ComponentResource" ],
        "parameters" : [ {
          "description" : "The ID of the component. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}" : {
      "get" : {
        "description" : "Retrieve a party having the ID {id}",
        "operationId" : "resource_CommunityResource_getParty_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CommunityBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Remove a party having the ID {id}",
        "operationId" : "resource_CommunityResource_deleteParty_DELETE",
        "tags" : [ "CommunityResource" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/routingIds/{id}/default" : {
      "put" : {
        "description" : "Set the default Routing ID on a party.\r\nExample:\r\n<pre>\r\n {\r\n \"type\": \"XXT\",\r\n \"routingId\": \"ZZAXWAY\",\r\n \"@id\": \"12345\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_setDefaultRoutingId_PUT",
        "tags" : [ "CommunityResource" ],
        "parameters" : [ {
          "description" : "The ID Routing ID to be set as default on a party. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully."
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/{id}" : {
      "get" : {
        "description" : "Returns a Service output of given ID. A Service can have multiple outputs and each output has its own configuration.",
        "operationId" : "resource_DocumentServiceResource_getDocumentServiceOutput_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of Service output.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentServiceOutputBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/sshkeys" : {
      "get" : {
        "description" : "Retrieve a list of all SSH keys (public information) used by community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_getSshPublicKeys_GET",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/private/generate" : {
      "post" : {
        "description" : "Generate a personal certificate for community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_generatePrivateCertificate_POST",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Use the certificate as default for encryption by the community with given {id}. Optional, available values: true, false. Default: true.",
          "required" : false,
          "in" : "query",
          "name" : "defaultEncryption",
          "default" : "true",
          "type" : "boolean"
        }, {
          "description" : "Use the certificate as default for signing by the community with given {id}. Optional, available values: true, false. Default: true.",
          "required" : false,
          "in" : "query",
          "name" : "defaultSigning",
          "default" : "true",
          "type" : "boolean"
        }, {
          "description" : "Use the certificate as default for ssl authentication by the community with given {id}. Optional, available values: true, false. Default: false.",
          "required" : false,
          "in" : "query",
          "name" : "defaultSsl",
          "default" : "false",
          "type" : "boolean"
        }, {
          "description" : "Generated certificate can be used for digitalSignature. Optional, available values: true, false. Default: true.",
          "required" : false,
          "in" : "query",
          "name" : "digitalSignature",
          "default" : "true",
          "type" : "boolean"
        }, {
          "description" : "If true, generate two certificates one for signature and one for encryption. Optional, available values: true, false. Default: false.",
          "required" : false,
          "in" : "query",
          "name" : "dualKey",
          "default" : "false",
          "type" : "boolean"
        }, {
          "description" : "Certificate name/alias inside the system. Optional. Default: community name.",
          "required" : false,
          "in" : "query",
          "name" : "friendlyName",
          "type" : "string"
        }, {
          "description" : "Generated certificate can be used for keyEncryption. Optional, available values: true, false. Default: true.",
          "required" : false,
          "in" : "query",
          "name" : "keyEncryption",
          "default" : "true",
          "type" : "boolean"
        }, {
          "description" : "Strength of the key. Optional, available values: 512, 1024, 2048, 3072, 4096. Default: 2048",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "keyLength",
          "default" : 2048,
          "type" : "integer"
        }, {
          "description" : "Generated certificate can be used for nonRepudiation. Optional, available values: true, false. Default: true.",
          "required" : false,
          "in" : "query",
          "name" : "nonRepudiation",
          "default" : "true",
          "type" : "boolean"
        }, {
          "description" : "True to use this certificate also by partners. Optional, available values: true, false. Default: true.",
          "required" : false,
          "in" : "query",
          "name" : "sendToPartners",
          "default" : "true",
          "type" : "boolean"
        }, {
          "description" : "Unit of time. Optional, available values: Years, Months, Days. Default: Years.",
          "required" : false,
          "in" : "query",
          "name" : "validPeriod",
          "default" : "Years",
          "type" : "string"
        }, {
          "description" : "Number of units given in <i>validPeriod</i> field. Optional, min = 1. Default: 2.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "validTime",
          "default" : 2,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/as4Users/{userId}" : {
      "delete" : {
        "description" : "Removes an user account form an AS4 exchange point with given id.",
        "operationId" : "resource_CommunityExchangePointResource_removeAS4User_DELETE",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "userId",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/pickup/{id}" : {
      "get" : {
        "description" : "GET application pickup with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getPickupExchangePoint_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Application pickup ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE application pickup with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removePickupExchangePoint_DELETE",
        "tags" : [ "ApplicationExchangePointResource" ],
        "parameters" : [ {
          "description" : "Application pickup ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/pickup/{id}" : {
      "get" : {
        "description" : "GET The pickup protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getPickupExchangePoint_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Protocol ID.<b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE Pickup protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_removePickupExchangePoint_DELETE",
        "tags" : [ "CommunityExchangePointResource" ],
        "parameters" : [ {
          "description" : "Pickup protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/inlineProcessors" : {
      "put" : {
        "description" : "Update a given custom processor. Example:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updateInlineProcessor_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/delivery" : {
      "put" : {
        "description" : "Update a delivery protocol. Example:\r\n<pre>\r\n {\r\n \"@class\": \"SMTPProducer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS1\",\r\n \"friendlyName\": \"POP-SMTP Trading Pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"retries\": 3,\r\n \"holdMessagesForPickup\": false,\r\n \"port\": 25,\r\n \"emailAddress\": \"axwyay@axway.com\",\r\n \"connectTimeoutSeconds\": 30,\r\n \"readTimeoutSeconds\": 30,\r\n \"useGlobalSmtp\": false,\r\n  \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_updateTradingDeliveryExchangePoint_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Delivery update information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ProducerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ProducerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/sshkeys/{id}/defaults" : {
      "put" : {
        "description" : "Set SSH key as default on the owning community",
        "operationId" : "resource_CommunitySecurityResource_setSshKeyDefault_PUT",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "SSH key ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Set/unset SSH key as default. Optional, available values: true, false. Default: false.",
          "required" : false,
          "in" : "query",
          "name" : "defaultKey",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/system/crls/expired" : {
      "delete" : {
        "description" : "Starts CRL purge (removal) process.",
        "operationId" : "resource_CrlPurgeResource_purge_DELETE",
        "tags" : [ "CrlPurgeResource" ],
        "produces" : [ "application/json", "application/xml" ],
        "responses" : {
          "204" : {
            "description" : "Success",
            "schema" : {
              "description" : "",
              "type" : "string"
            }
          }
        }
      }
    },
    "/communities/exchange/{partyId}/trading/pickup" : {
      "get" : {
        "description" : "GET operation for retrieving all pickup protocols from community with given {partyId}",
        "operationId" : "resource_CommunityExchangePointResource_getPickupExchangePoints_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "partyId",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Available fields: name. Example: name='FTPPickup'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Create new pickup protocol for community with {partyId}. Example:\r\n<pre>\r\n {\r\n \"@class\": \"FTPServer\",\r\n \"enabled\": true,\r\n \"businessProtocol\": \"AS3\",\r\n \"friendlyName\": \"FTP Trading Pickup\",\r\n \"backupMessages\": true,\r\n \"maxConcurrentConnections\": 100,\r\n \"metadataFixedItems\": {\r\n \"BusinessProtocol\": \"AS3\"\r\n },\r\n \"restrictConsumableFileSize\": false,\r\n \"maxConsumableFileSize\": 0,\r\n \"metatadaTemplate\": {\r\n \"defaultMetadataTemplate\": \"\",\r\n \"enabledByProtocol\": false,\r\n \"metadataTemplatePolicy\": \"NEVER\",\r\n \"priorityOverFixedAttributes\": false\r\n },\r\n \"useCommunityMessageDelivery\": false,\r\n \"useContentProcessing\": false,\r\n \"ediSplitterEnabled\": true,\r\n \"pickupGroupStatus\": null,\r\n \"pickupGroup\": null,\r\n \"remoteUrl\": \"ftp://Community@somehost.com:4022/path\",\r\n localPort\": 4022,\r\n \"defaultUser\": {\r\n \"userName\": \"Axway123\",\r\n \"password\": \"12345\",\r\n \"ftpSubDirectories\": [\"/pathaxway\"]\r\n },\r\n sequenced\": false,\r\n \"sequenceTimeoutSeconds\": 60,\r\n \"modifyFtpServerDirectory\": true\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addPickupExchangePoint_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "partyId",
          "type" : "string"
        }, {
          "description" : "Pickup protocol information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConsumerExchangePointBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConsumerExchangePointBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "501" : {
            "description" : "Feature is not implemented in the current version of the API."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/{id}" : {
      "get" : {
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_getComponent_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/{id}/components" : {
      "get" : {
        "description" : "Returns a collection of additional Processing Steps associated to a Service output with given ID.",
        "operationId" : "resource_DocumentServiceResource_getOutputComponents_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the Service output.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add an additional Processing Step to a Service output with given ID. The additional Processing Step type may\r\ndiffer based on the Service type. Example:\r\n<pre>\r\n {\r\n \"type\": \"Document\",\r\n \"stepId\": \"12311\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_addOutputProcessingStep_POST",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the Service output  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The bean containing the additional Processing Step to be added.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_DocumentServiceOutputComponentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/attributes/templates" : {
      "get" : {
        "description" : "Returns the attributes that have been added to the agreement attributes template. This template is applied to\r\nall agreements available in the system.",
        "operationId" : "resource_AgreementResource_getAttributesTemplate_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Configures an attribute that has been added to the agreement attributes template. An attribute marked as required\r\nmakes the agreement incomplete if no value is provided. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"required\": false,\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_updateAttributeTemplate_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the attributes in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Adds a new attribute to the agreement attributes template. For a single-selection or a multi-selection attribute,\r\nyou can define a list of possible values. Make the attribute required if it is to be included on all exchanges.\r\nExample:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"required\": false,\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addAttributeTemplate_POST",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the attribute to be added to the agreement attributes template.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/agreements/documentAgreement/attributes/templates" : {
      "get" : {
        "description" : "Returns the attributes that have been added to the document agreement attributes template. This template is\r\nassociated with all document agreements available in the system.",
        "operationId" : "resource_AgreementResource_getDocumentAttributesTemplate_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Configures an attribute that has been added to the document agreement attributes template. An attribute marked\r\nas required makes the document agreement incomplete if no value is provided. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"required\": false,\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_updateDocumentAttributeTemplate_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the attributes in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Adds a new attribute to the document agreement attributes template. For a single-selection or a multi-selection\r\nattribute, you can define a list of possible values. Make the attribute required if it is to be included on all\r\nexchanges. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"fieldStyle\": \"FREETEXT\",\r\n \"possibleValues\": [],\r\n \"required\": false,\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addDocumentAttributeTemplate_POST",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the attribute to be added to the document agreement attributes template.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AttributeTemplateBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/pgp/{certificateId}" : {
      "delete" : {
        "description" : "Remove the PGP certificate with {pgpCertificateId} from community with {id}",
        "operationId" : "resource_CommunitySecurityResource_deletePGPPublicCertificate_DELETE",
        "tags" : [ "CommunitySecurityResource" ],
        "parameters" : [ {
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "certificateId",
          "type" : "string"
        }, {
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/configurations/{id}" : {
      "get" : {
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_getConfiguration_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups/{id}/pickup/{pickupId}" : {
      "post" : {
        "description" : "Assigns a trading or application exchange pickup to a pickup group.",
        "operationId" : "resource_PickupGroupResource_addExchangeToPickupGroup_POST",
        "tags" : [ "PickupGroupResource" ],
        "parameters" : [ {
          "description" : "The ID of the pickup group. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ID of pickup exchange to be added to the group. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "pickupId",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully."
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/component/configurations/arguments" : {
      "put" : {
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_ConfigurationResource_updateArgument_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/component/{id}" : {
      "get" : {
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_AgreementResource_ConfigurationResource_getComponent_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/{certificateId}" : {
      "delete" : {
        "description" : "Remove the certificate with {certificateId} from community with {id}",
        "operationId" : "resource_CommunitySecurityResource_deletePublicCertificate_DELETE",
        "tags" : [ "CommunitySecurityResource" ],
        "parameters" : [ {
          "description" : "Certificate id",
          "required" : true,
          "in" : "path",
          "name" : "certificateId",
          "type" : "string"
        }, {
          "description" : "Community ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/key/rsa" : {
      "get" : {
        "description" : "GET RSA key from embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_getPublicRSAKey_GET",
        "tags" : [ "EmbeddedServerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Embedded server Id.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "description" : "",
              "type" : "string"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/pickupGroups" : {
      "get" : {
        "description" : "Returns a collection of pickup group objects that exist in the system.",
        "operationId" : "resource_PickupGroupResource_getPickupGroups_GET",
        "tags" : [ "PickupGroupResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A defined filter used for filtering the results. Available fields: friendlyName. Example: friendlyName='PickupGroup'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "The status of the pickup group. Optional, available values: Allow, Block, all. Default: all.",
          "required" : false,
          "in" : "query",
          "name" : "status",
          "default" : "all",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Updates the information of an existing pickup group. Example:\r\n<pre>\r\n {\r\n \"friendlyName\": \"Pickup Group\",\r\n \"status\": \"Allow\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_PickupGroupResource_updatePickupGroup_PUT",
        "tags" : [ "PickupGroupResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Pass the bean containing the pickup group. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_PickupGroupBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Creates a new pickup group. Example:\r\n<pre>\r\n {\r\n \"friendlyName\": \"Pickup Group\",\r\n \"status\": \"Allow\"\r\n }\r\n </pre>",
        "operationId" : "resource_PickupGroupResource_addPickupGroup_POST",
        "tags" : [ "PickupGroupResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Provide a pickup group object. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_PickupGroupBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/pickupGroups/{id}" : {
      "get" : {
        "description" : "Returns the pickup group with the given ID.",
        "operationId" : "resource_PickupGroupResource_getPickupGroup_GET",
        "tags" : [ "PickupGroupResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the desired pickup group. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_PickupGroupBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Removes a pickup group from the system.",
        "operationId" : "resource_PickupGroupResource_removePickupGroup_DELETE",
        "tags" : [ "PickupGroupResource" ],
        "parameters" : [ {
          "description" : "The ID of the pickup group to be deleted. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/security/{id}/certificate/private/{certificateId}/defaults" : {
      "put" : {
        "description" : "Set given certificate as default on community with given {id}",
        "operationId" : "resource_CommunitySecurityResource_setCertificateDefaults_PUT",
        "tags" : [ "CommunitySecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Certificate ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "certificateId",
          "type" : "string"
        }, {
          "description" : "Community ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Use the certificate as default for encryption by the community with given {id}. Optional, available values: true, false, null. Default: null.",
          "required" : false,
          "in" : "query",
          "name" : "defaultEncryption",
          "type" : "boolean"
        }, {
          "description" : "Use the certificate as default for signing by the community with given {id}. Optional, available values: true, false, null. Default: null.",
          "required" : false,
          "in" : "query",
          "name" : "defaultSigning",
          "type" : "boolean"
        }, {
          "description" : "Use the certificate as default for ssl authentication by the community with given {id}. Optional, available values: true, false, null. Default: null.",
          "required" : false,
          "in" : "query",
          "name" : "defaultSsl",
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/{id}/messagingId" : {
      "get" : {
        "description" : "Retrieve all the messaging IDs of the party.",
        "operationId" : "resource_CommunityResource_getMessagingIds_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "A filter used to filter the results. Optional, available fields: enabled, name. Example: name='X12MID'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        }, {
          "description" : "Filter by standard. Optional, available values: EDIFACT, HL7v2, IDOC, INHOUSE, NACHA,\r\nTRADACOMS, VDA, X12, XML. Default value is empty string.",
          "required" : false,
          "in" : "query",
          "name" : "standard",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a new messaging id to a party.\r\nExample:\r\n<pre>\r\n {\r\n \"@class\": \"X12MessagingId\",\r\n \"primary\": true,\r\n \"enabled\": true,\r\n \"name\": \"X12 MID\",\r\n \"routingId\": \"ZZ:AXWAY:COM\",\r\n \"interchangeIdQualifier\": \"ZZ\",\r\n \"interchangeId\": \"AXWAY\",\r\n \"applicationId\": \"COM\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_addMessagingId_POST",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The MessagingIdBean bean to be added.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MessagingIdBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MessagingIdBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/schedules/{id}" : {
      "delete" : {
        "description" : "DELETE scheduler with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_removeSchedule_DELETE",
        "tags" : [ "ApplicationExchangePointResource" ],
        "parameters" : [ {
          "description" : "Scheduler ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile/outputs/{id}" : {
      "get" : {
        "description" : "Returns a Metadata Profile Output with the specified ID.",
        "operationId" : "resource_MetadataProfileResource_getMetadataProfileOutput_GET",
        "tags" : [ "MetadataProfileResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the desired metadata profile. <b>Required</b>",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_MetadataProfileOutputBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/embedded/server/{id}/certificate/generate" : {
      "post" : {
        "description" : "Generate a personal certificate for embedded server with given {id}",
        "operationId" : "resource_EmbeddedServerResource_generateServerCertificate_POST",
        "tags" : [ "EmbeddedServerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Embedded server settings ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Certificate name/alias inside the system. Optional. Default is long machine name as configured.",
          "required" : false,
          "in" : "query",
          "name" : "friendlyName",
          "type" : "string"
        }, {
          "description" : "Strength of the key. Optional, available values: 512, 1024, 2048, 3072, 4096. Default: 2048.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "keyLength",
          "default" : 2048,
          "type" : "integer"
        }, {
          "description" : "Unit of time. Optional, available values: Years, Months, Days. Default: Years.",
          "required" : false,
          "in" : "query",
          "name" : "validPeriod",
          "default" : "Years",
          "type" : "string"
        }, {
          "description" : "Number of units given in <i>validPeriod</i> field. Optional, min = 0. Default: 2.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "validTime",
          "default" : 2,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Server error while processing request. See message details."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/emailUsers/attach/{userId}" : {
      "post" : {
        "description" : "Add an existing user account to an SMTP exchange point with a given id.",
        "operationId" : "resource_CommunityExchangePointResource_attachEmailUser_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the exchange point. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The ID of the user account. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "userId",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been attached successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error attaching object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components/configurations/{id}" : {
      "get" : {
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_ComponentResource_getConfiguration_GET",
        "tags" : [ "ComponentResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/component/{id}" : {
      "get" : {
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getComponent_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs" : {
      "put" : {
        "description" : "Configure a specific Service output. A Service can have multiple outputs and each output has its own configuration. Example:\r\n<pre>\r\n {\r\n \"name\": \"Output\",\r\n \"deliveryMethod\": \"DELIVER_TO_APPLICATION\",\r\n \"exchangePointId\": \"12311\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_updateDocumentServiceOutput_PUT",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing the Service output configuration.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_DocumentServiceOutputBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/ftpSubDirectory/{id}" : {
      "get" : {
        "description" : "GET FTP subdirectory information that has given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getFtpSubDirectory_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE subdirectory with given {id} from FTP protocol",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeFtpSubDirectory_DELETE",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "parameters" : [ {
          "description" : "FTP subdirectory ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/inlineProcessors/{id}" : {
      "delete" : {
        "description" : "DELETE custom processor with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeInlineProcessor_DELETE",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "parameters" : [ {
          "description" : "Custom processor ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/component/configurations/{id}" : {
      "get" : {
        "description" : "Get the configuration parameters with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfiguration_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID specifying the configuration parameters.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ConfigurationBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/users/security/certificate/{id}" : {
      "get" : {
        "description" : "<p>\r\nRetrieve personal certificate (public part) with given {id} from the currently authenticated user's certificate store\r\n</p>\r\n<p>\r\nError codes related to this resource:\r\n<ul>\r\n<li><b>1000</b> - A required field is missing or blank.</li>\r\n<li><b>1100</b> - Certificate with the provided ID not found.</li>\r\n</ul>\r\n</p>",
        "operationId" : "resource_UserSecurityResource_getCertificate_GET",
        "tags" : [ "UserSecurityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the certificate.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/json_X509CertificateInfoBean"
            }
          }
        }
      }
    },
    "/webtrader/user/password" : {
      "put" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_setPassword_PUT",
        "tags" : [ "WebTraderResource" ],
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "description" : "to update for the current logged in webtrader user.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_UserPasswordChangeBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Set logged in webtrader user password."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "406" : {
            "description" : "Password change was not successfully executed."
          }
        }
      }
    },
    "/communities/exchange/trading/sftpSubDirectory" : {
      "put" : {
        "description" : "Update SFTP subdirectory. Example:\r\n<pre>\r\n {\r\n \"sftpUserName\": \"CommunitySFTP\",\r\n \"subDirectory\": \"/path\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_modifySftpSubDirectory_PUT",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SftpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/components" : {
      "get" : {
        "description" : "Returns a collection of component objects that exists in the system.  Components are used in B2Bi to provide\r\nspecific types of processing to a message handling flow. A component associates a resource (piece of\r\nmessage-processing code) residing on the integration engine with a set of specific parameters and message\r\nformats. The processing can then be used in one or more service objects to specify how a particular message type\r\nis handled between two or more exchange points.",
        "operationId" : "resource_ComponentResource_getComponents_GET",
        "tags" : [ "ComponentResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A defined filter used for filtering the results. Optional, available fields: name. Example: name='CopyMessage'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Updates the component definition by setting a different name or a different resource type. Some parameters, like\r\nthe component type, cannot be changed. Depending on the component type, the configuration might contain\r\nparameters that are used to specify the characteristics of the component. Those parameters can be configured by\r\naccessing a different resource.\r\n* Example:\r\n<pre>\r\n {\r\n \"resourceName\": \"B2BX Application/B2Bi Copy Message\",\r\n \"resourceAbsFilePath\": \"%CORE_SOLUTIONS%\\\\b2bx\\\\component\\\\procmbc_be_copymessage.x4\",\r\n \"resourceType\": \"1\",\r\n \"processingStepEnabled\": true,\r\n \"processingStepName\": \"B2BX Application/B2Bi Copy Message\",\r\n \"processingStepType\": \"Map\",\r\n \"processingStepAddOutput\": false,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ComponentResource_updateComponent_PUT",
        "tags" : [ "ComponentResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the component definition. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ComponentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Creates a new component object. To create a component, you need to specify a resource that resides on the\r\nintegration engine. The resource name and type can be identified by accessing a different API resource.\r\nExample:\r\n<pre>\r\n {\r\n \"resourceName\": \"B2BX Application/B2Bi Copy Message\",\r\n \"resourceAbsFilePath\": \"%CORE_SOLUTIONS%\\\\b2bx\\\\component\\\\procmbc_be_copymessage.x4\",\r\n \"resourceType\": \"1\",\r\n \"processingStepEnabled\": true,\r\n \"processingStepName\": \"B2BX Application/B2Bi Copy Message\",\r\n \"processingStepType\": \"Map\",\r\n \"processingStepAddOutput\": false\r\n }\r\n </pre>",
        "operationId" : "resource_ComponentResource_addComponent_POST",
        "tags" : [ "ComponentResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the component definition in the requested format. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ComponentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "500" : {
            "description" : "Error connecting to the integration engine."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/passwordChange" : {
      "post" : {
        "description" : "Validates and sets the session cookie for a valid user's credentials.  The authentication\r\nheader is a Basic authentication value.\r\n<p>",
        "operationId" : "resource_AuthenticationResource_changePassword_POST",
        "tags" : [ "AuthenticationResource" ],
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "description" : "The basic authentication header containing the user's credentials. <b>Required</b>.",
          "required" : false,
          "in" : "header",
          "name" : "Authorization",
          "type" : "string"
        }, {
          "description" : "The new password in case we want to trigger a login with also changing the password. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_PasswordChangeBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Password changed and logged in successful.",
            "schema" : {
              "$ref" : "#/definitions/json_Response"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "406" : {
            "description" : "Password change was not successfully executed."
          }
        }
      }
    },
    "/webtrader/user/preferences" : {
      "put" : {
        "description" : "Only used for Webtrader login.",
        "operationId" : "resource_WebTraderResource_setPreferences_PUT",
        "tags" : [ "WebTraderResource" ],
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "ui preferences to update for the logged in webtrader user",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "description" : "",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Set logged in webtrader user preferences.",
            "schema" : {
              "$ref" : "#/definitions/json_WebtraderUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/communities/contacts" : {
      "put" : {
        "description" : "Update a contact of a party.\r\nExample:\r\n<pre>\r\n {\r\n \"primary\": true,\r\n \"name\": \"Contact\",\r\n \"email\": \"contact@axway.com\",\r\n \"phone\": \"123456789\",\r\n \"notes\": \"Notes\",\r\n \"title\": \"Title\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityResource_updateContact_PUT",
        "tags" : [ "CommunityResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ContactBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/functionalGroups/{id}" : {
      "get" : {
        "description" : "Returns a functional group specified by an identifier.",
        "operationId" : "resource_AgreementResource_getFunctionalGroup_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the functional group.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FunctionalGroupBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Removes a functional group with given ID. The default functional group of an X12 outbound agreement cannot be\r\ndeleted.",
        "operationId" : "resource_AgreementResource_removeFunctionalGroup_DELETE",
        "tags" : [ "AgreementResource" ],
        "parameters" : [ {
          "description" : "The ID of the functional group.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/{id}/inlineProcessors" : {
      "get" : {
        "description" : "GET list with custom logic as an integral part of the processing pipeline for the exchange point with {id}",
        "operationId" : "resource_CommunityExchangePointResource_getInlineProcessors_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new custom processor as an integral part of the processing pipeline for the exchange point with {id}.\r\nExample:\r\n<pre>\r\n {\r\n \"className\": \"com.axway.processor.InlineProcessor\",\r\n \"parameters\": null,\r\n \"description\": \"This is an inline processor\"\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addInlineProcessor_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Exchange point ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Custom processor information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_InlineProcessorBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/exchange/trading/{id}/ftpUser" : {
      "get" : {
        "description" : "GET users information for FTP protocol with given {id}",
        "operationId" : "resource_CommunityExchangePointResource_getFtpUsers_GET",
        "tags" : [ "CommunityExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new user on FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"userName\": \"Community\",\r\n \"password\": \"Axway123\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_CommunityExchangePointResource_addFtpUser_POST",
        "tags" : [ "CommunityExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "User information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/metadataprofile" : {
      "get" : {
        "description" : "Returns a collection of Metadata Profile objects that exist in the system. A metadataprofile profile is a B2Bi object\r\nthat you use to trigger processing that is based on the attributes (metatdata) of messages",
        "operationId" : "resource_MetadataProfileResource_getMetadataProfiles_GET",
        "tags" : [ "MetadataProfileResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "A defined filter used for filtering the results. Optional, available fields: name. Example: name='ProfileName'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: name. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Update the specified Metadata Profile object. Example:\r\n<pre>\r\n {\r\n \"name\": \"Test Metadata Service\",\r\n \"enabled\": true,\r\n \"serviceId\": \"12311\",\r\n \"@id\": \"152001\"\r\n\t}\r\n </pre>",
        "operationId" : "resource_MetadataProfileResource_modifyMetadataProfile_PUT",
        "tags" : [ "MetadataProfileResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing the definition of the Metadata Profile. <b>Required</b>",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MetadataProfileBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add a new Metadata Profile in the system. Example:\r\n<pre>\r\n {\r\n \"name\": \"Test Metadata Service\",\r\n \"enabled\": true,\r\n \"serviceId\": \"12311\",\r\n \"metadataRules\": [\r\n   {\r\n    \"metadata\": \"Trading Engine: ReceiverPartyName\",\r\n    \"condition\": \"EQUALS\",\r\n    \"value\": \"test\"\r\n   }\r\n  ]\r\n }\r\n </pre>",
        "operationId" : "resource_MetadataProfileResource_addMetadataProfile_POST",
        "tags" : [ "MetadataProfileResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing the definition of the Metadata Profile. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_MetadataProfileBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/services/postDetectionComponent/{id}" : {
      "get" : {
        "description" : "Returns the component that is owned by the object with given ID.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getComponent_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the object.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ComponentBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/outputs/component/{id}/configurations" : {
      "get" : {
        "description" : "Returns the configuration parameters of the component specified by the unique identifier. These parameters can be\r\nconfigured to specify the characteristics of the component.",
        "operationId" : "resource_DocumentServiceResource_ConfigurationResource_getConfigurationsForOwner_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the configuration owner.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements" : {
      "get" : {
        "description" : "Returns a collection of agreements that are available in the system. An agreement is a B2Bi object used to\r\nspecify how B2Bi processes the information that is exchanged between two or more partners. Each agreement is\r\nbased on a standards-based type of processing for X12, EDIFACT, etc. B2Bi uses agreements at runtime to match\r\nthe messages it handles to partners and processing.",
        "operationId" : "resource_AgreementResource_getAgreements_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Filter by agreement format. Optional, available values: EDIFACT, HL7v2, IDOC, INHOUSE, NACHA, TRADACOMS,\r\nVDA, X12, XML. Parameter has no default value.",
          "required" : false,
          "in" : "query",
          "name" : "agreementFormat",
          "type" : "string"
        }, {
          "description" : "Filter by agreement type. Optional, available values: Inbound, Outbound. Parameter has no default value.",
          "required" : false,
          "in" : "query",
          "name" : "agreementType",
          "type" : "string"
        }, {
          "description" : "A defined filter used for filtering the results. Optional, available fields: _id, name.Example: name='X12InboundAgreement'",
          "required" : false,
          "in" : "query",
          "name" : "filter",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional. Default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional. Default: 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        }, {
          "description" : "Criterion for ordering the results. Optional, available fields: _id, name. Default: name.",
          "required" : false,
          "in" : "query",
          "name" : "orderBy",
          "default" : "name",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      },
      "put" : {
        "description" : "Updates the configuration of a specific agreement.  Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12InboundAgreement\",\r\n \"name\": \"AlinaTest1 AlinaTest Inbound X12\",\r\n \"enabled\": true,\r\n \"senderId\": \"123411\",\r\n \"senderMessagingId\": \"123422\",\r\n \"receiverId\": \"123433\",\r\n \"receiverMessagingId\": \"123444\",\r\n \"communityId\": \"123455\",\r\n \"communityRoutingId\": \"123466\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\",\r\n \"x12TestIndicator\": \"P\",\r\n \"useX12TestIndicator\": false,\r\n \"useInterchangeSenderIdQualifier\": true,\r\n \"useInterchangeReceiverIdQualifier\": true,\r\n \"useInterchangeSenderId\": true,\r\n \"useInterchangeReceiverId\": true,\r\n \"bypassEdiProcessing\": false,\r\n \"generateAckRule\": \"YES_NON_DETAILED\",\r\n \"serviceId\": null,\r\n \"ackEnvelopingType\": \"DEFAULT\",\r\n \"outboundAgreementForAckEnvelopeId\": null,\r\n \"overrideAckTransportReceiver\": false,\r\n \"ackTransportReceiverId\": null,\r\n \"ackTransportReceiverRoutingId\": null,\r\n \"ackDeliveryExchangeId\": \"52007\",\r\n \"ackInterchangeCntrlNumberGenerator\": \"$icid:9$\",\r\n \"ackGroupCntrlNumberGenerator\": \"$GSId:9$\",\r\n \"ackTransSetCntrlNumberGenerator\": \"%FR:4%_%DC:4%\",\r\n \"ackGroupTimeFormat\": \"HHMM\",\r\n \"rejectionRule\": \"ENTIRE_INTERCHANGE\",\r\n \"customRejectionRule\": null,\r\n \"checkControlNumbs\": true,\r\n \"checkGroupControlNumbs\": true,\r\n \"outOfSeqAction\": \"WARN_AND_PROCESS\",\r\n \"dupCheckControlNumbs\": true,\r\n \"dupCheckGroupControlNumbs\": true,\r\n \"dupAction\": \"WARN_AND_PROCESS\",\r\n \"compositeElementSeperator\": \":\",\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_modifyAgreement_PUT",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the agreement in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AgreementBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AgreementBean"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Creates a new agreement. The integration engine must be running in order to create a new agreement object.\r\nDepending on the standard type and the trading exchange type, an agreement may be configured differently. Example:\r\n<pre>\r\n {\r\n \"@class\": \"X12InboundAgreement\",\r\n \"name\": \"AlinaTest1 AlinaTest Inbound X12\",\r\n \"enabled\": true,\r\n \"senderId\": \"123411\",\r\n \"senderMessagingId\": \"123422\",\r\n \"receiverId\": \"123433\",\r\n \"receiverMessagingId\": \"123444\",\r\n \"communityId\": \"123455\",\r\n \"communityRoutingId\": \"123466\",\r\n \"processingMode\": \"ISA_AND_GS_MODE\",\r\n \"x12TestIndicator\": \"P\",\r\n \"useX12TestIndicator\": false,\r\n \"useInterchangeSenderIdQualifier\": true,\r\n \"useInterchangeReceiverIdQualifier\": true,\r\n \"useInterchangeSenderId\": true,\r\n \"useInterchangeReceiverId\": true,\r\n \"bypassEdiProcessing\": false,\r\n \"generateAckRule\": \"YES_NON_DETAILED\",\r\n \"serviceId\": null,\r\n \"ackEnvelopingType\": \"DEFAULT\",\r\n \"outboundAgreementForAckEnvelopeId\": null,\r\n \"overrideAckTransportReceiver\": false,\r\n \"ackTransportReceiverId\": null,\r\n \"ackTransportReceiverRoutingId\": null,\r\n \"ackDeliveryExchangeId\": \"52007\",\r\n \"ackInterchangeCntrlNumberGenerator\": \"$icid:9$\",\r\n \"ackGroupCntrlNumberGenerator\": \"$GSId:9$\",\r\n \"ackTransSetCntrlNumberGenerator\": \"%FR:4%_%DC:4%\",\r\n \"ackGroupTimeFormat\": \"HHMM\",\r\n \"rejectionRule\": \"ENTIRE_INTERCHANGE\",\r\n \"customRejectionRule\": null,\r\n \"checkControlNumbs\": true,\r\n \"checkGroupControlNumbs\": true,\r\n \"outOfSeqAction\": \"WARN_AND_PROCESS\",\r\n \"dupCheckControlNumbs\": true,\r\n \"dupCheckGroupControlNumbs\": true,\r\n \"dupAction\": \"WARN_AND_PROCESS\",\r\n \"compositeElementSeperator\": \":\"\r\n }\r\n </pre>",
        "operationId" : "resource_AgreementResource_addAgreement_POST",
        "tags" : [ "AgreementResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the agreement in the requested format.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AgreementBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_AgreementBean"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          }
        }
      }
    },
    "/application/exchange/{id}/ftpSubDirectory" : {
      "get" : {
        "description" : "GET subdirectory information for FTP protocol with given {id}",
        "operationId" : "resource_ApplicationExchangePointResource_getFtpSubDirectoryByExchangePointId_GET",
        "tags" : [ "ApplicationExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new subdirectory to FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"ftpUserName\": \"Community\",\r\n \"subDirectory\": \"/path\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_addFtpSubDirectory_POST",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Subdirectory information. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpSubDirectoryBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/sshUser" : {
      "put" : {
        "description" : "Update a SFTP User account owned by a party.\r\nExample:\r\n<pre>\r\n {\r\n \"userName\": \"axway\",\r\n \"password\": \"123\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"sftpSubDirectories\": [\r\n \"/path\"\r\n ],\r\n \"@id\": \"12345\"\r\n }\r\n\r\n </pre>",
        "operationId" : "resource_TradingPartnerResource_updateSshUser_PUT",
        "tags" : [ "TradingPartnerResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The bean containing updates. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_SshUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/services/{id}/attributes" : {
      "get" : {
        "description" : "Return the list of available attributes for a Service with given ID. Attributes are metadata used by the\r\nintegration engine and are structured in pairs. An attribute comprises a name and either an associated value or\r\na list of values.",
        "operationId" : "resource_DocumentServiceResource_getAttributes_GET",
        "tags" : [ "DocumentServiceResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the Service.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "put" : {
        "description" : "Update the value of an attribute that belongs to a Service of given ID. Example:\r\n<pre>\r\n {\r\n \"name\": \"attribute\",\r\n \"usedForSearching\": true,\r\n \"usedForProcessing\": true,\r\n \"clearedAtRuntime\": false,\r\n \"values\": [\r\n \"value\"\r\n ]\r\n </pre>",
        "operationId" : "resource_DocumentServiceResource_modifyAttribute_PUT",
        "tags" : [ "DocumentServiceResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the Service. <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "The bean containing the attribute and its values.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_AttributeValueBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/{id}/wsUsers" : {
      "get" : {
        "description" : "Returns all the Web Services user accounts belonging to the party with given id.",
        "operationId" : "resource_TradingPartnerResource_getWsUsers_GET",
        "tags" : [ "TradingPartnerResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the party.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "Return no more than n rows after skipping OFFSET m rows. Optional, default 10.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "limit",
          "default" : 10,
          "type" : "integer"
        }, {
          "description" : "Skip first m rows after ordering. Optional, default 0.",
          "format" : "int32",
          "required" : false,
          "in" : "query",
          "name" : "offset",
          "default" : 0,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_CollectionResult"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/{id}/ftpUser" : {
      "get" : {
        "description" : "GET user information for FTP protocol with given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getFtpUsersByExchangePointId_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol Id.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_FtpUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "post" : {
        "description" : "Add new user on FTP protocol with given {id}. Example:\r\n<pre>\r\n {\r\n \"userName\": \"Partner\",\r\n \"password\": \"axway\",\r\n \"enabled\": true,\r\n \"hasCredentials\": true,\r\n \"passwordPolicyName\": \"Default policy\",\r\n \"ftpSubDirectories\": [\r\n \"/path\"\r\n ]\r\n }\r\n </pre>",
        "operationId" : "resource_TradingPartnerExchangePointResource_addFtpUser_POST",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "FTP protocol ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        }, {
          "description" : "User information.  <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_FtpUserBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been created successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error creating object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/communities/wsUsers/{id}" : {
      "get" : {
        "description" : "Returns the user account with given ID.",
        "operationId" : "resource_CommunityResource_getWsUserBean_GET",
        "tags" : [ "CommunityResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the user account.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_WSUserBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Deletes a user account that is no longer in use.",
        "operationId" : "resource_CommunityResource_removeWsUser_DELETE",
        "tags" : [ "CommunityResource" ],
        "parameters" : [ {
          "description" : "The ID of the user account.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/application/exchange/delivery/component/configurations/arguments" : {
      "put" : {
        "description" : "Sets a value to a specific configuration parameter. Example:\r\n<pre>\r\n {\r\n \"name\": \"Input Format\",\r\n \"type\": \"b2bx.server.EnumParameter\",\r\n \"value\": \"0\",\r\n \"editable\": true,\r\n \"@id\": \"123456\"\r\n }\r\n </pre>",
        "operationId" : "resource_ApplicationExchangePointResource_ConfigurationResource_updateArgument_PUT",
        "tags" : [ "ApplicationExchangePointResource" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Contains the argument and the value to be set. <b>Required</b>.",
          "required" : false,
          "in" : "body",
          "name" : "body",
          "schema" : {
            "$ref" : "#/definitions/json_ConfigurationArgumentBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been modified successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_ActionResult"
            }
          },
          "400" : {
            "description" : "Error modifying object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/agreements/documentAgreements/{id}" : {
      "get" : {
        "description" : "Returns a document agreement specified by a unique identifier.",
        "operationId" : "resource_AgreementResource_getDocumentAgreement_GET",
        "tags" : [ "AgreementResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_DocumentAgreementBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "Removes a document agreement specified by a unique identifier.",
        "operationId" : "resource_AgreementResource_removeDocumentAgreement_DELETE",
        "tags" : [ "AgreementResource" ],
        "parameters" : [ {
          "description" : "The ID of the document agreement.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    },
    "/tradingPartners/exchange/trading/sftpSubDirectory/{id}" : {
      "get" : {
        "description" : "GET SFTP subdirectory information that has given {id}",
        "operationId" : "resource_TradingPartnerExchangePointResource_getSftpSubDirectory_GET",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "description" : "Subdirectory ID.  <b>Required</b>.",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object has been retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/json_SftpSubDirectoryBean"
            }
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      },
      "delete" : {
        "description" : "DELETE subdirectory with given {id} from SFTP protocol",
        "operationId" : "resource_TradingPartnerExchangePointResource_removeSftpSubDirectory_DELETE",
        "tags" : [ "TradingPartnerExchangePointResource" ],
        "parameters" : [ {
          "description" : "SFTP subdirectory ID",
          "required" : true,
          "in" : "path",
          "name" : "id",
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Error removing object. Possible validation errors, see message details."
          },
          "401" : {
            "description" : "Username/password credentials are not valid."
          },
          "204" : {
            "description" : "Operation has been executed successfully."
          },
          "403" : {
            "description" : "User does not have the permissions required or operation is not allowed because of license restrictions."
          },
          "404" : {
            "description" : "Object not found."
          }
        }
      }
    }
  },
  "definitions" : {
    "xml_ns0_partyBean" : {
      "title" : "partyBean",
      "description" : ""
    },
    "json_FileSystemB2biProducerExchangePointBean" : {
      "title" : "FileSystemB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_oftpV2ServerExchangePointBean" : {
      "title" : "oftpV2ServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_publicKeyCredentialsBean" : {
      "title" : "publicKeyCredentialsBean",
      "description" : "SSH public key information"
    },
    "json_ServerExchangePointBean" : {
      "title" : "ServerExchangePointBean",
      "description" : ""
    },
    "json_DocumentAgreementOutputApplicationBean" : {
      "title" : "DocumentAgreementOutputApplicationBean",
      "description" : ""
    },
    "json_MimeEmailB2biProducerExchangePointBean" : {
      "title" : "MimeEmailB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_configurationBean" : {
      "title" : "configurationBean",
      "description" : ""
    },
    "xml_ns0_generateAckRuleType" : {
      "title" : "generateAckRuleType",
      "description" : "",
      "type" : "string"
    },
    "json_TradacomsAgreementBean" : {
      "title" : "TradacomsAgreementBean",
      "description" : ""
    },
    "json_StdEntryClassCode" : {
      "title" : "StdEntryClassCode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_sftpSubDirectoryBean" : {
      "title" : "sftpSubDirectoryBean",
      "description" : ""
    },
    "json_FtpType" : {
      "title" : "FtpType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_fileRejectionRule" : {
      "title" : "fileRejectionRule",
      "description" : "",
      "type" : "string"
    },
    "json_EdifactInboundFunctionalGroupBean" : {
      "title" : "EdifactInboundFunctionalGroupBean",
      "description" : ""
    },
    "json_AddressingRuleBean" : {
      "title" : "AddressingRuleBean",
      "description" : "Use this class to specify sender and receiver rules for consumed files",
      "properties" : {
        "addressingAction" : {
          "description" : "Determine how a pickup will compute the sender/receiver's address</p>\r\n<b>Values for addressing rule action</b>\r\n<ul>\r\n<li><b>USE_METADATA_OR_PROTOCOL_ADDRESS</b> Address must be determined by either message attribute configuration or by protocol address only.</li>\r\n<li><b>USE_FIXED_PARTY</b> Specify the address. Always use a fixed address.</br>\r\nSpecifies that the trading engine should always use a fixed address for the sender or receiver. The \"from\" or \"to\" party must be set up as a community or partner.</br>\r\n<b>Note</b> When this value is chosen, <i>fixedPartyId</i> should also be set</li>\r\n<li><b>USE_PROTOCOL_ADDRESS</b> Use the protocol address but if protocol address is missing, parse the document for the address.</br>\r\nIf you select this option, you must configure the address parsing rule. See Address parsing rule options below.</li>\r\n<li><b>ALWAYS_PARSE</b> Always parse for the address. Regardless whether the message protocol provides the address, always parse the document for the address..</br>\r\nSelect this option to specify that the trading engine should always parse the message for the sender or receiver address.\r\nFor messages from partners, however, the trading engine still checks the protocol header for the sender and receiver.\r\nA message with an unknown sender or receiver in the header is rejected. The always parse option for inbound messages is\r\nfor finding the identity of true senders or true receivers.For messages picked up from applications,\r\nthe always parse option tells the trading engine to find the sender or receiver in the message body.\r\nMessages from integration do not have protocol headers.If you select this option, you must configure the address parsing rule.\r\nSee Address parsing rule options below.\r\n</ul>\r\n</p>\r\n<b>Address parsing rule options</b>\r\n<ul>\r\n<li><b>If the document is EDI, parse for the address</b> - If an EDI document is picked up, use the \"to\" and \"from\" addresses specified within it.\r\nProperly formatted EDI documents contain this information.</li>\r\n<li><b>If the document is XML, use XPaths to locate the address</b> - If an XML document is picked up, use the \"to\" and \"from\"\r\naddresses specified by the XPaths within it. XML Path Language or XPath is a language for addressing parts of an XML document.</li>\r\n</ul>",
          "$ref" : "#/definitions/json_AddressingRuleAction"
        },
        "parseEdi" : {
          "description" : "<b>If the document is EDI, parse for the address</b> - If an EDI document is picked up, use the \"to\" and \"from\" addresses specified within it.\r\nProperly formatted EDI documents contain this information.",
          "type" : "boolean"
        },
        "edifactUseInternal" : {
          "description" : "<b>Perform enhanced EDI parsing to match partner messaging IDs</b> - This setting applies to X12, EDIFACT, and TRADACOMS.\r\nIf your user license supports Axway B2Bi, this option is selected by default.If selected, the trading engine performs\r\nadditional parsing of the header information to create routing IDs with a colon separator between values.</br>\r\nFor example, information from an EDIFACT file would be parsed in the following format:</br>\r\n<i> ID:interchange ID:internal ID:sub-internal ID </i></br>\r\n<b>When this parsing option is elected,</b> communities and partners must have matching routing IDs in the same format.</br>\r\nFor example, if the \"from\" address in a parsed message is <i>ID:interchange ID:value3:value4</i>, the partner must have the same routing ID.</br>\r\n<b>When this option is not selected,</b> \"to\" and \"from\" addresses in messages are parsed only for the trading engineID and ID values.</br>\r\nFor example, <i>1:partner</i> is parsed as the sender and rendered as partner1 in the user interface.</br>\r\n<b>Note</b> that TRADACOMS only has two, optional values that can be parsed. They must match one of the following patterns:</br>\r\nA: </br>\r\n:B </br>\r\nA:B</br>",
          "type" : "boolean"
        },
        "parseXml" : {
          "description" : "<b>If the document is XML, use XPaths to locate the address</b> - If an XML document is picked up, use the \"to\" and \"from\"\r\naddresses specified by the XPaths within it. XML Path Language or XPath is a language for addressing parts of an XML document.</li>",
          "type" : "boolean"
        },
        "xpaths" : {
          "description" : "This field is for specifying the XPaths of the message sender or receiver.<br>\r\n<b>Note</b> Using the XPath requires knowledge of XML.",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "fixedPartyId" : {
          "description" : "Community or partner friendly name",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_NachaDocumentAgreementBean" : {
      "title" : "NachaDocumentAgreementBean",
      "description" : ""
    },
    "json_PasswordChangeFailure" : {
      "title" : "PasswordChangeFailure",
      "description" : "Use this class to show information about the password policies"
    },
    "json_IntegrationDeliverySettingsBean" : {
      "title" : "IntegrationDeliverySettingsBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "enabled" : {
          "description" : "Specifies whether or not this Delivery Setting is enabled. <p/>",
          "type" : "boolean"
        },
        "applicationDeliveryId" : {
          "description" : "The ID of the Application Delivery used by this Delivery Setting.  <p/>",
          "type" : "string"
        },
        "deliveryCriteria" : {
          "description" : "Use this to define the conditions that cause payloads to be delivered to the appropriate application delivery.\r\nIf a payload does not satisfy the delivery criteria for any application delivery, then the first available\r\napplication delivery is used. An application delivery with no criteria is used only if it is the first one\r\navailable. <p/>",
          "$ref" : "#/definitions/json_CriteriaBean"
        }
      },
      "type" : "object"
    },
    "json_AleB2biProducerExchangePointBean" : {
      "title" : "AleB2biProducerExchangePointBean",
      "description" : ""
    },
    "json_GenerateAckRuleType_x12" : {
      "title" : "GenerateAckRuleType",
      "description" : "",
      "type" : "string"
    },
    "json_X12ProcessingMode" : {
      "title" : "X12ProcessingMode",
      "description" : "User: cfistrate",
      "type" : "string"
    },
    "xml_ns0_oftpV1ProducerExchangePointBean" : {
      "title" : "oftpV1ProducerExchangePointBean",
      "description" : ""
    },
    "json_PickupGroupBean" : {
      "title" : "PickupGroupBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "friendlyName" : {
          "description" : "The friendly name of the pickup group.",
          "type" : "string"
        },
        "status" : {
          "description" : "Returns the status of the pickup group: Allow or Block.",
          "$ref" : "#/definitions/json_PickupGroupStatus"
        },
        "assignedExchanges" : {
          "description" : "Returns the list of exchange points that are assigned to this pickup group.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_Family" : {
      "title" : "Family",
      "description" : "",
      "type" : "string"
    },
    "json_FileSystemProducerExchangePointBean" : {
      "title" : "FileSystemProducerExchangePointBean",
      "description" : ""
    },
    "json_FtpB2biConsumerExchangePointBean" : {
      "title" : "FtpB2biConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_pesitIdentificationBean" : {
      "title" : "pesitIdentificationBean",
      "description" : ""
    },
    "xml_ns0_tradacomsMessagingIdBean" : {
      "title" : "tradacomsMessagingIdBean",
      "description" : ""
    },
    "xml_ns0_oftpV2ConsumerExchangePointBean" : {
      "title" : "oftpV2ConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_inHouseInboundAgreementBean" : {
      "title" : "inHouseInboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_x12MessagingIdBean" : {
      "title" : "x12MessagingIdBean",
      "description" : "User: cfistrate"
    },
    "json_X12InboundFunctionalGroupBean" : {
      "title" : "X12InboundFunctionalGroupBean",
      "description" : "Author: srybak\r\nDate: 5/23/14"
    },
    "json_CertificateType" : {
      "title" : "CertificateType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_jmsListeningExchangePointBean" : {
      "title" : "jmsListeningExchangePointBean",
      "description" : ""
    },
    "json_OftpV1ProducerExchangePointBean" : {
      "title" : "OftpV1ProducerExchangePointBean",
      "description" : ""
    },
    "json_Locale" : {
      "title" : "Locale",
      "description" : "",
      "properties" : {
        "availableLocales" : {
          "description" : "",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_Locale"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "displayName" : {
          "description" : "",
          "type" : "string"
        },
        "ISO3Language" : {
          "description" : "",
          "type" : "string"
        },
        "displayVariant" : {
          "description" : "",
          "type" : "string"
        },
        "default" : {
          "description" : "",
          "$ref" : "#/definitions/json_Locale"
        },
        "variant" : {
          "description" : "",
          "type" : "string"
        },
        "script" : {
          "description" : "",
          "type" : "string"
        },
        "displayLanguage" : {
          "description" : "",
          "type" : "string"
        },
        "unicodeLocaleKeys" : {
          "description" : "",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "extensionKeys" : {
          "description" : "",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "displayCountry" : {
          "description" : "",
          "type" : "string"
        },
        "language" : {
          "description" : "",
          "type" : "string"
        },
        "ISOLanguages" : {
          "description" : "",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "unicodeLocaleAttributes" : {
          "description" : "",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "ISO3Country" : {
          "description" : "",
          "type" : "string"
        },
        "country" : {
          "description" : "",
          "type" : "string"
        },
        "displayScript" : {
          "description" : "",
          "type" : "string"
        },
        "ISOCountries" : {
          "description" : "",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "xml_ns0_usernamePasswordCredentialsBean" : {
      "title" : "usernamePasswordCredentialsBean",
      "description" : "Bean used in basic authentication"
    },
    "xml_ns0_protocolVersion" : {
      "title" : "protocolVersion",
      "description" : "",
      "type" : "string"
    },
    "json_JmsProducerExchangePointBean" : {
      "title" : "JmsProducerExchangePointBean",
      "description" : ""
    },
    "json_JmsPollingExchangePointBean" : {
      "title" : "JmsPollingExchangePointBean",
      "description" : ""
    },
    "json_RejectionRuleType_hl7v2" : {
      "title" : "RejectionRuleType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_sshUserBean" : {
      "title" : "sshUserBean",
      "description" : ""
    },
    "xml_ns0_pluggableConsumerExchangePointBean" : {
      "title" : "pluggableConsumerExchangePointBean",
      "description" : ""
    },
    "json_IdocDocumentAgreementBean" : {
      "title" : "IdocDocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_consumerExchangePointBean" : {
      "title" : "consumerExchangePointBean",
      "description" : ""
    },
    "json_PriorityCode" : {
      "title" : "PriorityCode",
      "description" : "",
      "type" : "string"
    },
    "json_OftpProducerExchangePointBean" : {
      "title" : "OftpProducerExchangePointBean",
      "description" : ""
    },
    "json_DocumentServiceBean" : {
      "title" : "DocumentServiceBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "name" : {
          "description" : "The name of this service.",
          "type" : "string"
        },
        "deliveryMethod" : {
          "description" : "The delivery method for this service. You can use one of the following values:\r\n<ul>\r\n<li><b>DELIVER_TO_PARTNER</b> </br> Select this option if the message is to be sent to a trading partner. This option is\r\nthe default setting for the following document formats: MEC XML, XML, In-house and IDoc.</li>\r\n<li><b>RETURN_TO_SENDER</b> </br> Select this option if you are creating a service to support Web Services or MLLP trading,\r\nand the service requires a return exchange to the originating party.</li>\r\n<li><b>DELIVER_TO_APPLICATION</b> </br> Select this option if the delivery endpoint of the document exchange is a back-end\r\napplication. This option is the default setting for the following document formats: EDIFACT, X12, VDA and\r\nTRADACOMS. If you select this option, you must also provide the target application for the document delivery.</li>\r\n<li><b>CONTINUE_TO_NEXT_STEP</b> </br> Select this option if the message is to be sent to the next content-based\r\nprocessing after the processing steps specified in the service have been executed.</br>\r\n<b>Note:</b> This option is for metadata services only. </li>\r\n</ul>\r\nThe delivery method is set on the Document Service only if the initial component or the post detection component\r\n(for Partner Document Services) has no outputs.\r\nOtherwise, the delivery method is set individually on each output.",
          "$ref" : "#/definitions/json_DeliveryMethod"
        },
        "enabled" : {
          "description" : "Specify whether this service is enabled.",
          "type" : "boolean"
        },
        "exchangePoint" : {
          "description" : "The Application Delivery used when <code>DELIVER_TO_APPLICATION</code> delivery method is selected.",
          "type" : "string"
        },
        "component" : {
          "description" : "Component object which provides the initial processing of the service.",
          "type" : "string"
        },
        "outputs" : {
          "description" : "List of document service output objects, which are used for configuring the message that is output from the component resource.",
          "type" : "string"
        },
        "exchangePointId" : {
          "description" : "The ID of the application delivery used when DELIVER_TO_APPLICATION delivery method is selected.",
          "type" : "string"
        },
        "componentId" : {
          "description" : "The ID of the Component which provides the initial processing of the Service.",
          "type" : "string"
        },
        "documentServiceAttributes" : {
          "description" : "List with all attributes for current document service",
          "type" : "string"
        },
        "documentServiceAttributesTemplate" : {
          "description" : "List with all template attributes for document services",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_emailB2biProducerExchangePointBean" : {
      "title" : "emailB2biProducerExchangePointBean",
      "description" : ""
    },
    "json_SftpDuplicateFileNameMode" : {
      "title" : "SftpDuplicateFileNameMode",
      "description" : "",
      "type" : "string"
    },
    "json_FtpCollisionMode" : {
      "title" : "FtpCollisionMode",
      "description" : "",
      "type" : "string"
    },
    "json_EdifactAckType" : {
      "title" : "EdifactAckType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_pesitConsumerExchangePointBean" : {
      "title" : "pesitConsumerExchangePointBean",
      "description" : ""
    },
    "json_X12MessagingIdBean" : {
      "title" : "X12MessagingIdBean",
      "description" : "User: cfistrate"
    },
    "json_UsernamePasswordCredentialsBean" : {
      "title" : "UsernamePasswordCredentialsBean",
      "description" : "Bean used in basic authentication",
      "properties" : {
        "username" : {
          "description" : "user name used in basic authentication",
          "type" : "string"
        },
        "password" : {
          "description" : "password for the user",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_OftpV2ConsumerExchangePointBean" : {
      "title" : "OftpV2ConsumerExchangePointBean",
      "description" : ""
    },
    "json_SyntaxRule" : {
      "title" : "SyntaxRule",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_isdnClientNetworkSettingsBean" : {
      "title" : "isdnClientNetworkSettingsBean",
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "json_WSUserBean" : {
      "title" : "WSUserBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "user" : {
          "description" : "The username of this Web Services user. Once the user is created, the username cannot be changed.",
          "type" : "string"
        },
        "password" : {
          "description" : "The password of this Web Services user.",
          "type" : "string"
        },
        "enabled" : {
          "description" : "The status of this user.",
          "type" : "boolean"
        },
        "policy" : {
          "description" : "The password policy assigned to this user.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_Throwable" : {
      "title" : "Throwable",
      "description" : "",
      "properties" : {
        "cause" : {
          "description" : "",
          "$ref" : "#/definitions/json_Throwable"
        },
        "suppressed" : {
          "description" : "",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_Throwable"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "stackTrace" : {
          "description" : "",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_StackTraceElement"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "localizedMessage" : {
          "description" : "",
          "type" : "string"
        },
        "message" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_InHouseOutboundAgreementBean" : {
      "title" : "InHouseOutboundAgreementBean",
      "description" : ""
    },
    "json_X509CertificateInfoBean" : {
      "title" : "X509CertificateInfoBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "certificateType" : {
          "description" : "Certificate type: <p/> <ul>\r\n<li>ROOT_CA</li>\r\n<li>INTERMEDIARY</li>\r\n<li>END_ENTITY</li>\r\n<li>SELF_SIGNED</li>\r\n</ul><p/>",
          "$ref" : "#/definitions/json_CertificateType"
        },
        "friendlyName" : {
          "description" : "A user-defined name for a certificate.  <p/>\r\nNaming the certificate can help identify the community or partner it belongs to.",
          "type" : "string"
        },
        "issuer" : {
          "description" : "The name of the person or entity that issued the certificate.<p/>",
          "type" : "string"
        },
        "issuerUniqueId" : {
          "description" : "Gets the <code>issuerUniqueID</code> value from the certificate.\r\nThe issuer unique identifier is present in the certificate\r\nto handle the possibility of reuse of issuer names over time. <p/>",
          "type" : "string"
        },
        "keyUsage" : {
          "description" : "Identifies the purpose of the key in the certificate, such as encipherment, digital signature or certificate signing. <p/>",
          "type" : "string"
        },
        "md5Fingerprint" : {
          "description" : "Fingerprints are a way to verify the source of a certificate. After you import or export a certificate, you can\r\ncontact your partner and ensure the MD5 fingerprints at both ends are identical. Do this before attempting to\r\nexchange documents. If the fingerprints do not match, one of the certificates might be corrupted or out of date. <p/>",
          "type" : "string"
        },
        "metadata" : {
          "description" : "Metadata for this certificate. <p/>",
          "$ref" : "#/definitions/json_MapType"
        },
        "publicKey" : {
          "description" : "Public key which is used to encrypt messages before sending. <p/>",
          "type" : "string"
        },
        "publicKeyAlgorithm" : {
          "description" : "An algorithm identifier that specifies the public key crypto system this key belongs to and any associated key parameters, such as key length <p/>",
          "type" : "string"
        },
        "publicKeyExtensions" : {
          "description" : "Extensions used to store additional information regarding the certificate holder and to define certificate usage. <p/>",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "publicKeyLength" : {
          "description" : "Key length indicates encryption strength, the larger the number the stronger the key. <p/>",
          "type" : "number"
        },
        "selfSigned" : {
          "description" : "Self-signed certificates are easily created. The primary disadvantage is lack of\r\nverification by a trusted third party.",
          "type" : "boolean"
        },
        "serialNumber" : {
          "description" : "The serial number uniquely identifies the certificate.  <p/>\r\nThe CA or entity that issued the certificate assigned this number. <p/>\r\nIf the issuer revokes a certificate, it can place the serial number on a certificate revocation (CRL) list.",
          "type" : "string"
        },
        "sha1Fingerprint" : {
          "description" : "Fingerprints are a way to verify the source of a certificate. After you import or export a certificate, you can\r\ncontact your partner and ensure the SHA1 fingerprints at both ends are identical. Do this before attempting to\r\nexchange documents. If the fingerprints do not match, one of the certificates might be corrupted or out of date. <p/>",
          "type" : "string"
        },
        "signatureAlgorithm" : {
          "description" : "The algorithm the CA used to sign the certificate. <p/>",
          "type" : "string"
        },
        "certificateState" : {
          "description" : "Indicates whether the certificate can be used. Valid states are: <p/> <ul>\r\n<li>PENDING</li>\r\n<li>OPERATIONAL</li>\r\n<li>EXPIRED</li>\r\n<li>FAILED</li>\r\n<li>REVOKED</li>\r\n<li>UNKNOWN</li>\r\n</ul>",
          "$ref" : "#/definitions/json_CertificateState"
        },
        "subject" : {
          "description" : "The name of person or entity who was issued the certificate. <p/>",
          "type" : "string"
        },
        "subjectUniqueId" : {
          "description" : "The subject key identifier extension provides a means of identifying\r\ncertificates that contain a particular public key.",
          "type" : "string"
        },
        "certificateUsage" : {
          "description" : "Describes the functions that the certificate can perform. The intended usage does not mean the certificate is\r\nbeing used for that purpose, only that it can be used for it. <p/> <ul>\r\n<li>ENCRYPTION</li>\r\n<li>VERIFICATION</li>\r\n<li>ANY</li>\r\n<li>OTHER</li>\r\n<li>NON_REPUDIATION</li>\r\n<li>DIGITAL_SIGNATURE</li>\r\n</ul>",
          "$ref" : "#/definitions/json_CertificateUsage"
        },
        "validFrom" : {
          "description" : "The date the certificate became valid. <p/>",
          "type" : "number"
        },
        "validTo" : {
          "description" : "The date the certificate expires, provided it is not compromised or revoked before that date. <p/>",
          "type" : "number"
        },
        "x509Version" : {
          "description" : "The version of the X.509 standard that applies to the certificate <p/>",
          "type" : "number"
        },
        "issuerInfo" : {
          "description" : "The issuer of this certificate. <p/>",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_documentServiceBean" : {
      "title" : "documentServiceBean",
      "description" : ""
    },
    "json_VdaAgreementBean" : {
      "title" : "VdaAgreementBean",
      "description" : ""
    },
    "xml_ns0_AS4HttpConsumerExchangePointBean" : {
      "title" : "AS4HttpConsumerExchangePointBean",
      "description" : ""
    },
    "json_Exception" : {
      "title" : "Exception",
      "description" : ""
    },
    "json_DeliverySettingsBean" : {
      "title" : "DeliverySettingsBean",
      "description" : ""
    },
    "xml_ns0_jmsProducerExchangePointBean" : {
      "title" : "jmsProducerExchangePointBean",
      "description" : ""
    },
    "json_MetadataTemplateConsumptionPropertiesBean" : {
      "title" : "MetadataTemplateConsumptionPropertiesBean",
      "description" : "Settings to attach meta-data to the messages the trading engine picks up from applications or receives from partner",
      "properties" : {
        "defaultMetadataTemplate" : {
          "description" : "A reference to a metadata template in the system, that is applied when a message is received. If the\r\nmetadata template isn't anymore in the system, we just log a warn a message.",
          "type" : "string"
        },
        "enabledByProtocol" : {
          "description" : "Indicates if the exchange point supports metadata template passed through the protocol.",
          "type" : "boolean"
        },
        "priorityOverFixedAttributes" : {
          "description" : "Indicates if the metadata template has priority than the fixed message attributes. In case the metadata\r\ntemplate has priority then we first apply the metadata defined in the message attributes then we apply the\r\nmetadata template ones (if there's a conflict between the same metadata, the metadata template one\r\nwins) and vice versa.",
          "type" : "boolean"
        },
        "metadataTemplatePolicy" : {
          "description" : "This option is available only for OFTP and PeSIT exchanges. You can specify the template name in the file name of the message\r\nsubmitted by the sender or by the setting <i>defaultMetadataTemplate</i> property</br>\r\nIndicates the way to deal with metadata template, it allows 3 values :\r\n<ul>\r\n<li><b>always</b> : Apply MMT provided by protocol. If unknown, the transfer is refused.</li>\r\n<li><b>ifKnown</b> : Apply MMT provided by protocol if it is known, else apply the default MMT (if set).</li>\r\n<li><b>never</b> : Ignore the MMT provided by the protocol. Always apply the default MMT (if set).</li>\r\n</ul>",
          "$ref" : "#/definitions/json_MetadataTemplatePolicy"
        }
      },
      "type" : "object"
    },
    "json_InlineProcessorBean" : {
      "title" : "InlineProcessorBean",
      "description" : "The extensible architecture of the trading engine enables system integrators to apply custom logic to in-process messages\r\nas an integral part of the processing pipeline. You can selectively apply the custom processing logic to inbound or outbound\r\nmessages at runtime, implemented as a user-defined Java class .",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "className" : {
          "description" : "User defined java class",
          "type" : "string"
        },
        "parameters" : {
          "description" : "Parameters for user defined java class",
          "type" : "string"
        },
        "description" : {
          "description" : "Documentation for this user defined functionality",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_versionInfo" : {
      "title" : "versionInfo",
      "description" : "A bean that holds information about the various application components and each components specific version/build number"
    },
    "xml_ns0_nachaAgreementBean" : {
      "title" : "nachaAgreementBean",
      "description" : ""
    },
    "xml_ns0_ackEnvelopingMode" : {
      "title" : "ackEnvelopingMode",
      "description" : "",
      "type" : "string"
    },
    "json_PrivateKeyCredentialsBean" : {
      "title" : "PrivateKeyCredentialsBean",
      "description" : "Private key credential used in PKI mechanism",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "username" : {
          "description" : "Key alias",
          "type" : "string"
        },
        "password" : {
          "description" : "Password key",
          "type" : "string"
        },
        "encodedClientPrivateKey" : {
          "description" : "Base64 encoded key",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_Level" : {
      "title" : "Level",
      "description" : "",
      "type" : "string"
    },
    "json_X25ServerNetworkSettingsBean" : {
      "title" : "X25ServerNetworkSettingsBean",
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "json_AbstractPasswordInfoException" : {
      "title" : "AbstractPasswordInfoException",
      "description" : "Use this class to show information about the password policies"
    },
    "json_MqSegmentationType" : {
      "title" : "MqSegmentationType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_ftpConsumerExchangePointBean" : {
      "title" : "ftpConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_privateKeyCredentialsBean" : {
      "title" : "privateKeyCredentialsBean",
      "description" : "Private key credential used in PKI mechanism"
    },
    "json_PesitPriority" : {
      "title" : "PesitPriority",
      "description" : "",
      "type" : "string"
    },
    "json_ConsumerExchangePointBean" : {
      "title" : "ConsumerExchangePointBean",
      "description" : ""
    },
    "json_DocumentAgreementBean" : {
      "title" : "DocumentAgreementBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "documentName" : {
          "description" : "Name of the Document Agreement. Once the Document Agreement has been created, the name cannot be\r\nchanged.",
          "type" : "string"
        },
        "enabled" : {
          "description" : "Specifies if this Document Agreement is enabled.",
          "type" : "boolean"
        },
        "type" : {
          "description" : "The type of the document you are exchanging with the current agreement.",
          "type" : "string"
        },
        "version" : {
          "description" : "The document format you are exchanging with the current agreement.",
          "type" : "string"
        },
        "documentFormat" : {
          "description" : "The message standard or format this document is based on. This is the format of the Agreement which\r\nowns this Document Agreement. The field cannot be modified.",
          "type" : "string"
        },
        "owningAgreement" : {
          "description" : "",
          "type" : "string"
        },
        "documentServiceId" : {
          "description" : "The ID of the Document Service that specifies the processing for this agreement.",
          "type" : "string"
        },
        "processingStep" : {
          "description" : "The name of the initial processing step for the document service",
          "type" : "string"
        },
        "documentAgreementAttributes" : {
          "description" : "List with all attributes for document agreements",
          "type" : "string"
        },
        "documentAgreementAttributesTemplate" : {
          "description" : "List with all template attributes for document agreements",
          "type" : "string"
        },
        "documentService" : {
          "description" : "The Service used on this Document Agreement",
          "type" : "string"
        },
        "outputs" : {
          "description" : "The outputs for this Document Agreement.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_pesitCompressionType" : {
      "title" : "pesitCompressionType",
      "description" : "",
      "type" : "string"
    },
    "json_OftpServerExchangePointBean" : {
      "title" : "OftpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_processingMode" : {
      "title" : "processingMode",
      "description" : "",
      "type" : "string"
    },
    "json_SftpProducerExchangePointBean" : {
      "title" : "SftpProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_errorMessage" : {
      "title" : "errorMessage",
      "description" : "This object will be returned whenever an error occurs in the server and a NON HTTP success(20x)\r\nstatus code is returned."
    },
    "json_InHouseInboundAgreementBean" : {
      "title" : "InHouseInboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_pickupGroupStatus" : {
      "title" : "pickupGroupStatus",
      "description" : "",
      "type" : "string"
    },
    "json_ErrorMessage" : {
      "title" : "ErrorMessage",
      "description" : "This object will be returned whenever an error occurs in the server and a NON HTTP success(20x)\r\nstatus code is returned.",
      "properties" : {
        "status" : {
          "description" : "String representation of the HTTP status code returned for this error",
          "$ref" : "#/definitions/json_Status_Response"
        },
        "responseMessage" : {
          "description" : "The message code that maps to the resource file to get the message description from.",
          "$ref" : "#/definitions/json_ResponseMessage"
        },
        "description" : {
          "description" : "Detailed description of the error.  This description is loaded from the resource file.",
          "type" : "string"
        },
        "trace" : {
          "description" : "An optional field that provides a stack trace from the server of the internal error.  This\r\nfield will only be populated if debug logging is enabled.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_attributeValueBean" : {
      "title" : "attributeValueBean",
      "description" : ""
    },
    "json_PasswordChangeBean" : {
      "title" : "PasswordChangeBean",
      "description" : "",
      "properties" : {
        "password" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_aleB2biProducerExchangePointBean" : {
      "title" : "aleB2biProducerExchangePointBean",
      "description" : ""
    },
    "json_ExchangePointScheduleBean" : {
      "title" : "ExchangePointScheduleBean",
      "description" : "Used to set times for making a pickup or delivery exchange inactive while keeping the transport in an enabled state.\r\nFor example, you could set a schedule to turn off the exchange for a few hours once a week to perform maintenance on a transport server.</br>\r\nBy default exchanges are active continuously. Schedules are added by day of the week and time of day.\r\nFor instance, if you select Monday 0:00 - 23:59, the exchange is on all day every Monday.\r\nIf you select Monday 8:30 - 11:30, the exchange is on from 8:30 to 11:30 a.m. and off all other times on Mondays.</br>\r\nTimes are expressed in 24-hour format: hh:mm or h:mm. Times are the time zone for your server.</br>\r\nIf you schedule down times for a pickup used by a community to receive messages from partners, you may want to inform partners when the transport is inactive.</br>\r\nIf you want an exchange to be active most of the time but turned off only some of the time, you may need many schedules specifying the daily times you want\r\nthe transport to be on or off. For example, to schedule a transport to turn off between 1 and 2 p.m. each Saturday, eight schedules are needed as follows:\r\nsix daily schedules calling for the transport to run continuously Sunday through Friday and two Saturday schedules, the first specifying the transport\r\nis on from midnight to 1 p.m. and the second specifying the transport is on from 2 p.m. to midnight.</br>\r\nMessages in queue when a transport turns off are suspended until the transport turns back on. For example, if a message is picked up from an application\r\nwhile the transport for sending to a partner is turned off, Message Tracker reports the status for the message as \"scheduled production.\"\r\nWhen the transport turns on again, processing of the message continues. Similarly, retries and resends for messages are suspended while the transport is off,\r\nbut they resume at the point where they were suspended when the transport turns back on.</br>\r\nTo use schedules, make sure message backups are enabled for the affected transports.\r\nUnless backups are enabled, messages in process when a transport turns off cannot be queued to resume processing when the transport turns on again.</br>\r\nIf you trade via the AS2 message protocol and request asynchronous receipts, your community cannot receive receipts from partners\r\nwhen the sending transport is turned off. To avoid this, request synchronous receipts or schedule a transport to be off when no messages are in process.",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "dayOfWeek" : {
          "description" : "A day between 1-7 to activate this schedule",
          "type" : "number"
        },
        "startHour" : {
          "description" : "An hour for starting this schedule. Between 0-23",
          "type" : "number"
        },
        "startMinute" : {
          "description" : "A minute for starting this schedule. Between 0-59",
          "type" : "number"
        },
        "endMinute" : {
          "description" : "A minute for stopping this schedule. Between 0-59",
          "type" : "number"
        },
        "endHour" : {
          "description" : "An hour for stopping this schedule. Between 0-23",
          "type" : "number"
        }
      },
      "type" : "object"
    },
    "xml_ns0_nachaDocumentAgreementBean" : {
      "title" : "nachaDocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_oftpV1SharedProducerExchangePointBean" : {
      "title" : "oftpV1SharedProducerExchangePointBean",
      "description" : ""
    },
    "json_WebtraderUserBean" : {
      "title" : "WebtraderUserBean",
      "description" : "",
      "properties" : {
        "preferences" : {
          "description" : "",
          "$ref" : "#/definitions/json_MapType"
        },
        "primaryContact" : {
          "description" : "",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "alternateContact" : {
          "description" : "",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "sponsorContact" : {
          "description" : "",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "userId" : {
          "description" : "",
          "type" : "string"
        },
        "ownerName" : {
          "description" : "",
          "type" : "string"
        },
        "ownerId" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_ImmutableProducerExchangePointBean" : {
      "title" : "ImmutableProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_pesitIntegrationDeliverySettingsBean" : {
      "title" : "pesitIntegrationDeliverySettingsBean",
      "description" : ""
    },
    "json_FtpUserBean" : {
      "title" : "FtpUserBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "password" : {
          "description" : "Get the user's password  to connect to the server.",
          "type" : "string"
        },
        "userName" : {
          "description" : "The name of the user.",
          "type" : "string"
        },
        "enabled" : {
          "description" : "Returns if this FTP user is enabled.",
          "type" : "boolean"
        },
        "hasCredentials" : {
          "description" : "Returns if this FTP user has credentials. The user may not have credentials if credentials should be read from an external source.",
          "type" : "boolean"
        },
        "passwordPolicyName" : {
          "description" : "Get the password policy to assign to the user.",
          "type" : "string"
        },
        "ftpSubDirectories" : {
          "description" : "The FTP subdirectories associated with the user. A specific combination of user and directory can be associated with only one exchange.",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "json_CommunityBean" : {
      "title" : "CommunityBean",
      "description" : ""
    },
    "xml_ns0_ftpServerProducerExchangePointBean" : {
      "title" : "ftpServerProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_hl7v2OutboundAgreementBean" : {
      "title" : "hl7v2OutboundAgreementBean",
      "description" : ""
    },
    "json_HttpServerSettingsBean" : {
      "title" : "HttpServerSettingsBean",
      "description" : ""
    },
    "json_EmailUserBean" : {
      "title" : "EmailUserBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "emailAddress" : {
          "description" : "The email address of this SMTP user. Once created, it cannot be changed.\r\nThe email address allows wildcards:\r\n<ul>\r\n<li>? - matches any character</li>\r\n<li>* - matches any characters occurring zero or more times </li>\r\n</ul>\r\nExamples: <code>user@host.com; *@host.com; ??user@*.com</code>.",
          "type" : "string"
        },
        "enabled" : {
          "description" : "The status of this user.",
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "xml_ns0_priorityCode" : {
      "title" : "priorityCode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_sshServerAuthenticationMode" : {
      "title" : "sshServerAuthenticationMode",
      "description" : "",
      "type" : "string"
    },
    "json_FtpProcessingMode" : {
      "title" : "FtpProcessingMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_sftpDuplicateFileNameMode" : {
      "title" : "sftpDuplicateFileNameMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_sftpProducerExchangePointBean" : {
      "title" : "sftpProducerExchangePointBean",
      "description" : ""
    },
    "json_NachaAgreementBean" : {
      "title" : "NachaAgreementBean",
      "description" : ""
    },
    "xml_ns0_jmsPollingExchangePointBean" : {
      "title" : "jmsPollingExchangePointBean",
      "description" : ""
    },
    "xml_ns0_communityBean" : {
      "title" : "communityBean",
      "description" : ""
    },
    "xml_ns0_passwordChangeBean" : {
      "title" : "passwordChangeBean",
      "description" : ""
    },
    "json_HttpConsumerExchangePointBean" : {
      "title" : "HttpConsumerExchangePointBean",
      "description" : ""
    },
    "json_X12AgreementBean" : {
      "title" : "X12AgreementBean",
      "description" : ""
    },
    "json_ImmutableServerSettingsBean" : {
      "title" : "ImmutableServerSettingsBean",
      "description" : ""
    },
    "json_FtpConsumerExchangePointBean" : {
      "title" : "FtpConsumerExchangePointBean",
      "description" : ""
    },
    "json_OutOfSequenceActionType_x12" : {
      "title" : "OutOfSequenceActionType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_m3TriggerB2biConsumerExchangePointBean" : {
      "title" : "m3TriggerB2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_UriBuilder" : {
      "title" : "UriBuilder",
      "description" : "",
      "type" : "object"
    },
    "xml_ns0_mllpProducerExchangePointBean" : {
      "title" : "mllpProducerExchangePointBean",
      "description" : ""
    },
    "json_InvalidRequestException" : {
      "title" : "InvalidRequestException",
      "description" : "Exception that maps to HTTP 400 return code"
    },
    "json_XmlInboundAgreementBean" : {
      "title" : "XmlInboundAgreementBean",
      "description" : ""
    },
    "json_WebTraderPasswordChangeFailure" : {
      "title" : "WebTraderPasswordChangeFailure",
      "description" : "Use this class to show information about the password policies"
    },
    "xml_ns0_processingSeverity" : {
      "title" : "processingSeverity",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_mllpServerSettingsBean" : {
      "title" : "mllpServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_tradacomsInboundAgreementBean" : {
      "title" : "tradacomsInboundAgreementBean",
      "description" : ""
    },
    "json_PesitDataEncodingType" : {
      "title" : "PesitDataEncodingType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_managedPGPPublicKeyBean" : {
      "title" : "managedPGPPublicKeyBean",
      "description" : ""
    },
    "json_NachaInboundAgreementBean" : {
      "title" : "NachaInboundAgreementBean",
      "description" : ""
    },
    "json_VdaDocumentAgreementBean" : {
      "title" : "VdaDocumentAgreementBean",
      "description" : ""
    },
    "json_X12DocumentAgreementBean" : {
      "title" : "X12DocumentAgreementBean",
      "description" : ""
    },
    "json_FileRejectionRule" : {
      "title" : "FileRejectionRule",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_tcpNetworkSettingsBean" : {
      "title" : "tcpNetworkSettingsBean",
      "description" : ""
    },
    "xml_ns0_documentServiceOutputBean" : {
      "title" : "documentServiceOutputBean",
      "description" : ""
    },
    "json_HttpProxyBean" : {
      "title" : "HttpProxyBean",
      "description" : "",
      "properties" : {
        "usernamePasswordCredentials" : {
          "description" : "The user name and password to connect to the server. Credentials are used if the proxy requires user name\r\nand password for basic authentication.",
          "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
        },
        "port" : {
          "description" : "The port through which outbound HTTP traffic is routed.",
          "type" : "number"
        },
        "host" : {
          "description" : "The fully qualified domain name or IP address of the HTTP proxy.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_Hl7v2InboundAgreementBean" : {
      "title" : "Hl7v2InboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_oftpServerExchangePointBean" : {
      "title" : "oftpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_response" : {
      "title" : "response",
      "description" : ""
    },
    "xml_ns0_documentAgreementOutputPartnerBean" : {
      "title" : "documentAgreementOutputPartnerBean",
      "description" : ""
    },
    "xml_ns0_hl7v2InboundAgreementBean" : {
      "title" : "hl7v2InboundAgreementBean",
      "description" : ""
    },
    "json_PollingExchangePointBean" : {
      "title" : "PollingExchangePointBean",
      "description" : ""
    },
    "json_XmlOutboundAgreementBean" : {
      "title" : "XmlOutboundAgreementBean",
      "description" : ""
    },
    "json_DocumentServiceOutputBean" : {
      "title" : "DocumentServiceOutputBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "name" : {
          "description" : "The name of the document service output.",
          "type" : "string"
        },
        "deliveryMethod" : {
          "description" : "The delivery method for this service. You can use one of the following values:\r\n<ul>\r\n<li><b>DELIVER_TO_PARTNER</b> </br> Select this option if the message is to be sent to a trading partner. This option is\r\nthe default setting for the following document formats: MEC XML, XML, In-house and IDoc.</li>\r\n<li><b>RETURN_TO_SENDER</b> </br> Select this option if you are creating a service to support Web Services or MLLP trading,\r\nand the service requires a return exchange to the originating party.</li>\r\n<li><b>DELIVER_TO_APPLICATION</b> </br> Select this option if the delivery endpoint of the document exchange is a back-end\r\napplication. This option is the default setting for the following document formats: EDIFACT, X12, VDA and\r\nTRADACOMS. If you select this option, you must also provide the target application for the document delivery.</li>\r\n<li><b>CONTINUE_TO_NEXT_STEP</b> </br> Select this option if the message is to be sent to the next content-based\r\nprocessing after the processing steps specified in the service have been executed.</br>\r\n<b>Note:</b> This option is for metadata services only. </li>\r\n</ul>",
          "$ref" : "#/definitions/json_DeliveryMethod"
        },
        "exchangePointId" : {
          "description" : "The ID of the Application Delivery used when <code>DELIVER_TO_APPLICATION</code> delivery method is selected.",
          "type" : "string"
        },
        "exchangePoint" : {
          "description" : "The Application Delivery used when DELIVER_TO_APPLICATION delivery method is selected.",
          "type" : "string"
        },
        "outputType" : {
          "description" : "The format of the document output from the initial component of this service.",
          "type" : "string"
        },
        "components" : {
          "description" : "Configuration for document, post enveloping and post transfer Components which specify steps in the processing sequence.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_b2biComponentBean" : {
      "title" : "b2biComponentBean",
      "description" : ""
    },
    "json_DeliveryMethod" : {
      "title" : "DeliveryMethod",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_x12InboundFunctionalGroupBean" : {
      "title" : "x12InboundFunctionalGroupBean",
      "description" : "Author: srybak\r\nDate: 5/23/14"
    },
    "xml_ns0_secureTcpNetworkSettingsBean" : {
      "title" : "secureTcpNetworkSettingsBean",
      "description" : ""
    },
    "json_ProcessingSeverity" : {
      "title" : "ProcessingSeverity",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_pesitPriority" : {
      "title" : "pesitPriority",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_identifier" : {
      "title" : "identifier",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_emailAuthenticationType" : {
      "title" : "emailAuthenticationType",
      "description" : "",
      "type" : "string"
    },
    "json_IdocInboundAgreementBean" : {
      "title" : "IdocInboundAgreementBean",
      "description" : ""
    },
    "json_CertificateUsage" : {
      "title" : "CertificateUsage",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_x12InboundAgreementBean" : {
      "title" : "x12InboundAgreementBean",
      "description" : ""
    },
    "json_BusinessProtocol" : {
      "title" : "BusinessProtocol",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_attributeTemplateBean" : {
      "title" : "attributeTemplateBean",
      "description" : ""
    },
    "xml_ns0_httpProxyBean" : {
      "title" : "httpProxyBean",
      "description" : ""
    },
    "json_PesitProducerExchangePointBean" : {
      "title" : "PesitProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_vdaOutboundAgreementBean" : {
      "title" : "vdaOutboundAgreementBean",
      "description" : ""
    },
    "json_IsdnClientNetworkSettingsBean" : {
      "title" : "IsdnClientNetworkSettingsBean",
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "json_SftpConsumerExchangePointBean" : {
      "title" : "SftpConsumerExchangePointBean",
      "description" : ""
    },
    "json_EdifactDocumentAgreementBean" : {
      "title" : "EdifactDocumentAgreementBean",
      "description" : ""
    },
    "json_VdaMessagingIdBean" : {
      "title" : "VdaMessagingIdBean",
      "description" : ""
    },
    "json_PopConsumerExchangePointBean" : {
      "title" : "PopConsumerExchangePointBean",
      "description" : ""
    },
    "json_AckEnvelopingMode" : {
      "title" : "AckEnvelopingMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_sftpServerExchangePointBean" : {
      "title" : "sftpServerExchangePointBean",
      "description" : ""
    },
    "json_PickupGroupStatus" : {
      "title" : "PickupGroupStatus",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_ftpUserBean" : {
      "title" : "ftpUserBean",
      "description" : ""
    },
    "json_OftpV2ProducerExchangePointBean" : {
      "title" : "OftpV2ProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_aleB2biConsumerExchangePointBean" : {
      "title" : "aleB2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_MetadataCondition" : {
      "title" : "MetadataCondition",
      "description" : "",
      "type" : "string"
    },
    "json_StackTraceElement" : {
      "title" : "StackTraceElement",
      "description" : "",
      "properties" : {
        "fileName" : {
          "description" : "",
          "type" : "string"
        },
        "className" : {
          "description" : "",
          "type" : "string"
        },
        "lineNumber" : {
          "description" : "",
          "type" : "number"
        },
        "methodName" : {
          "description" : "",
          "type" : "string"
        },
        "nativeMethod" : {
          "description" : "",
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "json_MllpProducerExchangePointBean" : {
      "title" : "MllpProducerExchangePointBean",
      "description" : ""
    },
    "json_ImmutableConsumerExchangePointBean" : {
      "title" : "ImmutableConsumerExchangePointBean",
      "description" : ""
    },
    "json_HttpServerB2biProducerExchangePointBean" : {
      "title" : "HttpServerB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_documentServiceOutputComponentBean" : {
      "title" : "documentServiceOutputComponentBean",
      "description" : ""
    },
    "json_MqProducerExchangePointBean" : {
      "title" : "MqProducerExchangePointBean",
      "description" : ""
    },
    "json_ManagedPGPSignatureBean" : {
      "title" : "ManagedPGPSignatureBean",
      "description" : "",
      "properties" : {
        "keyId" : {
          "description" : "The keyId is string identifier for the Public Key.",
          "type" : "string"
        },
        "level" : {
          "description" : "A signer indicates a level of trust ranging from low to high.\r\nFor example, a self-signed certificate is by default signed\r\nby the community that generated the certificate within B2Bi.\r\nThe community gives the certificate a positive level, which\r\nis a high level of trust.",
          "type" : "string"
        },
        "userName" : {
          "description" : "The username refers to Community name and email",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_SftpServerExchangePointBean" : {
      "title" : "SftpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_addressingRuleAction" : {
      "title" : "addressingRuleAction",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_vdaMessagingIdBean" : {
      "title" : "vdaMessagingIdBean",
      "description" : ""
    },
    "json_MetadataConditionBean" : {
      "title" : "MetadataConditionBean",
      "description" : ""
    },
    "json_B2biComponentBean" : {
      "title" : "B2biComponentBean",
      "description" : "",
      "properties" : {
        "resourceName" : {
          "description" : "The name of the resource that provides the functionality for this component.",
          "type" : "string"
        },
        "resourceAbsFilePath" : {
          "description" : "The absolute file path for the resource that provides the functionality for this component.",
          "type" : "string"
        },
        "resourceType" : {
          "description" : "The type of the resource that provides the functionality for this component.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_X12InboundAgreementBean" : {
      "title" : "X12InboundAgreementBean",
      "description" : ""
    },
    "json_NachaMessagingIdBean" : {
      "title" : "NachaMessagingIdBean",
      "description" : ""
    },
    "json_M3TriggerB2biConsumerExchangePointBean" : {
      "title" : "M3TriggerB2biConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_oftpConsumerExchangePointBean" : {
      "title" : "oftpConsumerExchangePointBean",
      "description" : ""
    },
    "json_HttpResponseB2biConsumerExchangePointBean" : {
      "title" : "HttpResponseB2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_GroupTimeoutActionType_x12" : {
      "title" : "GroupTimeoutActionType",
      "description" : "",
      "type" : "string"
    },
    "json_PesitIdentificationBean" : {
      "title" : "PesitIdentificationBean",
      "description" : "",
      "properties" : {
        "routingIdentifier" : {
          "description" : "The Routing Id belonging to a partner or a community. For Application Delivery, use PesitReceiverID instead.</br>\r\n<b>Note:</b> If missing, allow any valid routing Id to be used.  <p/>",
          "type" : "string"
        },
        "password" : {
          "description" : "Password to be used. This should be the password expected from the partner on a remote identification and\r\nthe password the partner expects for the local identification. </br>\r\n<b>Note:</b> This field is used only on trading part. <p/>",
          "type" : "string"
        },
        "overridePasswordSettings" : {
          "description" : "Set to true to specify a password. <p/>",
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "xml_ns0_popConsumerExchangePointBean" : {
      "title" : "popConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_serverSettingsBean" : {
      "title" : "serverSettingsBean",
      "description" : ""
    },
    "json_InHouseMessagingIdBean" : {
      "title" : "InHouseMessagingIdBean",
      "description" : ""
    },
    "json_AttributeValueBean" : {
      "title" : "AttributeValueBean",
      "description" : "",
      "properties" : {
        "name" : {
          "description" : "A name for this attribute to identify it.</br> <b>Note:</b> it is read only",
          "type" : "string"
        },
        "usedForSearching" : {
          "description" : "If true, this attribute is used for searching at runtime.</br> <b>Note:</b> it is read only",
          "type" : "boolean"
        },
        "usedForProcessing" : {
          "description" : "If true, this attribute is used for processing at runtime.</br> <b>Note:</b> it is read only",
          "type" : "boolean"
        },
        "clearedAtRuntime" : {
          "description" : "Set this attribute to true in order to clear it from documents at runtime.",
          "type" : "boolean"
        },
        "values" : {
          "description" : "Set the value/values in case of MULTISELECT.",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "json_OftpSharedProducerExchangePointBean" : {
      "title" : "OftpSharedProducerExchangePointBean",
      "description" : ""
    },
    "json_EmailAuthenticationType" : {
      "title" : "EmailAuthenticationType",
      "description" : "",
      "type" : "string"
    },
    "json_SftpSubDirectoryBean" : {
      "title" : "SftpSubDirectoryBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "sftpUserName" : {
          "description" : "The user name to connect to the server. The name is used not only for connection, but also represents\r\nthe home directory for the SFTP account.",
          "type" : "string"
        },
        "subDirectory" : {
          "description" : "Subdirectory associated to the SFTP account where messages will be stored. A specific combination of user\r\nand directory can be associated with only one exchange.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_documentAgreementBean" : {
      "title" : "documentAgreementBean",
      "description" : ""
    },
    "json_TradacomDocumentAgreementBean" : {
      "title" : "TradacomDocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_groupTimeFormatType" : {
      "title" : "groupTimeFormatType",
      "description" : "",
      "type" : "string"
    },
    "json_MetadataProfileBean" : {
      "title" : "MetadataProfileBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "enabled" : {
          "description" : "",
          "type" : "boolean"
        },
        "name" : {
          "description" : "",
          "type" : "string"
        },
        "serviceId" : {
          "description" : "",
          "type" : "string"
        },
        "metadataRules" : {
          "description" : "",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_MetadataProfileConditionBean"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "outputs" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_inHouseMessagingIdBean" : {
      "title" : "inHouseMessagingIdBean",
      "description" : ""
    },
    "json_SmtpServerDefinitionBean" : {
      "title" : "SmtpServerDefinitionBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "host" : {
          "description" : "Fully qualified domain name or IP address for the global external server, which is used by default for sending e-mail messages.\r\n<b>Required.</b>",
          "type" : "string"
        },
        "port" : {
          "description" : "The port used by the global external server. The default values is 25. <b>Required.</b>",
          "type" : "number"
        },
        "friendlyName" : {
          "description" : "The friendly name for the global external server. <b>Read-only.</b>",
          "type" : "string"
        },
        "usernamePasswordCredentials" : {
          "description" : "User name and password to connect to the server. Usually, SMTP servers do not require user names and passwords for sending messages.",
          "$ref" : "#/definitions/json_UsernamePasswordCredentialsBean"
        },
        "ssl" : {
          "description" : "Regular or secured channel with authentication.",
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "json_PluggableServerExchangePointBean" : {
      "title" : "PluggableServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_businessProtocol" : {
      "title" : "businessProtocol",
      "description" : "",
      "type" : "string"
    },
    "json_ProcessingBean" : {
      "title" : "ProcessingBean",
      "description" : "",
      "properties" : {
        "severity" : {
          "description" : "The severity of the log event",
          "$ref" : "#/definitions/json_ProcessingSeverity"
        },
        "coreId" : {
          "description" : "The parent core id of the message",
          "type" : "string"
        },
        "message" : {
          "description" : "The description of the log event",
          "type" : "string"
        },
        "loggerId" : {
          "description" : "The logger id of the message",
          "type" : "string"
        },
        "timestamp" : {
          "description" : "The timestamp of the log event",
          "type" : "number"
        }
      },
      "type" : "object"
    },
    "json_B2biConsumerExchangePointBean" : {
      "title" : "B2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_RecipientRefPasswordQualifier" : {
      "title" : "RecipientRefPasswordQualifier",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_sftpCollisionMode" : {
      "title" : "sftpCollisionMode",
      "description" : "",
      "type" : "string"
    },
    "json_SinkB2biProducerExchangePointBean" : {
      "title" : "SinkB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_mimeEmailB2biProducerExchangePointBean" : {
      "title" : "mimeEmailB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_idocMessagingIdBean" : {
      "title" : "idocMessagingIdBean",
      "description" : ""
    },
    "json_OftpServerSettingsBean" : {
      "title" : "OftpServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_sequenceNumberBean" : {
      "title" : "sequenceNumberBean",
      "description" : ""
    },
    "xml_ns0_edifactOutboundFunctionalGroupBean" : {
      "title" : "edifactOutboundFunctionalGroupBean",
      "description" : ""
    },
    "xml_ns0_nachaMessagingIdBean" : {
      "title" : "nachaMessagingIdBean",
      "description" : ""
    },
    "xml_ns0_metadataCondition" : {
      "title" : "metadataCondition",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_deliveryMethod" : {
      "title" : "deliveryMethod",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_pollingExchangePointBean" : {
      "title" : "pollingExchangePointBean",
      "description" : ""
    },
    "xml_ns0_tradacomsOutboundAgreementBean" : {
      "title" : "tradacomsOutboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_pluggableProducerExchangePointBean" : {
      "title" : "pluggableProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_ftpServerSettingsBean" : {
      "title" : "ftpServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_messageType" : {
      "title" : "messageType",
      "description" : "",
      "type" : "string"
    },
    "json_UnAuthorizedException" : {
      "title" : "UnAuthorizedException",
      "description" : "Exception that maps to HTTP 401 return code"
    },
    "json_RuntimeException" : {
      "title" : "RuntimeException",
      "description" : ""
    },
    "json_EdifactMessagingIdBean" : {
      "title" : "EdifactMessagingIdBean",
      "description" : ""
    },
    "json_PesitCompressionType" : {
      "title" : "PesitCompressionType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_x25ServerNetworkSettingsBean" : {
      "title" : "x25ServerNetworkSettingsBean",
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "xml_ns0_serverExchangePointBean" : {
      "title" : "serverExchangePointBean",
      "description" : ""
    },
    "json_ResponseMessage" : {
      "title" : "ResponseMessage",
      "description" : "",
      "properties" : {
        "code" : {
          "description" : "",
          "type" : "string"
        },
        "level" : {
          "description" : "",
          "$ref" : "#/definitions/json_Level"
        },
        "arguments" : {
          "description" : "",
          "$ref" : "#/definitions/json_MapType"
        },
        "description" : {
          "description" : "",
          "type" : "string"
        },
        "childMessages" : {
          "description" : "",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_ResponseMessage"
            },
            "type" : "array"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "json_MetadataTemplatePolicy" : {
      "title" : "MetadataTemplatePolicy",
      "description" : "",
      "type" : "string"
    },
    "json_ServerProducerExchangePointBean" : {
      "title" : "ServerProducerExchangePointBean",
      "description" : ""
    },
    "json_ComponentBeanMixIn" : {
      "title" : "ComponentBeanMixIn",
      "description" : "Author: srybak\r\nDate: 4/8/14",
      "type" : "object"
    },
    "xml_ns0_fileSystemConsumerExchangePointBean" : {
      "title" : "fileSystemConsumerExchangePointBean",
      "description" : ""
    },
    "json_ServerSettingsBean" : {
      "title" : "ServerSettingsBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "bindAddresses" : {
          "description" : "The DMZ hosts for the machines in the cluster.",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "forwardingEnabled" : {
          "description" : "Specify whether connections to this server should be proxied through DMZ nodes.\r\nIf this option is set to <code>true</code>, the external firewall or load balancer sends inbound connections to\r\nSecure Relay DMZ nodes rather than directly to embedded servers in the protected network.",
          "type" : "boolean"
        },
        "forwardingPorts" : {
          "description" : "Ports for DMZ forwarding. In the simplest case, there is one DMZ port with the same value as the corresponding\r\nembedded server port in the protected network. If you add a machine to your cluster, another DMZ port\r\nis automatically added in sequence. This happens because every machine in the cluster that can host the embedded\r\nserver must be assigned a unique corresponding port in the DMZ.\r\n<p/>\r\nFor example, if the server port is 4080 and there are two cluster machines, two ports would be exposed on every\r\nDMZ node, e.g. 4080 and 4081. If you add machines to the cluster, you should update your firewall or load\r\nbalancer configuration accordingly.",
          "items" : {
            "items" : {
              "type" : "number"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "ipAddressCheckEnabled" : {
          "description" : "Specify whether the trading engine should check partners' IP addresses against a whitelist of authorized IP\r\naddresses. Connections from unknown IP addresses are not allowed.",
          "type" : "boolean"
        },
        "ipAddressPartnerMatchEnabled" : {
          "description" : "When IP address checking is enabled, specify whether the router agent should check if the partner is registered\r\nto the IP address. If this option is set to <code>false</code>, the agent only checks the user's credentials.\r\n<p/>\r\nThis control is not available to all types of servers.",
          "type" : "boolean"
        },
        "name" : {
          "description" : "The name of the transport server, used to distinguish it from other embedded servers.",
          "type" : "string"
        },
        "readTimeoutSeconds" : {
          "description" : "The maximum number of seconds the server waits when reading data from a partner. Default value is 30 seconds.",
          "type" : "number"
        },
        "securityTerminationEnabled" : {
          "description" : "Specify whether various security functions should be performed in the DMZ. If connections are via SSL, the secure\r\nconnection is terminated at the router agent in the DMZ. For delivery exchanges that require a user name and\r\npassword to connect (for example, FTP, SFTP or WebDAV), the router agent authenticates the user.",
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "xml_ns0_messagingIdBean" : {
      "title" : "messagingIdBean",
      "description" : ""
    },
    "json_SequenceNumberBean" : {
      "title" : "SequenceNumberBean",
      "description" : "",
      "properties" : {
        "value" : {
          "description" : "The counter value for the specific generator described by the identifier.",
          "type" : "number"
        },
        "identifier" : {
          "description" : "The name of the generator for which the value will be considered. Possible values are:<p/>\r\n\r\n<ul><li>_0020 - Interchange control reference generator. Valid for Edifact Outbound Agreement.</li>\r\n<li>_0062  - Message reference number generator. Valid for Edifact Outbound Agreement.</li>\r\n<li>UNG0048 - Reference Number Generator. Valid for Edifact Outbound  Functional Group Agreement.</li>\r\n<li>SNRF - Sender transmission reference generator. Valid for Tradacoms Outbound Agreement.</li>\r\n<li>FIELD05 - Transmission number old. Valid for VDA Inbound Agreement.</li>\r\n<li>FIELD06 - Transmission number new generator. Valid for VDA Outbound Agreement.</li>\r\n<li>LATEST_TRANSMISSION_NUMBER - Latest transmission number new. Valid for VDA Outbound Agreement.</li>\r\n<li>NEXT_GROUP_CONTROL - Next expected group control. Valid for Edifact Inbound Agreement, X12 Inbound Agreement.</li>\r\n<li>NEXT_INTERCHANGE_CONTROL - Next expected interchange control. Valid for Edifact Inbound Agreement, X12 Inbound Agreement.</li>\r\n<li>MSH00010 - Message control ID. Valid for HL7v2 Inbound Agreement, HL7v2 Outbound Agreement.</li>\r\n<li>MSH00013 - Sequence number generator. Valid for HL7v2 Outbound Agreement.</li>\r\n<li>NEXT_INTERCHANGE_SEQUENCE_NUMBER - Next expected sequence number. Valid for HL7v2 Inbound Agreement.</li>\r\n<li>ISA13 - Interchange control number generator. Valid for X12 Inbound Agreement, X12 Outbound Agreement.</li>\r\n<li>GS06 -  Group control number generator. Valid for X12 Inbound Agreement, X12 Outbound Functional Group Agreement.</li>\r\n</ul>",
          "$ref" : "#/definitions/json_Identifier"
        }
      },
      "type" : "object"
    },
    "xml_ns0_addressingRuleBean" : {
      "title" : "addressingRuleBean",
      "description" : "Use this class to specify sender and receiver rules for consumed files"
    },
    "xml_ns0_processing" : {
      "title" : "processing",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_ftpDeliveryFilenameMode" : {
      "title" : "ftpDeliveryFilenameMode",
      "description" : "",
      "type" : "string"
    },
    "json_SecureTcpNetworkSettingsBean" : {
      "title" : "SecureTcpNetworkSettingsBean",
      "description" : ""
    },
    "json_X12OutboundAgreementBean" : {
      "title" : "X12OutboundAgreementBean",
      "description" : ""
    },
    "json_ComponentInfo" : {
      "title" : "ComponentInfo",
      "description" : "",
      "properties" : {
        "name" : {
          "description" : "",
          "type" : "string"
        },
        "version" : {
          "description" : "",
          "type" : "string"
        },
        "build" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_WebTraderUnAuthorizedException" : {
      "title" : "WebTraderUnAuthorizedException",
      "description" : "Exception that maps to HTTP 401 return code"
    },
    "json_UserPasswordChangeBean" : {
      "title" : "UserPasswordChangeBean",
      "description" : "",
      "properties" : {
        "newPassword" : {
          "description" : "",
          "type" : "string"
        },
        "oldPassword" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_smtpServerSettingsBean" : {
      "title" : "smtpServerSettingsBean",
      "description" : ""
    },
    "json_EmailB2biConsumerExchangePointBean" : {
      "title" : "EmailB2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_SmtpProducerExchangePointBean" : {
      "title" : "SmtpProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_httpProducerExchangePointBean" : {
      "title" : "httpProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_ackEnvelopingType" : {
      "title" : "ackEnvelopingType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_messageBean" : {
      "title" : "messageBean",
      "description" : ""
    },
    "json_WebApplicationException" : {
      "title" : "WebApplicationException",
      "description" : ""
    },
    "xml_ns0_WSUserBean" : {
      "title" : "WSUserBean",
      "description" : ""
    },
    "xml_ns0_ftpB2biProducerExchangePointBean" : {
      "title" : "ftpB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_integrationDeliverySettingsBean" : {
      "title" : "integrationDeliverySettingsBean",
      "description" : ""
    },
    "xml_ns0_certificateState" : {
      "title" : "certificateState",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_idocOutboundAgreementBean" : {
      "title" : "idocOutboundAgreementBean",
      "description" : ""
    },
    "json_JmsListeningExchangePointBean" : {
      "title" : "JmsListeningExchangePointBean",
      "description" : ""
    },
    "xml_ns0_ftpProcessingMode" : {
      "title" : "ftpProcessingMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_ftpServerExchangePointBean" : {
      "title" : "ftpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_addressingRulesBean" : {
      "title" : "addressingRulesBean",
      "description" : "Used to configure how the system determines who is sending/receiving the message."
    },
    "json_SshServerSettingsBean" : {
      "title" : "SshServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_httpB2biConsumerExchangePointBean" : {
      "title" : "httpB2biConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_x12OutboundFunctionalGroupBean" : {
      "title" : "x12OutboundFunctionalGroupBean",
      "description" : "Author: srybak\r\nDate: 5/23/14"
    },
    "json_GroupTimeoutActionType" : {
      "title" : "GroupTimeoutActionType",
      "description" : "",
      "type" : "string"
    },
    "json_PopAuthenticationType" : {
      "title" : "PopAuthenticationType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_metadataProfileConditionBean" : {
      "title" : "metadataProfileConditionBean",
      "description" : ""
    },
    "xml_ns0_vdaAgreementBean" : {
      "title" : "vdaAgreementBean",
      "description" : ""
    },
    "json_FtpDeliveryFilenameMode" : {
      "title" : "FtpDeliveryFilenameMode",
      "description" : "",
      "type" : "string"
    },
    "json_NetworkSettingsBean" : {
      "title" : "NetworkSettingsBean",
      "description" : "",
      "type" : "object"
    },
    "xml_ns0_mqProducerExchangePointBean" : {
      "title" : "mqProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_nachaOutboundAgreementBean" : {
      "title" : "nachaOutboundAgreementBean",
      "description" : ""
    },
    "json_MetadataProfileOutputToNextStepBean" : {
      "title" : "MetadataProfileOutputToNextStepBean",
      "description" : ""
    },
    "json_GenerateAckRuleType" : {
      "title" : "GenerateAckRuleType",
      "description" : "",
      "type" : "string"
    },
    "json_InHouseAgreementBean" : {
      "title" : "InHouseAgreementBean",
      "description" : ""
    },
    "xml_ns0_ftpSubDirectoryBean" : {
      "title" : "ftpSubDirectoryBean",
      "description" : ""
    },
    "json_CertificateState" : {
      "title" : "CertificateState",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_sshServerSettingsBean" : {
      "title" : "sshServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_documentAgreementOutputAgreementBean" : {
      "title" : "documentAgreementOutputAgreementBean",
      "description" : ""
    },
    "json_PartnerDocumentServiceBean" : {
      "title" : "PartnerDocumentServiceBean",
      "description" : ""
    },
    "xml_ns0_documentAgreementOutputType" : {
      "title" : "documentAgreementOutputType",
      "description" : "",
      "type" : "string"
    },
    "json_ConjunctorBean" : {
      "title" : "ConjunctorBean",
      "description" : ""
    },
    "json_ActionResult" : {
      "title" : "ActionResult",
      "description" : "",
      "properties" : {
        "bean" : {
          "description" : "",
          "type" : "string"
        },
        "messages" : {
          "description" : "",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_ResponseMessage"
            },
            "type" : "array"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "json_EdifactInboundAgreementBean" : {
      "title" : "EdifactInboundAgreementBean",
      "description" : ""
    },
    "json_MetadataProfileOutputBean" : {
      "title" : "MetadataProfileOutputBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "The ID of the metadata profile output bean. Read-only field.",
          "type" : "string"
        },
        "name" : {
          "description" : "The name of the metadata profile output.",
          "type" : "string"
        },
        "useOutboundAgreement" : {
          "description" : "Set this to <b>true</b> to deliver using defined outbound agreement(s).",
          "type" : "boolean"
        },
        "outboundAgreements" : {
          "description" : "The outbound agreement configuration to use for output delivery.",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_MetadataOutboundAgreementBean"
            },
            "type" : "array"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "xml_ns0_routingIdBean" : {
      "title" : "routingIdBean",
      "description" : ""
    },
    "xml_ns0_mapEntry" : {
      "title" : "mapEntry",
      "description" : ""
    },
    "json_CharacterSet" : {
      "title" : "CharacterSet",
      "description" : "",
      "type" : "string"
    },
    "json_MetadataProfileConditionBean" : {
      "title" : "MetadataProfileConditionBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "The ID of this metadata profile condition.",
          "type" : "string"
        },
        "metadata" : {
          "description" : "The metadata rule that applies to the metadata profile.",
          "type" : "string"
        },
        "condition" : {
          "description" : "The condition defined for the metadata rule.",
          "$ref" : "#/definitions/json_MetadataCondition"
        },
        "value" : {
          "description" : "The value defined for the metadata rule.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_SftpCollisionMode" : {
      "title" : "SftpCollisionMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_sftpConsumerExchangePointBean" : {
      "title" : "sftpConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_tradacomDocumentAgreementBean" : {
      "title" : "tradacomDocumentAgreementBean",
      "description" : ""
    },
    "json_OftpV1SharedProducerExchangePointBean" : {
      "title" : "OftpV1SharedProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_userPasswordChangeBean" : {
      "title" : "userPasswordChangeBean",
      "description" : ""
    },
    "json_OftpV1ServerExchangePointBean" : {
      "title" : "OftpV1ServerExchangePointBean",
      "description" : ""
    },
    "json_IdocOutboundAgreementBean" : {
      "title" : "IdocOutboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_tradacomsAgreementBean" : {
      "title" : "tradacomsAgreementBean",
      "description" : ""
    },
    "json_VdaInboundAgreementBean" : {
      "title" : "VdaInboundAgreementBean",
      "description" : ""
    },
    "json_PersistenceMode" : {
      "title" : "PersistenceMode",
      "description" : "",
      "type" : "string"
    },
    "json_OftpV2SharedProducerExchangePointBean" : {
      "title" : "OftpV2SharedProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_x12AgreementBean" : {
      "title" : "x12AgreementBean",
      "description" : ""
    },
    "xml_ns0_httpResponseB2biConsumerExchangePointBean" : {
      "title" : "httpResponseB2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_PesitServerExchangePointBean" : {
      "title" : "PesitServerExchangePointBean",
      "description" : ""
    },
    "json_XmlDocumentAgreementBean" : {
      "title" : "XmlDocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_characterSet" : {
      "title" : "characterSet",
      "description" : "",
      "type" : "string"
    },
    "json_SftpServerProducerExchangePointBean" : {
      "title" : "SftpServerProducerExchangePointBean",
      "description" : ""
    },
    "json_NachaOutboundAgreementBean" : {
      "title" : "NachaOutboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_vdaRole" : {
      "title" : "vdaRole",
      "description" : "",
      "type" : "string"
    },
    "json_MapEntry" : {
      "title" : "MapEntry",
      "description" : "",
      "properties" : {
        "key" : {
          "description" : "",
          "$ref" : "#/definitions/json_MapType"
        },
        "value" : {
          "description" : "",
          "$ref" : "#/definitions/json_MapType"
        }
      },
      "type" : "object"
    },
    "json_MllpServerExchangePointBean" : {
      "title" : "MllpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_testIndicator" : {
      "title" : "testIndicator",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_managedPGPSignatureBean" : {
      "title" : "managedPGPSignatureBean",
      "description" : ""
    },
    "xml_ns0_serverProducerExchangePointBean" : {
      "title" : "serverProducerExchangePointBean",
      "description" : ""
    },
    "json_AS4HttpServerExchangePointBean" : {
      "title" : "AS4HttpServerExchangePointBean",
      "description" : ""
    },
    "json_FtpProducerExchangePointBean" : {
      "title" : "FtpProducerExchangePointBean",
      "description" : ""
    },
    "json_TradacomsOutboundAgreementBean" : {
      "title" : "TradacomsOutboundAgreementBean",
      "description" : ""
    },
    "json_CompareOperator" : {
      "title" : "CompareOperator",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_mapType" : {
      "title" : "mapType",
      "description" : ""
    },
    "json_VdaOutboundAgreementBean" : {
      "title" : "VdaOutboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_xmlDocumentAgreementBean" : {
      "title" : "xmlDocumentAgreementBean",
      "description" : ""
    },
    "json_SmtpServerExchangePointBean" : {
      "title" : "SmtpServerExchangePointBean",
      "description" : ""
    },
    "json_PluggableConsumerExchangePointBean" : {
      "title" : "PluggableConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_fileSystemB2biProducerExchangePointBean" : {
      "title" : "fileSystemB2biProducerExchangePointBean",
      "description" : ""
    },
    "json_NotImplementedException" : {
      "title" : "NotImplementedException",
      "description" : "Base class for all API exceptions.  Any class that extends this will automatically get mapped to the correct\r\nHTTP return code and the exception message will be populated in the response body."
    },
    "xml_ns0_ftpProducerExchangePointBean" : {
      "title" : "ftpProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_b2biProducerExchangePointBean" : {
      "title" : "b2biProducerExchangePointBean",
      "description" : ""
    },
    "json_ForbiddenException" : {
      "title" : "ForbiddenException",
      "description" : "Exception that maps to HTTP 403 return code"
    },
    "json_DocumentAgreementOutputType" : {
      "title" : "DocumentAgreementOutputType",
      "description" : "",
      "type" : "string"
    },
    "json_GenerateAckRuleType_hl7v2" : {
      "title" : "GenerateAckRuleType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_pesitDataEncodingType" : {
      "title" : "pesitDataEncodingType",
      "description" : "",
      "type" : "string"
    },
    "json_ConjunctorType" : {
      "title" : "ConjunctorType",
      "description" : "",
      "type" : "string"
    },
    "json_SshUserBean" : {
      "title" : "SshUserBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "password" : {
          "description" : "The password for the SFTP account to connect to the server.",
          "type" : "string"
        },
        "userName" : {
          "description" : "The user name to connect to the server. The name is used not only for connection, but also represents\r\nthe home directory for the SFTP account.",
          "type" : "string"
        },
        "enabled" : {
          "description" : "Specify whether the SFTP account is enabled.",
          "type" : "boolean"
        },
        "hasCredentials" : {
          "description" : "Specify where the account has associated credentials. The accounts might not have credentials if the server\r\nuses public/private key pair authentication",
          "type" : "boolean"
        },
        "passwordPolicyName" : {
          "description" : "The name of the password policy to assign to the user. A default password policy is in effect globally for all\r\ntransport users. You can override the default policy by adding one or more user-defined policies and assigning\r\npolicies to specific users.",
          "type" : "string"
        },
        "sftpSubDirectories" : {
          "description" : "Subdirectories associated to the SFTP account. A specific combination of user\r\nand directory can be associated with only one exchange.",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "sshPublicKeys" : {
          "description" : "Returns the RSA or DSK qualified SSH key for the user.  Multiple keys may be combined in one string and will\r\nbe separated by a carriage return or carriage return + line feed.\r\n<br></br>\r\nNote: if multiple keys are present it is best to parse the keys using a BufferedReader wrapped with a\r\nStringReader which takes this data a value.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_exchangePointBean" : {
      "title" : "exchangePointBean",
      "description" : ""
    },
    "json_EmailB2biProducerExchangePointBean" : {
      "title" : "EmailB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_hl7v2DocumentAgreementBean" : {
      "title" : "hl7v2DocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_configurationArgumentBean" : {
      "title" : "configurationArgumentBean",
      "description" : ""
    },
    "xml_ns0_oftpSharedProducerExchangePointBean" : {
      "title" : "oftpSharedProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_processingBean" : {
      "title" : "processingBean",
      "description" : ""
    },
    "xml_ns0_pesitServerExchangePointBean" : {
      "title" : "pesitServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_oftpServerSettingsBean" : {
      "title" : "oftpServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_immutableProducerExchangePointBean" : {
      "title" : "immutableProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_edifactInboundFunctionalGroupBean" : {
      "title" : "edifactInboundFunctionalGroupBean",
      "description" : ""
    },
    "xml_ns0_ftpCollisionMode" : {
      "title" : "ftpCollisionMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_partnerDocumentServiceBean" : {
      "title" : "partnerDocumentServiceBean",
      "description" : ""
    },
    "xml_ns0_documentAgreementOutputBean" : {
      "title" : "documentAgreementOutputBean",
      "description" : ""
    },
    "json_MimeEmailB2biConsumerExchangePointBean" : {
      "title" : "MimeEmailB2biConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_xmlInboundAgreementBean" : {
      "title" : "xmlInboundAgreementBean",
      "description" : ""
    },
    "json_PesitIntegrationDeliverySettingsBean" : {
      "title" : "PesitIntegrationDeliverySettingsBean",
      "description" : ""
    },
    "json_ExchangePointBean" : {
      "title" : "ExchangePointBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "url" : {
          "description" : "Return the URL associated with this exchange point. For delivery exchanges either on the trading or\r\nintegration side, and for polling pickup exchanges like FTP client and file system client, this should\r\nalways have a value in the database (unless the exchange isn&#39;t complete). The same is true for embedded\r\nHTTP exchanges. For other types of exchanges such as embedded FTP, the URL in the database may be null.\r\nSuch exchanges should override this method and dynamically return a URL built from values derived from\r\nplaces like their settings object (and primary FtpUser in the case of FTP).\r\n<p/>\r\nWorst case, this method will return remoteUrl if url is null.",
          "type" : "string"
        },
        "businessProtocol" : {
          "description" : "The business protocol associated with this exchange point.",
          "$ref" : "#/definitions/json_BusinessProtocol"
        },
        "enabled" : {
          "description" : "Returns if this exchange point is enabled.",
          "type" : "boolean"
        },
        "friendlyName" : {
          "description" : "The friendly name for this exchange point.",
          "type" : "string"
        },
        "backupMessages" : {
          "description" : "Indicates whether the system backs up copies of the messages it retrieves from integration or receives\r\nfrom partners.",
          "type" : "boolean"
        },
        "maxConcurrentConnections" : {
          "description" : "(For partner trading delivery only.) The number of total open connections the trading engine server can\r\nmake to a partner. If you are operating in a cluster environment, this is the total number across the\r\nentire cluster, no matter how many JVM nodes are running. For example, if the value is 100 connections\r\nand there are 150 messages to send, the trading engine opens only 100 connections to that partner. The\r\nremaining 50 messages are queued until connections become available.\r\n<p>\r\nThe default value is suitable in almost all cases. However, if a partner says your trading engine is\r\nover running his receiving system, decrease the value. (This advice does not apply to OFTP X.25 or X.25\r\nover ISDN, as the default maximum value is 1 for those transports.)If sending messages to Transfer CFT\r\nvia PeSIT (PeSIT), the value in this field must be less than the CFTTCP setting in Transfer CFT.\r\n</p>",
          "type" : "number"
        },
        "inlineProcessors" : {
          "description" : "Returns the list of inline processors that are associated with this exchange point.",
          "type" : "string"
        },
        "inlinePostProcessors" : {
          "description" : "Returns the list of inline post processors that are associated with this exchange point.",
          "type" : "string"
        },
        "schedule" : {
          "description" : "Returns the schedule that is associated with this exchange point.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_status" : {
      "title" : "status",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_documentAgreementOutputApplicationBean" : {
      "title" : "documentAgreementOutputApplicationBean",
      "description" : ""
    },
    "json_X12OutboundFunctionalGroupBean" : {
      "title" : "X12OutboundFunctionalGroupBean",
      "description" : "Author: srybak\r\nDate: 5/23/14"
    },
    "json_OftpV1ConsumerExchangePointBean" : {
      "title" : "OftpV1ConsumerExchangePointBean",
      "description" : ""
    },
    "json_FunctionalGroupBean" : {
      "title" : "FunctionalGroupBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "name" : {
          "description" : "Functional group name",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_AleB2biConsumerExchangePointBean" : {
      "title" : "AleB2biConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_pluggableServerExchangePointBean" : {
      "title" : "pluggableServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_metadataProfileOutputToNextStepBean" : {
      "title" : "metadataProfileOutputToNextStepBean",
      "description" : ""
    },
    "json_PartyTradingInfoBean" : {
      "title" : "PartyTradingInfoBean",
      "description" : "",
      "properties" : {
        "contact" : {
          "description" : "",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "routingId" : {
          "description" : "",
          "$ref" : "#/definitions/json_RoutingIdBean"
        },
        "name" : {
          "description" : "",
          "type" : "string"
        },
        "type" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_OutOfSequenceActionType_hl7v2" : {
      "title" : "OutOfSequenceActionType",
      "description" : "",
      "type" : "string"
    },
    "json_FileSystemConsumerExchangePointBean" : {
      "title" : "FileSystemConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_messageAttributeBean" : {
      "title" : "messageAttributeBean",
      "description" : ""
    },
    "json_SeiResponseMessage" : {
      "title" : "SeiResponseMessage",
      "description" : ""
    },
    "xml_ns0_fileSystemProducerExchangePointBean" : {
      "title" : "fileSystemProducerExchangePointBean",
      "description" : ""
    },
    "json_FtpSubDirectoryBean" : {
      "title" : "FtpSubDirectoryBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "ftpUserName" : {
          "description" : "Get the name of the FTP user.",
          "type" : "string"
        },
        "subDirectory" : {
          "description" : "User's subdirectory where the messages will be written.\r\nThe user subdirectories for each exchange are different.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_FieldStyle" : {
      "title" : "FieldStyle",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_oftpV2ProducerExchangePointBean" : {
      "title" : "oftpV2ProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_exchangePointScheduleBean" : {
      "title" : "exchangePointScheduleBean",
      "description" : "Used to set times for making a pickup or delivery exchange inactive while keeping the transport in an enabled state.\r\nFor example, you could set a schedule to turn off the exchange for a few hours once a week to perform maintenance on a transport server.</br>\r\nBy default exchanges are active continuously. Schedules are added by day of the week and time of day.\r\nFor instance, if you select Monday 0:00 - 23:59, the exchange is on all day every Monday.\r\nIf you select Monday 8:30 - 11:30, the exchange is on from 8:30 to 11:30 a.m. and off all other times on Mondays.</br>\r\nTimes are expressed in 24-hour format: hh:mm or h:mm. Times are the time zone for your server.</br>\r\nIf you schedule down times for a pickup used by a community to receive messages from partners, you may want to inform partners when the transport is inactive.</br>\r\nIf you want an exchange to be active most of the time but turned off only some of the time, you may need many schedules specifying the daily times you want\r\nthe transport to be on or off. For example, to schedule a transport to turn off between 1 and 2 p.m. each Saturday, eight schedules are needed as follows:\r\nsix daily schedules calling for the transport to run continuously Sunday through Friday and two Saturday schedules, the first specifying the transport\r\nis on from midnight to 1 p.m. and the second specifying the transport is on from 2 p.m. to midnight.</br>\r\nMessages in queue when a transport turns off are suspended until the transport turns back on. For example, if a message is picked up from an application\r\nwhile the transport for sending to a partner is turned off, Message Tracker reports the status for the message as \"scheduled production.\"\r\nWhen the transport turns on again, processing of the message continues. Similarly, retries and resends for messages are suspended while the transport is off,\r\nbut they resume at the point where they were suspended when the transport turns back on.</br>\r\nTo use schedules, make sure message backups are enabled for the affected transports.\r\nUnless backups are enabled, messages in process when a transport turns off cannot be queued to resume processing when the transport turns on again.</br>\r\nIf you trade via the AS2 message protocol and request asynchronous receipts, your community cannot receive receipts from partners\r\nwhen the sending transport is turned off. To avoid this, request synchronous receipts or schedule a transport to be off when no messages are in process."
    },
    "xml_ns0_edifactMessagingIdBean" : {
      "title" : "edifactMessagingIdBean",
      "description" : ""
    },
    "xml_ns0_httpServerB2biProducerExchangePointBean" : {
      "title" : "httpServerB2biProducerExchangePointBean",
      "description" : ""
    },
    "json_ManagedPGPPublicKeyBean" : {
      "title" : "ManagedPGPPublicKeyBean",
      "description" : "",
      "properties" : {
        "keyId" : {
          "description" : "The keyId is string identifier for the Public Key.",
          "type" : "string"
        },
        "keyAlgorithm" : {
          "description" : "An algorithm identifier that specifies the public key crypto system this key belongs to and any associated key parameters, such as key length <p/>",
          "type" : "string"
        },
        "keyLength" : {
          "description" : "Key length indicates encryption strength, the larger the number the stronger the key. <p/>",
          "type" : "number"
        },
        "creationDate" : {
          "description" : "The date the public key was created.",
          "type" : "number"
        },
        "expireDate" : {
          "description" : "The date the public key expires.",
          "type" : "number"
        }
      },
      "type" : "object"
    },
    "xml_ns0_metadataTemplatePolicy" : {
      "title" : "metadataTemplatePolicy",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_oftpV1ConsumerExchangePointBean" : {
      "title" : "oftpV1ConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_componentBean" : {
      "title" : "componentBean",
      "description" : ""
    },
    "json_IsdnServerNetworkSettingsBean" : {
      "title" : "IsdnServerNetworkSettingsBean",
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "json_AckEnvelopingType" : {
      "title" : "AckEnvelopingType",
      "description" : "",
      "type" : "string"
    },
    "json_FtpServerProducerExchangePointBean" : {
      "title" : "FtpServerProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_metadataProfileBean" : {
      "title" : "metadataProfileBean",
      "description" : ""
    },
    "json_GroupTimeoutActionType_nacha" : {
      "title" : "GroupTimeoutActionType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_inHouseDocumentAgreementBean" : {
      "title" : "inHouseDocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_idocInboundAgreementBean" : {
      "title" : "idocInboundAgreementBean",
      "description" : ""
    },
    "json_HttpB2biConsumerExchangePointBean" : {
      "title" : "HttpB2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_FileNamePreserveMode" : {
      "title" : "FileNamePreserveMode",
      "description" : "",
      "type" : "string"
    },
    "json_FtpDuplicateFileNameMode" : {
      "title" : "FtpDuplicateFileNameMode",
      "description" : "",
      "type" : "string"
    },
    "json_AcknowledgementMode" : {
      "title" : "AcknowledgementMode",
      "description" : "",
      "type" : "string"
    },
    "json_CharEncodingCoded" : {
      "title" : "CharEncodingCoded",
      "description" : "",
      "type" : "string"
    },
    "json_AddressingRuleAction" : {
      "title" : "AddressingRuleAction",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_acknowledgementMode" : {
      "title" : "acknowledgementMode",
      "description" : "",
      "type" : "string"
    },
    "json_ComponentBean" : {
      "title" : "ComponentBean",
      "description" : ""
    },
    "json_MessageBean" : {
      "title" : "MessageBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "coreId" : {
          "description" : "Gets the Message core Id",
          "type" : "string"
        },
        "messageAttributes" : {
          "description" : "Returns a list containing all the attributes for the current Message",
          "type" : "string"
        },
        "currentStateType" : {
          "description" : "Gets the Message current state",
          "type" : "string"
        },
        "senderPartyID" : {
          "description" : "Gets the Message sender party Id",
          "type" : "string"
        },
        "receiverPartyID" : {
          "description" : "Gets the Message receiver party Id",
          "type" : "string"
        },
        "senderRoutingID" : {
          "description" : "Gets the Message sender routing Id",
          "type" : "string"
        },
        "receiverRoutingID" : {
          "description" : "Gets the Message receiver routing Id",
          "type" : "string"
        },
        "documentClass" : {
          "description" : "the Message document class",
          "type" : "string"
        },
        "integrationID" : {
          "description" : "",
          "type" : "string"
        },
        "currentMessageID" : {
          "description" : "",
          "type" : "string"
        },
        "senderRoutingIDType" : {
          "description" : "",
          "type" : "string"
        },
        "receiverRoutingIdType" : {
          "description" : "",
          "type" : "string"
        },
        "contentMimeType" : {
          "description" : "",
          "type" : "string"
        },
        "ediControlID" : {
          "description" : "",
          "type" : "string"
        },
        "consumptionFilename" : {
          "description" : "",
          "type" : "string"
        },
        "productionFilename" : {
          "description" : "",
          "type" : "string"
        },
        "consumptionExchangePointOID" : {
          "description" : "",
          "type" : "string"
        },
        "originationTime" : {
          "description" : "",
          "type" : "string"
        },
        "deliveredTime" : {
          "description" : "",
          "type" : "string"
        },
        "direction" : {
          "description" : "",
          "type" : "string"
        },
        "consumptionURL" : {
          "description" : "",
          "type" : "string"
        },
        "productionURL" : {
          "description" : "",
          "type" : "string"
        },
        "dmzZone" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_httpServerB2biConsumerExchangePointBean" : {
      "title" : "httpServerB2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_InHouseDocumentAgreementBean" : {
      "title" : "InHouseDocumentAgreementBean",
      "description" : ""
    },
    "json_ContactBean" : {
      "title" : "ContactBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "primary" : {
          "description" : "Returns if this contact is the principal contact of the community/partner",
          "type" : "boolean"
        },
        "name" : {
          "description" : "The contact name",
          "type" : "string"
        },
        "email" : {
          "description" : "The email address of the contact",
          "type" : "string"
        },
        "phone" : {
          "description" : "The phone number of the contact",
          "type" : "string"
        },
        "notes" : {
          "description" : "The contact's notes",
          "type" : "string"
        },
        "title" : {
          "description" : "The title owned by the contact",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_SmtpServerSettingsBean" : {
      "title" : "SmtpServerSettingsBean",
      "description" : ""
    },
    "json_OftpConsumerExchangePointBean" : {
      "title" : "OftpConsumerExchangePointBean",
      "description" : ""
    },
    "json_ImmutableAgreementBean" : {
      "title" : "ImmutableAgreementBean",
      "description" : ""
    },
    "xml_ns0_mllpServerExchangePointBean" : {
      "title" : "mllpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_xmlMessagingIdBean" : {
      "title" : "xmlMessagingIdBean",
      "description" : ""
    },
    "xml_ns0_outOfSequenceActionType" : {
      "title" : "outOfSequenceActionType",
      "description" : "",
      "type" : "string"
    },
    "json_ConfigurationArgumentBean" : {
      "title" : "ConfigurationArgumentBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "name" : {
          "description" : "The name of the argument. This is a read-only field.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the argument. This is a read-only field.",
          "type" : "string"
        },
        "notEqualTo" : {
          "description" : "No description",
          "type" : "string"
        },
        "value" : {
          "description" : "The value to be updated.",
          "type" : "string"
        },
        "editable" : {
          "description" : "",
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "xml_ns0_certificateType" : {
      "title" : "certificateType",
      "description" : "",
      "type" : "string"
    },
    "json_MetadataDocumentServiceBean" : {
      "title" : "MetadataDocumentServiceBean",
      "description" : ""
    },
    "json_X12IndustryIdentifier" : {
      "title" : "X12IndustryIdentifier",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_pesitRecordFormat" : {
      "title" : "pesitRecordFormat",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_x12OutboundAgreementBean" : {
      "title" : "x12OutboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_idocAgreementBean" : {
      "title" : "idocAgreementBean",
      "description" : ""
    },
    "json_MessagingIdBean" : {
      "title" : "MessagingIdBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "primary" : {
          "description" : "Specify whether this messaging id is used as default for identifying the associated partner at message level.\r\nA default messaging id can be configured for each message standard that can be exchanged by a specific partner.",
          "type" : "boolean"
        },
        "enabled" : {
          "description" : "Specify whether this messaging id is enabled.",
          "type" : "boolean"
        },
        "name" : {
          "description" : "The name of the messaging id.",
          "type" : "string"
        },
        "routingId" : {
          "description" : "RoutingId derived from this MessagingId.  Used for display purposes and by Integrator/pmServer.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_Hl7v2DocumentAgreementBean" : {
      "title" : "Hl7v2DocumentAgreementBean",
      "description" : ""
    },
    "json_AS4HttpProducerExchangePointBean" : {
      "title" : "AS4HttpProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_nachaInboundAgreementBean" : {
      "title" : "nachaInboundAgreementBean",
      "description" : ""
    },
    "json_DocumentAgreementOutputPartnerBean" : {
      "title" : "DocumentAgreementOutputPartnerBean",
      "description" : ""
    },
    "xml_ns0_pesitProducerExchangePointBean" : {
      "title" : "pesitProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_edifactDocumentAgreementBean" : {
      "title" : "edifactDocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_groupTimeoutActionType" : {
      "title" : "groupTimeoutActionType",
      "description" : "",
      "type" : "string"
    },
    "json_XmlMessagingIdBean" : {
      "title" : "XmlMessagingIdBean",
      "description" : ""
    },
    "json_DocumentAgreementOutputBean" : {
      "title" : "DocumentAgreementOutputBean",
      "description" : "",
      "properties" : {
        "useEnvelopingProfile" : {
          "description" : "Set to one of the following: <p/> <ul>\r\n<li> true - Deliver using defined outbound agreement(s) <p/>\r\nSelect this option if you want to specify an outbound agreement to\r\nuse for the output delivery.\r\n</li>\r\n<li> false - Deliver using best matching outbound agreement <p/>\r\nSelect this option if you want to let B2Bi select the\r\noutbound agreement to link to this agreement. The trading engine selects the\r\nbest matching agreement from the available agreements. If no matching\r\noutbound agreement is found, a message is generated to Message Log.\r\n</li>\r\n<p/>\r\n</ul>",
          "type" : "boolean"
        },
        "outboundAgreements" : {
          "description" : "The outbound agreement configuration to use for output delivery.",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_DocumentAgreementOutputAgreementBean"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "outputType" : {
          "description" : "Select one of the following: <p/><ul>\r\n<li> USE_INBOUND_RECEIVER - Use inbound agreement receiver as delivery partner  <p/>\r\nThis is the default behavior of the document agreement.\r\n</li>\r\n<li> USE_ALTERNATE_DELIVERY_PARTNER <p/>\r\nSelect this option if you want to specify a partner (other than the inbound agreement\r\nreceiver) as the destination of outbound messages. The partner you select must have a valid Routing ID and a delivery exchange defined.\r\n</li>\r\n<li> USE_OUTBOUND_AGREEMENT <p/>\r\nSelect this option to link the document agreement to an outbound agreement.\r\n</li>\r\n<li> USE_NONE <p/>\r\nThis option is the default when the Service used by the owning Document Agreement delivers to an Application. It\r\ncan be selected only when the Service delivers to Application or when the Service delivers to Partner but the Agreement has no explicit receiver.\r\n</li>\r\n</ul>",
          "$ref" : "#/definitions/json_DocumentAgreementOutputType"
        },
        "id" : {
          "description" : "The id of this Document Agreement Output.",
          "type" : "string"
        },
        "name" : {
          "description" : "The name of the Document Agreement Output. This cannot be modified.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_emailUserBean" : {
      "title" : "emailUserBean",
      "description" : ""
    },
    "xml_ns0_AS4HttpProducerExchangePointBean" : {
      "title" : "AS4HttpProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_contactBean" : {
      "title" : "contactBean",
      "description" : ""
    },
    "xml_ns0_pesitServerSettingsBean" : {
      "title" : "pesitServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_sinkB2biProducerExchangePointBean" : {
      "title" : "sinkB2biProducerExchangePointBean",
      "description" : ""
    },
    "json_TestIndicator_idoc" : {
      "title" : "TestIndicator",
      "description" : "",
      "type" : "string"
    },
    "json_AS4HttpConsumerExchangePointBean" : {
      "title" : "AS4HttpConsumerExchangePointBean",
      "description" : ""
    },
    "json_DocumentAgreementOutputAgreementBean" : {
      "title" : "DocumentAgreementOutputAgreementBean",
      "description" : "",
      "properties" : {
        "senderId" : {
          "description" : "The ID of the sender partner or null for [ANY].",
          "type" : "string"
        },
        "receiverId" : {
          "description" : "The ID of the receiver partner for the outbound agreement or null for [ANY].",
          "type" : "string"
        },
        "agreementId" : {
          "description" : "The ID of the outbound agreement to be used for enveloping.",
          "type" : "string"
        },
        "overrideTransportReceiver" : {
          "description" : "Set this to <b>true</b> in order to use an alternate delivery partner.",
          "type" : "boolean"
        },
        "transportReceiverId" : {
          "description" : "The partner to be used as alternate delivery partner.",
          "type" : "string"
        },
        "transportReceiverRoutingId" : {
          "description" : "Routing ID belonging to the alternate delivery partner to be used.",
          "type" : "string"
        },
        "deliveryExchangeId" : {
          "description" : "Delivery belonging to the alternate delivery partner to be used. This must be a complete and enabled partner delivery.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_PesitRecordFormat" : {
      "title" : "PesitRecordFormat",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_fieldStyle" : {
      "title" : "fieldStyle",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_networkSettingsBean" : {
      "title" : "networkSettingsBean",
      "description" : ""
    },
    "xml_ns0_agreementBean" : {
      "title" : "agreementBean",
      "description" : ""
    },
    "json_MapType" : {
      "title" : "MapType",
      "description" : ""
    },
    "json_OftpV2ServerExchangePointBean" : {
      "title" : "OftpV2ServerExchangePointBean",
      "description" : ""
    },
    "json_SshServerAuthenticationMode" : {
      "title" : "SshServerAuthenticationMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_ftpDuplicateFileNameMode" : {
      "title" : "ftpDuplicateFileNameMode",
      "description" : "",
      "type" : "string"
    },
    "json_MetadataProfileOutputApplicationBean" : {
      "title" : "MetadataProfileOutputApplicationBean",
      "description" : ""
    },
    "xml_ns0_popAuthenticationType" : {
      "title" : "popAuthenticationType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_inHouseAgreementBean" : {
      "title" : "inHouseAgreementBean",
      "description" : ""
    },
    "json_EdifactOutboundAgreementBean" : {
      "title" : "EdifactOutboundAgreementBean",
      "description" : ""
    },
    "json_CollectionResult" : {
      "title" : "CollectionResult",
      "description" : "Used by factories to return the result of a collection to the API server.  The results should respect the pagination\r\nvalues passed to it, but also should return the <strong>ENTIRE</strong> count of the results.  For example, if a\r\nrequest is called to get all remote parties, the limit of the returned response might be 10 results in the collection\r\nbut there may be 5000 total remote parties.  The count value is necessary to clients such as a UI to build there\r\npage bar.",
      "properties" : {
        "results" : {
          "description" : "",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "count" : {
          "description" : "",
          "type" : "number"
        }
      },
      "type" : "object"
    },
    "xml_ns0_idocDocumentAgreementBean" : {
      "title" : "idocDocumentAgreementBean",
      "description" : ""
    },
    "json_HttpB2biProducerExchangePointBean" : {
      "title" : "HttpB2biProducerExchangePointBean",
      "description" : ""
    },
    "json_ProducerExchangePointBean" : {
      "title" : "ProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_customB2biProducerExchangePointBean" : {
      "title" : "customB2biProducerExchangePointBean",
      "description" : ""
    },
    "json_HttpProducerExchangePointBean" : {
      "title" : "HttpProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_x25ClientNetworkSettingsBean" : {
      "title" : "x25ClientNetworkSettingsBean",
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "xml_ns0_certificateUsage" : {
      "title" : "certificateUsage",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_x12TestIndicator" : {
      "title" : "x12TestIndicator",
      "description" : "",
      "type" : "string"
    },
    "json_Hl7v2AgreementBean" : {
      "title" : "Hl7v2AgreementBean",
      "description" : ""
    },
    "xml_ns0_compareOperator" : {
      "title" : "compareOperator",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_immutableConsumerExchangePointBean" : {
      "title" : "immutableConsumerExchangePointBean",
      "description" : ""
    },
    "json_X12TestIndicator" : {
      "title" : "X12TestIndicator",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_metadataTemplateConsumptionPropertiesBean" : {
      "title" : "metadataTemplateConsumptionPropertiesBean",
      "description" : "Settings to attach meta-data to the messages the trading engine picks up from applications or receives from partner"
    },
    "xml_ns0_metadataProfileOutputBean" : {
      "title" : "metadataProfileOutputBean",
      "description" : ""
    },
    "json_AddressingRulesBean" : {
      "title" : "AddressingRulesBean",
      "description" : "Used to configure how the system determines who is sending/receiving the message.",
      "properties" : {
        "fromAddress" : {
          "description" : "Used to configure how the system determines who is sending the message.",
          "$ref" : "#/definitions/json_AddressingRuleBean"
        },
        "toAddress" : {
          "description" : "Used to configure how the system determines to whom the message is being sent",
          "$ref" : "#/definitions/json_AddressingRuleBean"
        }
      },
      "type" : "object"
    },
    "json_IdocMessagingIdBean" : {
      "title" : "IdocMessagingIdBean",
      "description" : ""
    },
    "json_ProcessingErrorException" : {
      "title" : "ProcessingErrorException",
      "description" : "Exception that maps to HTTP 500 return code"
    },
    "xml_ns0_metadataDocumentServiceBean" : {
      "title" : "metadataDocumentServiceBean",
      "description" : ""
    },
    "xml_ns0_ftpType" : {
      "title" : "ftpType",
      "description" : "",
      "type" : "string"
    },
    "json_EdifactAgreementBean" : {
      "title" : "EdifactAgreementBean",
      "description" : ""
    },
    "xml_ns0_mqSegmentationType" : {
      "title" : "mqSegmentationType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_ftpB2biConsumerExchangePointBean" : {
      "title" : "ftpB2biConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_x12ProcessingMode" : {
      "title" : "x12ProcessingMode",
      "description" : "User: cfistrate",
      "type" : "string"
    },
    "json_X25NetworkSettingsBean" : {
      "title" : "X25NetworkSettingsBean",
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "xml_ns0_edifactSyntaxGroup" : {
      "title" : "edifactSyntaxGroup",
      "description" : "",
      "type" : "string"
    },
    "json_Hl7v2OutboundAgreementBean" : {
      "title" : "Hl7v2OutboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_x12IndustryIdentifier" : {
      "title" : "x12IndustryIdentifier",
      "description" : "",
      "type" : "string"
    },
    "json_SslCipherSuite" : {
      "title" : "SslCipherSuite",
      "description" : "",
      "type" : "string"
    },
    "json_ProtocolVersion" : {
      "title" : "ProtocolVersion",
      "description" : "",
      "type" : "string"
    },
    "json_MessageType" : {
      "title" : "MessageType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_oftpV2SharedProducerExchangePointBean" : {
      "title" : "oftpV2SharedProducerExchangePointBean",
      "description" : ""
    },
    "json_ObjectNotFoundException" : {
      "title" : "ObjectNotFoundException",
      "description" : "Exception that maps to HTTP 404 return code"
    },
    "json_EdifactOutboundFunctionalGroupBean" : {
      "title" : "EdifactOutboundFunctionalGroupBean",
      "description" : ""
    },
    "xml_ns0_hl7v2MessagingIdBean" : {
      "title" : "hl7v2MessagingIdBean",
      "description" : ""
    },
    "xml_ns0_pickupGroupBean" : {
      "title" : "pickupGroupBean",
      "description" : ""
    },
    "json_Identifier" : {
      "title" : "Identifier",
      "description" : "",
      "type" : "string"
    },
    "json_IdocAgreementBean" : {
      "title" : "IdocAgreementBean",
      "description" : ""
    },
    "json_OutOfSequenceActionType" : {
      "title" : "OutOfSequenceActionType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_rejectionRuleType" : {
      "title" : "rejectionRuleType",
      "description" : "",
      "type" : "string"
    },
    "json_GroupTimeFormatType" : {
      "title" : "GroupTimeFormatType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_vdaInboundAgreementBean" : {
      "title" : "vdaInboundAgreementBean",
      "description" : ""
    },
    "json_Response" : {
      "title" : "response",
      "description" : ""
    },
    "json_RoutingIdBean" : {
      "title" : "RoutingIdBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of this Routing ID.\r\n<ul>\r\n<li>For ebXML traders only, enter an ebXML party ID type only if the routing ID you enter is not a URI.\r\n</li>\r\n<li>For cXML traders only, enter the matching cXML credential domain type</li>\r\n</ul>",
          "type" : "string"
        },
        "routingId" : {
          "description" : "The value of the Routing ID. A routing ID can be in any format or length (up to 255 characters),\r\nincluding standard EDI or custom formats that include special characters or spaces.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_ProcessingMode" : {
      "title" : "ProcessingMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_smtpProducerExchangePointBean" : {
      "title" : "smtpProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_inHouseOutboundAgreementBean" : {
      "title" : "inHouseOutboundAgreementBean",
      "description" : ""
    },
    "json_ConfigurationBean" : {
      "title" : "ConfigurationBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "name" : {
          "description" : "",
          "type" : "string"
        },
        "type" : {
          "description" : "",
          "type" : "string"
        },
        "description" : {
          "description" : "",
          "type" : "string"
        },
        "arguments" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_functionalGroupBean" : {
      "title" : "functionalGroupBean",
      "description" : ""
    },
    "json_EdifactSyntaxVersion" : {
      "title" : "EdifactSyntaxVersion",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_x25NetworkSettingsBean" : {
      "title" : "x25NetworkSettingsBean",
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "json_FtpServerExchangePointBean" : {
      "title" : "FtpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_oftpV1ServerExchangePointBean" : {
      "title" : "oftpV1ServerExchangePointBean",
      "description" : ""
    },
    "json_FileSystemB2biConsumerExchangePointBean" : {
      "title" : "FileSystemB2biConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_httpConsumerExchangePointBean" : {
      "title" : "httpConsumerExchangePointBean",
      "description" : ""
    },
    "json_PesitServerSettingsBean" : {
      "title" : "PesitServerSettingsBean",
      "description" : ""
    },
    "json_EdifactSyntaxGroup" : {
      "title" : "EdifactSyntaxGroup",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_webtraderUserBean" : {
      "title" : "webtraderUserBean",
      "description" : ""
    },
    "json_PGPCertificateInfoBean" : {
      "title" : "PGPCertificateInfoBean",
      "description" : "",
      "properties" : {
        "@jpaId" : {
          "description" : "",
          "type" : "number"
        },
        "friendlyName" : {
          "description" : "A user-defined name for a certificate.  <p/>\r\nNaming the certificate can help identify the community or partner it belongs to.",
          "type" : "string"
        },
        "fingerprint" : {
          "description" : "Fingerprints are a way to verify the source of a certificate. After you import or export a certificate, you can\r\ncontact your partner and ensure the fingerprints at both ends are identical. Do this before attempting to\r\nexchange documents. If the fingerprints do not match, one of the certificates might be corrupted or out of date. <p/>",
          "type" : "string"
        },
        "keyId" : {
          "description" : "The keyId is string identifier for the PGP Certificate.",
          "type" : "string"
        },
        "keyAlgorithm" : {
          "description" : "An algorithm identifier that specifies the public key crypto system this key belongs to and any associated key parameters, such as key length <p/>",
          "type" : "string"
        },
        "keyLength" : {
          "description" : "Key length indicates encryption strength, the larger the number the stronger the key. <p/>",
          "type" : "number"
        },
        "validFrom" : {
          "description" : "The date the certificate became valid. <p/>",
          "type" : "number"
        },
        "validTo" : {
          "description" : "The date the certificate expires, provided it is not compromised or revoked before that date. <p/>",
          "type" : "number"
        },
        "publicKeys" : {
          "description" : "The Public Key is what its name suggests - Public. It is made available\r\nto everyone via a publicly accessible repository or directory. On the other hand,\r\nthe Private Key must remain confidential to its respective owner.",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_ManagedPGPPublicKeyBean"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "signatures" : {
          "description" : "A digital signature certifies and timestamps a document",
          "items" : {
            "items" : {
              "$ref" : "#/definitions/json_ManagedPGPSignatureBean"
            },
            "type" : "array"
          },
          "type" : "array"
        }
      },
      "type" : "object"
    },
    "json_MetadataProfileOutputSynchronousDeliveryBean" : {
      "title" : "MetadataProfileOutputSynchronousDeliveryBean",
      "description" : ""
    },
    "json_HttpServerExchangePointBean" : {
      "title" : "HttpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_edifactInboundAgreementBean" : {
      "title" : "edifactInboundAgreementBean",
      "description" : ""
    },
    "json_VdaRole" : {
      "title" : "VdaRole",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_xmlAgreementBean" : {
      "title" : "xmlAgreementBean",
      "description" : ""
    },
    "json_HttpServerB2biConsumerExchangePointBean" : {
      "title" : "HttpServerB2biConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_recipientRefPasswordQualifier" : {
      "title" : "recipientRefPasswordQualifier",
      "description" : "",
      "type" : "string"
    },
    "json_Cookie" : {
      "title" : "Cookie",
      "description" : "",
      "properties" : {
        "version" : {
          "description" : "",
          "type" : "number"
        },
        "path" : {
          "description" : "",
          "type" : "string"
        },
        "name" : {
          "description" : "",
          "type" : "string"
        },
        "value" : {
          "description" : "",
          "type" : "string"
        },
        "domain" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_EntityTag" : {
      "title" : "EntityTag",
      "description" : "",
      "properties" : {
        "weak" : {
          "description" : "",
          "type" : "boolean"
        },
        "value" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_PesitConsumerExchangePointBean" : {
      "title" : "PesitConsumerExchangePointBean",
      "description" : ""
    },
    "json_Processing" : {
      "title" : "Processing",
      "description" : "",
      "type" : "string"
    },
    "json_FtpB2biProducerExchangePointBean" : {
      "title" : "FtpB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_smtpServerDefinitionBean" : {
      "title" : "smtpServerDefinitionBean",
      "description" : ""
    },
    "xml_ns0_mqConsumerExchangePointBean" : {
      "title" : "mqConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_criteriaBean" : {
      "title" : "criteriaBean",
      "description" : ""
    },
    "json_MetadataOutboundAgreementBean" : {
      "title" : "MetadataOutboundAgreementBean",
      "description" : "",
      "properties" : {
        "overrideTransportReceiver" : {
          "description" : "",
          "type" : "boolean"
        },
        "transportReceiverId" : {
          "description" : "",
          "type" : "string"
        },
        "transportReceiverRoutingId" : {
          "description" : "",
          "type" : "string"
        },
        "deliveryExchangeId" : {
          "description" : "",
          "type" : "string"
        },
        "id" : {
          "description" : "",
          "type" : "string"
        },
        "senderId" : {
          "description" : "",
          "type" : "string"
        },
        "receiverId" : {
          "description" : "",
          "type" : "string"
        },
        "agreementId" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_httpB2biProducerExchangePointBean" : {
      "title" : "httpB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_inlineProcessorBean" : {
      "title" : "inlineProcessorBean",
      "description" : "The extensible architecture of the trading engine enables system integrators to apply custom logic to in-process messages\r\nas an integral part of the processing pipeline. You can selectively apply the custom processing logic to inbound or outbound\r\nmessages at runtime, implemented as a user-defined Java class ."
    },
    "xml_ns0_sftpServerProducerExchangePointBean" : {
      "title" : "sftpServerProducerExchangePointBean",
      "description" : ""
    },
    "json_ApiException" : {
      "title" : "ApiException",
      "description" : "Base class for all API exceptions.  Any class that extends this will automatically get mapped to the correct\r\nHTTP return code and the exception message will be populated in the response body."
    },
    "xml_ns0_xmlOutboundAgreementBean" : {
      "title" : "xmlOutboundAgreementBean",
      "description" : ""
    },
    "json_TradacomsMessagingIdBean" : {
      "title" : "TradacomsMessagingIdBean",
      "description" : ""
    },
    "json_BatchRejectionRule" : {
      "title" : "BatchRejectionRule",
      "description" : "",
      "type" : "string"
    },
    "json_PluggableProducerExchangePointBean" : {
      "title" : "PluggableProducerExchangePointBean",
      "description" : ""
    },
    "json_B2biProducerExchangePointBean" : {
      "title" : "B2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_batchRejectionRule" : {
      "title" : "batchRejectionRule",
      "description" : "",
      "type" : "string"
    },
    "json_DocumentServiceOutputComponentBean" : {
      "title" : "DocumentServiceOutputComponentBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of the current processing step. This field can have one of the following four values:\r\n<ul>\r\n<li>Document</li>\r\n<li>Post enveloping</li>\r\n<li>Post transfer success</li>\r\n<li>Post transfer failed</li>\r\n</ul>",
          "type" : "string"
        },
        "stepId" : {
          "description" : "The current processing step to be configured.",
          "type" : "string"
        },
        "component" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_tradingPartnerBean" : {
      "title" : "tradingPartnerBean",
      "description" : ""
    },
    "xml_ns0_charEncodingCoded" : {
      "title" : "charEncodingCoded",
      "description" : "",
      "type" : "string"
    },
    "json_XmlAgreementBean" : {
      "title" : "XmlAgreementBean",
      "description" : ""
    },
    "json_CriteriaBean" : {
      "title" : "CriteriaBean",
      "description" : "",
      "type" : "object"
    },
    "json_AgreementBean" : {
      "title" : "AgreementBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "name" : {
          "description" : "Agreement name",
          "type" : "string"
        },
        "enabled" : {
          "description" : "Returns if this agreement is enabled.",
          "type" : "boolean"
        },
        "senderId" : {
          "description" : "Sending partner",
          "type" : "string"
        },
        "senderMessagingId" : {
          "description" : "Sending partner's message routing ID",
          "type" : "string"
        },
        "receiverId" : {
          "description" : "Receiving partner",
          "type" : "string"
        },
        "receiverMessagingId" : {
          "description" : "Receiving partner's message routing ID </br> When null messagingId, routingId will be [ALL] for\r\ninbound, [DEFAULT] for outbound",
          "type" : "string"
        },
        "communityId" : {
          "description" : "Community this agreement is linked to",
          "type" : "string"
        },
        "communityRoutingId" : {
          "description" : "If the community has multiple routing IDs, you must supply a routing ID",
          "type" : "string"
        },
        "agreementAttributes" : {
          "description" : "List with all attributes for current agreement",
          "type" : "string"
        },
        "agreementAttributesTemplate" : {
          "description" : "List with all template attributes for agreements",
          "type" : "string"
        },
        "documentAgreementAttributesTemplate" : {
          "description" : "List with all template attributes for document agreements",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_isdnNetworkSettingsBean" : {
      "title" : "isdnNetworkSettingsBean",
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "xml_ns0_producerExchangePointBean" : {
      "title" : "producerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_edifactAgreementBean" : {
      "title" : "edifactAgreementBean",
      "description" : ""
    },
    "xml_ns0_stdEntryClassCode" : {
      "title" : "stdEntryClassCode",
      "description" : "",
      "type" : "string"
    },
    "json_MetadataProfileOutputToPartnerBean" : {
      "title" : "MetadataProfileOutputToPartnerBean",
      "description" : ""
    },
    "json_CustomB2biProducerExchangePointBean" : {
      "title" : "CustomB2biProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_fileNamePreserveMode" : {
      "title" : "fileNamePreserveMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_edifactOutboundAgreementBean" : {
      "title" : "edifactOutboundAgreementBean",
      "description" : ""
    },
    "json_RejectionRuleType" : {
      "title" : "RejectionRuleType",
      "description" : "",
      "type" : "string"
    },
    "json_Status_Response" : {
      "title" : "Status",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_httpServerSettingsBean" : {
      "title" : "httpServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_x12DocumentAgreementBean" : {
      "title" : "x12DocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_metadataConditionBean" : {
      "title" : "metadataConditionBean",
      "description" : ""
    },
    "xml_ns0_fileSystemB2biConsumerExchangePointBean" : {
      "title" : "fileSystemB2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_TestIndicator" : {
      "title" : "TestIndicator",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_AS4HttpServerExchangePointBean" : {
      "title" : "AS4HttpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_b2biConsumerExchangePointBean" : {
      "title" : "b2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_TradacomsInboundAgreementBean" : {
      "title" : "TradacomsInboundAgreementBean",
      "description" : ""
    },
    "xml_ns0_smtpServerExchangePointBean" : {
      "title" : "smtpServerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_oftpProducerExchangePointBean" : {
      "title" : "oftpProducerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_x509CertificateInfoBean" : {
      "title" : "x509CertificateInfoBean",
      "description" : ""
    },
    "xml_ns0_edifactAckType" : {
      "title" : "edifactAckType",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_deliverySettingsBean" : {
      "title" : "deliverySettingsBean",
      "description" : ""
    },
    "json_PartyBean" : {
      "title" : "PartyBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "enabled" : {
          "description" : "Specify whether the party is enabled.",
          "type" : "boolean"
        },
        "partyName" : {
          "description" : "The friendly name for the specified party.",
          "type" : "string"
        },
        "defaultRoutingId" : {
          "description" : "The default Routing Id for the specified party.\r\nA Routing Id is a unique identifier that the trading engine uses as the \"to\" and \"from\" address for e-commerce\r\nmessages exchanged over the Internet. Routing Ids are used for party identification at transport level.\r\nA Routing Id can be in any format or length (up to 255 characters), including standard EDI or\r\ncustom formats that include special characters or spaces.\r\n<p/>\r\nAlthough a community or partner can have many Routing Ids, the user interface designates one per community or\r\npartner as the default. Default Routing Ids are used by default for message protocol headers when packaging\r\nmessages.\r\nFor example, when packaging an AS2 message the default Routing Ids are used for <code>as2-to</code> and\r\n<code>as2-from</code> attributes in headers, regardless of the Routing Ids parsed from the payload.",
          "$ref" : "#/definitions/json_RoutingIdBean"
        },
        "countryCode" : {
          "description" : "The country code for the specified party which indicates its location.\r\nThe format is [ISO code]-[Country name]. For a list of codes see the Website for ISO (International Organization\r\nfor Standardization): <a href=\"http://www.iso.org/iso/home.html\">http://www.iso.org/iso/home.html</a>.",
          "type" : "string"
        },
        "routingIds" : {
          "description" : "The Routing Ids used by the party.",
          "type" : "string"
        },
        "primaryContact" : {
          "description" : "The principal contact person for the party and the corresponding email address. You can provide\r\nadditional information, including a phone number, email and notes about the contact.",
          "$ref" : "#/definitions/json_ContactBean"
        },
        "contacts" : {
          "description" : "The list of contacts with the primary contact first.",
          "type" : "string"
        },
        "ftpUsers" : {
          "description" : "",
          "type" : "string"
        },
        "sshUsers" : {
          "description" : "",
          "type" : "string"
        },
        "WSUsers" : {
          "description" : "The list of Web Services users defined on this party.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_MessageAttributeBean" : {
      "title" : "MessageAttributeBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "name" : {
          "description" : "",
          "type" : "string"
        },
        "value" : {
          "description" : "",
          "type" : "string"
        },
        "owningMessageId" : {
          "description" : "",
          "type" : "string"
        },
        "parentMessage" : {
          "description" : "",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "xml_ns0_vdaDocumentAgreementBean" : {
      "title" : "vdaDocumentAgreementBean",
      "description" : ""
    },
    "xml_ns0_edifactSyntaxVersion" : {
      "title" : "edifactSyntaxVersion",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_PGPCertificateInfoBean" : {
      "title" : "PGPCertificateInfoBean",
      "description" : ""
    },
    "json_Hl7v2MessagingIdBean" : {
      "title" : "Hl7v2MessagingIdBean",
      "description" : ""
    },
    "xml_ns0_sslCipherSuite" : {
      "title" : "sslCipherSuite",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_httpServerExchangePointBean" : {
      "title" : "httpServerExchangePointBean",
      "description" : ""
    },
    "json_RejectionRuleType_x12" : {
      "title" : "RejectionRuleType",
      "description" : "",
      "type" : "string"
    },
    "json_MllpServerSettingsBean" : {
      "title" : "MllpServerSettingsBean",
      "description" : ""
    },
    "xml_ns0_persistenceMode" : {
      "title" : "persistenceMode",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_isdnServerNetworkSettingsBean" : {
      "title" : "isdnServerNetworkSettingsBean",
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "json_X25ClientNetworkSettingsBean" : {
      "title" : "X25ClientNetworkSettingsBean",
      "description" : "An ITU-T standard protocol suite for packet-switched wide area network communications"
    },
    "xml_ns0_emailB2biConsumerExchangePointBean" : {
      "title" : "emailB2biConsumerExchangePointBean",
      "description" : ""
    },
    "json_TcpNetworkSettingsBean" : {
      "title" : "TcpNetworkSettingsBean",
      "description" : ""
    },
    "json_TradingPartnerBean" : {
      "title" : "TradingPartnerBean",
      "description" : ""
    },
    "xml_ns0_mimeEmailB2biConsumerExchangePointBean" : {
      "title" : "mimeEmailB2biConsumerExchangePointBean",
      "description" : ""
    },
    "xml_ns0_syntaxRule" : {
      "title" : "syntaxRule",
      "description" : "",
      "type" : "string"
    },
    "xml_ns0_hl7v2AgreementBean" : {
      "title" : "hl7v2AgreementBean",
      "description" : ""
    },
    "json_NewCookie" : {
      "title" : "NewCookie",
      "description" : ""
    },
    "json_IsdnNetworkSettingsBean" : {
      "title" : "IsdnNetworkSettingsBean",
      "description" : "Integrated Services Digital Network broadband channel supports data transfers over telephone networks"
    },
    "json_AttributeTemplateBean" : {
      "title" : "AttributeTemplateBean",
      "description" : "",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "name" : {
          "description" : "A name for this attribute to identify it.",
          "type" : "string"
        },
        "required" : {
          "description" : "Select this option if the attribute is to be included on all exchanges.",
          "type" : "boolean"
        },
        "fieldStyle" : {
          "description" : "Select whether to display a single value, a single selectable value or a list of selectable values.",
          "$ref" : "#/definitions/json_FieldStyle"
        },
        "possibleValues" : {
          "description" : "Enter the value or values that are available to select. Available only if the attribute field style is\r\nSINGLESELECT or MULTISELECT.",
          "items" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "type" : "array"
        },
        "usedForSearching" : {
          "description" : "Select this check box to make this attribute a valid search criteria.",
          "type" : "boolean"
        },
        "usedForProcessing" : {
          "description" : "Select this option to make this attribute available as a criteria for conditional message processing.",
          "type" : "boolean"
        }
      },
      "type" : "object"
    },
    "json_PublicKeyCredentialsBean" : {
      "title" : "PublicKeyCredentialsBean",
      "description" : "SSH public key information",
      "properties" : {
        "@id" : {
          "description" : "",
          "type" : "string"
        },
        "alias" : {
          "description" : "The name of the key.",
          "type" : "string"
        },
        "encodedClientPublicKey" : {
          "description" : "Secure Shell key for use when key authentication is enabled for SFTP delivery exchanges.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "json_MqConsumerExchangePointBean" : {
      "title" : "MqConsumerExchangePointBean",
      "description" : ""
    },
    "json_FtpServerSettingsBean" : {
      "title" : "FtpServerSettingsBean",
      "description" : ""
    }
  },
  "securityDefinitions" : {
    "API Key" : {
      "type" : "apiKey",
      "description" : "API Key",
      "name" : "KeyId",
      "in" : "header"
    }
  },
  "security" : [ {
    "API Key" : [ ]
  } ],
  "tags" : [ {
    "name" : "AgreementResource",
    "description" : "Manage agreements and related objects"
  }, {
    "name" : "ApplicationExchangePointResource",
    "description" : "Manage application pickups and deliveries"
  }, {
    "name" : "AuthenticationResource",
    "description" : "Resources used for login and logout operations"
  }, {
    "name" : "CommunityExchangePointResource",
    "description" : "Resources for managing community trading pickups"
  }, {
    "name" : "CommunityResource",
    "description" : "Resources for managing communities"
  }, {
    "name" : "CommunitySecurityResource",
    "description" : "Resources for configuring security on communities"
  }, {
    "name" : "ComponentResource",
    "description" : "Resources for managing components"
  }, {
    "name" : "CrlPurgeResource",
    "description" : "Delete expired CRLs"
  }, {
    "name" : "CsosResource",
    "description" : "Manage CSOS documents"
  }, {
    "name" : "DocumentServiceResource",
    "description" : "Resources for managing services"
  }, {
    "name" : "EmbeddedServerResource",
    "description" : "Manage existing embedded servers"
  }, {
    "name" : "GlobalExternalSmtpServerResource",
    "description" : "Manage global external SMTP server"
  }, {
    "name" : "MessagesResource",
    "description" : "Manage messages attributes"
  }, {
    "name" : "MetadataProfileResource",
    "description" : "Manage metadata profiles"
  }, {
    "name" : "PickupGroupResource",
    "description" : "Manage pickup groups and assignments"
  }, {
    "name" : "TradingPartnerExchangePointResource",
    "description" : "Resources for managing trading partner deliveries"
  }, {
    "name" : "TradingPartnerResource",
    "description" : "Resources for managing trading partners"
  }, {
    "name" : "TradingPartnersSecurityResource",
    "description" : "Manage security on trading partners"
  }, {
    "name" : "UserSecurityResource",
    "description" : "Manage security on trading partners"
  }, {
    "name" : "WebTraderResource",
    "description" : "Manage webtraders"
  } ],
  "info" : {
    "title" : "B2Bi",
    "description" : "This B2Bi API enables configuration of communities, partners and exchanges. This enables partner on-boarding and community management.\n",
    "version" : "1.1.0",
    "contact" : {
      "email" : "support@axway.com"
    },
    "license" : {
      "name" : "Copyright Axway 2017. All rights reserved."
    },
    "x-summary" : "This B2Bi API enables configuration of communities, partners and exchanges. This enables partner on-boarding and community management."
  },
  "x-axway" : {
    "corsEnabled" : true,
    "basePaths" : [ "" ],
    "serviceType" : "rest",
    "deprecated" : false,
    "tags" : {
      "Type" : [ "Axway" ],
      "ENV2" : [ "Central" ],
      "ENV" : [ "Central" ]
    },
    "image" : "/api/portal/v1.3/discovery/swagger/apis/88fb1882-f145-4afe-939e-b27737398da8/image",
    "availableSDK" : {
      "ios-swift" : "/discovery/sdk/88fb1882-f145-4afe-939e-b27737398da8/ios-swift",
      "titanium" : "/discovery/sdk/88fb1882-f145-4afe-939e-b27737398da8/titanium",
      "android" : "/discovery/sdk/88fb1882-f145-4afe-939e-b27737398da8/android",
      "nodejs" : "/discovery/sdk/88fb1882-f145-4afe-939e-b27737398da8/nodejs"
    },
    "customProperties" : {
      "apicId" : "e4e57c9575008de9017521835de9280d"
    }
  }
}